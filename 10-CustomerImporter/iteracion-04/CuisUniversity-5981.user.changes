

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (23 November 2023 17:29:28) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Descargas/linux64/linux64/CustomerImporter-3.st----!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:16:26'!
test01! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:16:55'!
test01SingleSupplierIsImportedCorrectly! !

self makeCurrent!
!DevelopmentEnvironment class methodsFor: 'current' stamp: 'LR 11/23/2023 18:19:30' prior: 50651311 overrides: 50651259!
isCurrent

	"
	self makeCurrent DevelopmentEnvironment .
	"
	^self environmentVariable = self identifier! !

!testRun: #ImportTest #test01 stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:19:30'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:19:30'!
PASSED!
!DevelopmentEnvironment class methodsFor: 'current' stamp: 'LR 11/23/2023 18:19:36' prior: 50651366 overrides: 50651259!
isCurrent

	"
	self makeCurrent
	"
	^self environmentVariable = self identifier! !

!methodRemoval: ImportTest #test01 stamp: 'LR 11/23/2023 18:20:37'!
test01!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:21:34'!
CustomerImporter subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:21:18' prior: 50651360!
test01SingleSupplierIsImportedCorrectly

	| stream |
	SupplierImporter import: stream into: system.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:24:49' prior: 50651427!
test01SingleSupplierIsImportedCorrectly

	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter import: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:29:17' prior: 50651434!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter import: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system selectSupplierIdentifiedAs: 'D' numbered: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier hasNoCustomers.
	self assert: supplier hasNoAdresses.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:30:37' prior: 50651444!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system selectSupplierIdentifiedAs: 'D' numbered: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier hasNoCustomers.
	self assert: supplier hasNoAdresses.
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:31:13'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:31:13'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:31:46' overrides: 50650859!
importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:31:46' prior: 50650859!
importRecord

	self subclassResponsibility! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:31:57' prior: 50651495!
importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

!methodRemoval: SupplierImporter #importRecord stamp: 'LR 11/23/2023 18:31:57'!
importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription!
!SupplierImporter methodsFor: 'nil' stamp: 'LR 11/23/2023 18:32:20' overrides: 50651500!
importRecord
	! !

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:33:50'!
Customer subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:33:43' prior: 50651519 overrides: 50651500!
importRecord

	^Supplier withName: record second identificationType: record third identificationNumber: record fourth
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:34:10'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:34:10'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:34:10'!
ERROR!
!Supplier class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 18:34:24'!
withName: aRenameMe1 identificationType: aRenameMe2 identificationNumber: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithName: aRenameMe1 identificationType: aRenameMe2 identificationNumber: aRenameMe3 ! !
!Supplier class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 18:34:52' prior: 50651576!
withName: aName identificationType: anIdType identificationNumber: aRenameMe3 
	^self new initializeWithName: aName identificationType: anIdType identificationNumber: aRenameMe3 ! !
!Supplier class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 18:34:55' prior: 50651589!
withName: aName identificationType: anIdType identificationNumber: anIdNumber 
	^self new initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber ! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:34:57'!
ERROR!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:35:07'!
Customer subclass: #Supplier
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:35:07'!
Customer subclass: #Supplier
	instanceVariableNames: 'name idType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:35:07'!
Customer subclass: #Supplier
	instanceVariableNames: 'name idType idNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'initialization' stamp: 'LR 11/23/2023 18:35:07'!
initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber 
	self shouldBeImplemented.
	name := aName.
	idType := anIdType.
	idNumber := anIdNumber.! !
!Supplier methodsFor: 'initialization' stamp: 'LR 11/23/2023 18:35:13' prior: 50651632!
initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber 
	name := aName.
	idType := anIdType.
	idNumber := anIdNumber.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:35:15'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:35:43'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:35:43'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:35:43'!
ERROR!
!CustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:36:10'!
numberOfSuppliers
	self shouldBeImplemented.! !
!CustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:36:28' prior: 50651690!
numberOfSuppliers
	self subclassResponsibility .! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:36:32'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:36:32'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:36:32'!
ERROR!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:36:44' overrides: 50651695!
numberOfSuppliers
	self shouldBeImplemented.! !

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:36:58'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers suppliers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:36:56' prior: 50651739 overrides: 50651695!
numberOfSuppliers
	^suppliers size! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:37:02'!
ERROR!
!TransientCustomerSystem methodsFor: 'system lifecycle' stamp: 'LR 11/23/2023 18:37:33' prior: 50651023 overrides: 50650944!
start

	customers := OrderedCollection new.
	suppliers := OrderedCollection new.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:37:48'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:37:48'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:37:48'!
FAILURE!
!PersistentSet methodsFor: 'adding' stamp: 'LR 11/23/2023 18:39:12'!
addCustomer: newObject

	super add: newObject.
	session persist: newObject.
	
	^newObject! !
!CustomerSystem methodsFor: 'customers' stamp: 'LR 11/23/2023 18:39:12'!
addCustomer: aCustomer

	self subclassResponsibility ! !
!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LR 11/23/2023 18:39:12' overrides: 50651812!
addCustomer: aCustomer

	^session persist: aCustomer ! !
!TransientCustomerSystem methodsFor: 'customers' stamp: 'LR 11/23/2023 18:39:12' overrides: 50651812!
addCustomer: aCustomer

	customers add: aCustomer ! !
!PersistentSet methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50650342 overrides: 16935667!
add: newObject

	super addCustomer: newObject.
	session persist: newObject.
	
	^newObject! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50651041 overrides: 50650922!
add: aCustomer

	customers addCustomer: aCustomer ! !
!Customer methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50650702!
addAddress: anAddress

	addresses addCustomer: anAddress ! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50650794!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50651177!
persist: anObject

	| table |

	self assertCanUseDatabase.
	self assertTypeIsPersisted: anObject class.
	self delay.
	
	table := self tableOfType: anObject class.
	self defineIdOf: anObject.
	table addCustomer: anObject.
	self persistRelationsOf: anObject.
! !
!PersistentSet methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50651806!
addCustomer: newObject

	super addCustomer: newObject.
	session persist: newObject.
	
	^newObject! !
!TransientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:39:12' prior: 50651822 overrides: 50651812!
addCustomer: aCustomer

	customers addCustomer: aCustomer ! !

!methodRemoval: PersistentSet #add: stamp: 'LR 11/23/2023 18:39:12'!
add: newObject

	super addCustomer: newObject.
	session persist: newObject.
	
	^newObject!

!methodRemoval: CustomerSystem #add: stamp: 'LR 11/23/2023 18:39:12'!
add: aCustomer

	self subclassResponsibility !

!methodRemoval: PersistentCustomerSystem #add: stamp: 'LR 11/23/2023 18:39:12'!
add: aCustomer

	^session persist: aCustomer !

!methodRemoval: TransientCustomerSystem #add: stamp: 'LR 11/23/2023 18:39:12'!
add: aCustomer

	customers addCustomer: aCustomer !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:39:22'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:39:22'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:39:22'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:39:22'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:39:22'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:39:22'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:39:22'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:39:22'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:39:22'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:39:22'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:39:50'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:39:50'!
ERROR!
!TransientCustomerSystem methodsFor: 'customers' stamp: 'LR 11/23/2023 18:40:02' prior: 50651879 overrides: 50651812!
addCustomer: aCustomer

	customers add: aCustomer ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:05'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'LR 11/23/2023 18:40:23' prior: 50651840!
addAddress: anAddress

	addresses add: anAddress ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:25'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:27'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:40:27'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:27'!
FAILURE!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:40:44' prior: 50651531 overrides: 50651500!
importRecord

	^system addSupplier: (Supplier withName: record second identificationType: record third identificationNumber: record fourth)
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:49'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:40:49'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:40:49'!
ERROR!
!TransientCustomerSystem methodsFor: 'updating' stamp: 'LR 11/23/2023 18:41:28'!
addSupplier: aRenameMe1 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'updating' stamp: 'LR 11/23/2023 18:41:41' prior: 50652045!
addSupplier: aSupplier
	suppliers add: aSupplier! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:41:42'!
ERROR!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:42:26'!
selectSupplierIdentifiedAs: aRenameMe1 numbered: aRenameMe2 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:43:57' prior: 50652058!
selectSupplierIdentifiedAs: aRenameMe1 numbered: aRenameMe2 
	^suppliers select: [ :supplier | supplier isIdentifiedAs: aRenameMe1 numbered: aRenameMe2 ]! !
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:44:06' prior: 50652064!
selectSupplierIdentifiedAs: anIdType numbered: aRenameMe2 
	^suppliers select: [ :supplier | supplier isIdentifiedAs: anIdType numbered: aRenameMe2 ]! !
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:44:10' prior: 50652072!
selectSupplierIdentifiedAs: anIdType numbered: anIdNumber 
	^suppliers select: [ :supplier | supplier isIdentifiedAs: anIdType numbered: anIdNumber ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:44:13'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:44:27'!
isIdentifiedAs: anIdType numbered: anIdNumber 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:45:02' prior: 50652091!
isIdentifiedAs: anIdType numbered: anIdNumber 
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:45:04'!
ERROR!

----End fileIn of /home/clinux01/Descargas/linux64/linux64/Packages/TerseGuide.pck.st----!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:46:41'!
supplierWithIdentificationType: anIdType number: anIdNumber 
	^suppliers select: [ :supplier | supplier isIdentifiedAs: anIdType numbered: anIdNumber ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 18:46:41' prior: 50651461!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier hasNoCustomers.
	self assert: supplier hasNoAdresses.
	
	
	! !

!methodRemoval: TransientCustomerSystem #selectSupplierIdentifiedAs:numbered: stamp: 'LR 11/23/2023 18:46:41'!
selectSupplierIdentifiedAs: anIdType numbered: anIdNumber 
	^suppliers select: [ :supplier | supplier isIdentifiedAs: anIdType numbered: anIdNumber ]!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:46:46' prior: 50655027!
supplierWithIdentificationType: anIdType number: anIdNumber 
	^suppliers detect: [ :supplier | supplier isIdentifiedAs: anIdType numbered: anIdNumber ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:46:48'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:46:48'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:46:48'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:47:22'!
ERROR!

suppliers!

identificationType = anIdType!

identificationType!

Customer subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:49:53'!
Customer subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'initialization' stamp: 'LR 11/23/2023 18:50:07' prior: 50651641!
initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber 
	firstName := aName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:50:14'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:50:14'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:50:14'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:50:26'!
isIdentifiedAs: aRenameMe1 withNumber: aRenameMe2 withName: aRenameMe3 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:17' prior: 50655171!
isIdentifiedAs: aRenameMe1 withNumber: aRenameMe2 withName: aRenameMe3 
	^identificationType = aRenameMe1 and: [
		identificationNumber = aRenameMe2 and: [
			firstName = aRenameMe3
		]
	]! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:27' prior: 50655177!
isIdentifiedAs: anIdType withNumber: aRenameMe2 withName: aRenameMe3 
	^identificationType = anIdType and: [
		identificationNumber = aRenameMe2 and: [
			firstName = aRenameMe3
		]
	]! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:31' prior: 50655186!
isIdentifiedAs: anIdType withNumber: anIdNumber withName: aRenameMe3 
	^identificationType = anIdType and: [
		identificationNumber = anIdNumber and: [
			firstName = aRenameMe3
		]
	]! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:35' prior: 50655195!
isIdentifiedAs: anIdType withNumber: anIdNumber withName: aName 
	^identificationType = anIdType and: [
		identificationNumber = anIdNumber and: [
			firstName = aName
		]
	]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:51:37'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:46'!
hasNoCustomers
	self shouldBeImplemented.! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:51:52' prior: 50655215!
hasNoCustomers
	^true! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:51:57'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:52:05'!
hasNoAdresses
	self shouldBeImplemented.! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:52:10' prior: 50655227!
hasNoAdresses
	^true! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:52:11'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:52:19'!
PASSED!

#CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #CSVImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:06'!
Object subclass: #CSVImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:16'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:26'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:26'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:37'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:37'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:42'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:42'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:47'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:47'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream line record newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:54'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:53:54'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream line record newCustomer system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:54:04'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:54:04'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'initialization' stamp: 'LR 11/23/2023 18:54:24'!
initializeFrom: aReadStream into: aCustomerSystem

	readStream := aReadStream.
	system := aCustomerSystem ! !

!methodRemoval: CustomerImporter #initializeFrom:into: stamp: 'LR 11/23/2023 18:54:24'!
initializeFrom: aReadStream into: aCustomerSystem

	readStream := aReadStream.
	system := aCustomerSystem !
!CSVImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 18:54:34' overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !

!methodRemoval: CustomerImporter #value stamp: 'LR 11/23/2023 18:54:35'!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:54:47'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !

!methodRemoval: CustomerImporter #assertRecordNotEmpty stamp: 'LR 11/23/2023 18:54:47'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:54:50'!
createRecord

	^ record := line findTokens: $,! !

!methodRemoval: CustomerImporter #createRecord stamp: 'LR 11/23/2023 18:54:50'!
createRecord

	^ record := line findTokens: $,!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:54:53'!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !

!methodRemoval: CustomerImporter #hasLineToImport stamp: 'LR 11/23/2023 18:54:53'!
hasLineToImport

	line := readStream nextLine.
	^line notNil!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'LR 11/23/2023 18:54:59'!
importRecord

	self subclassResponsibility! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:55:03'!
PASSED!

CSVImporter subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:55:17'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:20'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:55:20'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:20'!
ERROR!
!CSVImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 18:55:35'!
from: aReadStream into: aCustomerSystem

	^self new initializeFrom: aReadStream into: aCustomerSystem! !

!methodRemoval: CustomerImporter class #from:into: stamp: 'LR 11/23/2023 18:55:35'!
from: aReadStream into: aCustomerSystem

	^self new initializeFrom: aReadStream into: aCustomerSystem!
!CSVImporter class methodsFor: 'error messages' stamp: 'LR 11/23/2023 18:55:44'!
invalidRecordTypeErrorDescription

	^'Invalid record type'! !

!methodRemoval: CustomerImporter class #invalidRecordTypeErrorDescription stamp: 'LR 11/23/2023 18:55:44'!
invalidRecordTypeErrorDescription

	^'Invalid record type'!
!CSVImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 18:55:49'!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem) value! !

!methodRemoval: CustomerImporter class #valueFrom:into: stamp: 'LR 11/23/2023 18:55:49'!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem) value!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:55:51'!
PASSED!

Object subclass: #Party
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:56:28'!
Object subclass: #Party
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:56:35'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Customer
	instanceVariableNames: 'firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:57:17'!
Party subclass: #Customer
	instanceVariableNames: 'firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:57:20'!
PASSED!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:39'!
Party subclass: #Customer
	instanceVariableNames: 'firstName lastName identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:39'!
Object subclass: #Party
	instanceVariableNames: 'identificationType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:43'!
Party subclass: #Customer
	instanceVariableNames: 'firstName lastName addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:44'!
Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:49'!
Party subclass: #Customer
	instanceVariableNames: 'firstName lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:49'!
Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:55'!
Party subclass: #Customer
	instanceVariableNames: 'lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:58:55'!
Object subclass: #Party
	instanceVariableNames: 'identificationType identificationNumber addresses firstName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/23/2023 18:59:03'!
Party subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Party methodsFor: 'addresses' stamp: 'LR 11/23/2023 18:59:23'!
isAddressesEmpty

	^addresses isEmpty ! !

!methodRemoval: Customer #isAddressesEmpty stamp: 'LR 11/23/2023 18:59:23'!
isAddressesEmpty

	^addresses isEmpty !

!methodRemoval: Supplier #hasNoAdresses stamp: 'LR 11/23/2023 18:59:30'!
hasNoAdresses
	^true!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:59:41'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 18:59:41'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 18:59:41'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 18:59:52' prior: 50655035!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier hasNoCustomers.
	self assert: supplier isAddressesEmpty.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:00:01' prior: 50655816!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier hasNoCustomers.
	self assert: supplier isAddressesEmpty.
	
	
	! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 19:00:09'!
isCustomersEmpty
	^true! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:00:09' prior: 50655834!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assert: supplier isAddressesEmpty.
	
	
	! !

!methodRemoval: Supplier #hasNoCustomers stamp: 'LR 11/23/2023 19:00:10'!
hasNoCustomers
	^true!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:00:13'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 19:00:13'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:00:13'!
ERROR!
!Party methodsFor: 'initialization' stamp: 'LR 11/23/2023 19:00:32' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!methodRemoval: Customer #initialize stamp: 'LR 11/23/2023 19:00:32'!
initialize

	super initialize.
	addresses := OrderedCollection new.!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 19:00:35'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:04:10'!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [SupplierImporter valueFrom: stream into: system.] 
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:04:34' prior: 50655959!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:05:14' prior: 50655967!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 raise: Error - MessageNotUnderstood
		 withMessageText: self! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:06:14' prior: 50655975!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 raise: Error - MessageNotUnderstood
		 withMessageText: SupplierImporter invalidRecordTypeErrorDescription! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:06:21'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:06:21'!
FAILURE!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:07:56' prior: 50655985!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 raise: Error - MessageNotUnderstood
		 withMessageText: [:error | self assert: error equals: SupplierImporter invalidRecordTypeErrorDescription]! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:07:59'!
ERROR!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:07:59'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:08:28' prior: 50656002!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | self assert: error equals: SupplierImporter invalidRecordTypeErrorDescription]! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:08:34' prior: 50656020!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system.
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | self assert: error messageText equals: SupplierImporter invalidRecordTypeErrorDescription]! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:08:37'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:08:37'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:09:44'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:09:53'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:09:53'!
FAILURE!

record!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:14:32' prior: 50651999 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	^system addSupplier: (Supplier withName: record second identificationType: record third identificationNumber: record fourth)
	! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 19:14:37'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:16:25' prior: 50655855!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assert: supplier isAddressesEmpty.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:17:56' prior: 50656072!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:20:46' prior: 50656091!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	SupplierImporter valueFrom: stream into: system.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:20:51'!
FAILURE!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:20:51'!
FAILURE!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:22:30' prior: 50656060 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [^system addSupplier: (Supplier withName: record second identificationType: record third identificationNumber: record fourth)].
	record first = 'A' ifTrue: [ ^self. ]
	! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 19:24:26'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:24:20'!
importAddress

	| newAddress |


	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:27:49' prior: 50656138 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [
		|supplier|
		supplier := Supplier withName: record second identificationType: record third identificationNumber: record fourth.
		^system addSupplier: supplier].
	record first = 'A' ifTrue: [ ^self. ]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:30:43' prior: 50656171 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [
		|supplier|
		supplier := Supplier withName: record second identificationType: record third identificationNumber: record fourth.
		system addSupplier: supplier].
	record first = 'A' ifTrue: [ ^self. ]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:01'!
importSupplier

	|supplier|
		supplier := Supplier withName: record second identificationType: record third identificationNumber: record fourth.
		system addSupplier: supplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:01' prior: 50656184 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [
		self importSupplier].
	record first = 'A' ifTrue: [ ^self. ]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:07' prior: 50656206 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [self importSupplier].
	record first = 'A' ifTrue: [ ^self. ]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:12' prior: 50656215 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [ ^self. ]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:23' prior: 50656196!
importSupplier

	|supplier|
	supplier := Supplier withName: record second identificationType: record third identificationNumber: record fourth.
	system addSupplier: supplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:31:37' prior: 50656224 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [ ^self importAddress.]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:50:42' prior: 50656242 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	record first = 'S' ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [^self importAddress.]
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:51:29'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:51:29'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:52:10'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:52:10'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 19:52:48'!
addAddress: anAddress

	addresses add: anAddress ! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:04'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:04'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:09'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:09'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 19:53:42' prior: 50656232!
importSupplier

	newSupplier := Supplier withName: record second identificationType: record third identificationNumber: record fourth.
	system addSupplier: newSupplier! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:50'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:53:50'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:54:16'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:54:16'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 19:55:30' prior: 50650471!
assertAddressOf: aSupplier at: aStreetName hasNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvinceName
	
	
	
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:22:05' prior: 50656311!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/23/2023 19:58:34'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Party methodsFor: 'evaluating' stamp: 'LR 11/23/2023 19:58:46'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !

!methodRemoval: Supplier #addressAt:ifNone: stamp: 'LR 11/23/2023 19:58:46'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock !

!methodRemoval: Customer #addressAt:ifNone: stamp: 'LR 11/23/2023 19:58:46'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 19:59:13'!
PASSED!

CSVImporter subclass: #AddressImporter
	instanceVariableNames: 'readStream line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CSVImporter subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:02:09'!
CSVImporter subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

AddressImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:02:20'!
AddressImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:02:43'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #AddressImporter stamp: 'LR 11/23/2023 20:03:25'!
CSVImporter subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:06:38'!
Object subclass: #AddressImporter
	instanceVariableNames: 'record importer party'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:06:38'!
for: aCsvImporter party: aNewParty record: aRecord
	^self new initializeFor: aCsvImporter party: aNewParty record: aRecord! !
!AddressImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:06:38'!
initializeFor: aCsvImporter party: aNewParty record: aRecord
	record := aRecord.
	importer := aCsvImporter.
	party := aNewParty.! !
!AddressImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:06:38'!
import

	| newAddress |

	importer assertCustomerWasImported.
	importer assertValidAddressRecord.

	newAddress := Address new.
	party addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:06:38' prior: 50650824!
importAddress
	(AddressImporter for: self party: newCustomer record: record) import! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/23/2023 20:10:03' prior: 50656453!
importAddress
	| addressImporter |
	addressImporter := AddressImporter for: self party: newCustomer record: record.
	(addressImporter) import! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:10:18' prior: 50656459!
importAddress
	 
	addressImporter := AddressImporter for: self party: newCustomer record: record.
	(addressImporter) import! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:10:18'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer addressImporter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/23/2023 20:10:51' prior: 50656467!
importAddress
	addressImporter importFor: self party: newCustomer record: record! !

!methodRemoval: AddressImporter #initializeFor:party:record: stamp: 'LR 11/23/2023 20:11:12'!
initializeFor: aCsvImporter party: aNewParty record: aRecord
	record := aRecord.
	importer := aCsvImporter.
	party := aNewParty.!
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:11:41'!
importFor: anImporter party: aParty record: aRecord

	| newAddress |

	importer assertCustomerWasImported.
	importer assertValidAddressRecord.

	newAddress := Address new.
	party addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

Object subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:11:47'!
Object subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:12:16' prior: 50656495!
importFor: anImporter party: aParty record: aRecord

	| newAddress |

	anImporter assertCustomerWasImported.
	anImporter assertValidAddressRecord.

	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth! !

!methodRemoval: AddressImporter #import stamp: 'LR 11/23/2023 20:12:18'!
import

	| newAddress |

	importer assertCustomerWasImported.
	importer assertValidAddressRecord.

	newAddress := Address new.
	party addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth!
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:21:39'!
importParty: aParty from: aRecord

	| newAddress |

	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/23/2023 20:22:09' prior: 50656483!
importAddress
	
	self assertCustomerWasImported.
	addressImporter importParty: newCustomer from: record! !
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:22:20' prior: 50656552!
importParty: aParty from: aRecord

	| newAddress |

	self assertValidAddressRecord.
	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth! !

!methodRemoval: AddressImporter #importFor:party:record: stamp: 'LR 11/23/2023 20:22:23'!
importFor: anImporter party: aParty record: aRecord

	| newAddress |

	anImporter assertCustomerWasImported.
	anImporter assertValidAddressRecord.

	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth!

!methodRemoval: CustomerImporter #assertValidAddressRecord stamp: 'LR 11/23/2023 20:22:41'!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]!

!classDefinition: #AddressImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:22:49'!
Object subclass: #AddressImporter
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:22:46'!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:23:59' prior: 50656572!
importParty: aParty from: aRecord

	| newAddress |

	self assertValidAddressRecord: aRecord.
	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth! !
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:24:12'!
assertValidAddressRecord: aRecord

	^ aRecord size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !

Object subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:24:16'!
Object subclass: #AddressImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!methodRemoval: AddressImporter #assertValidAddressRecord stamp: 'LR 11/23/2023 20:24:18'!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:24:27'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 20:24:27'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 20:24:27'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 20:24:27'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:24:27'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:24:27'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 20:24:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 20:24:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 20:24:27'!
PASSED!
!AddressImporter methodsFor: 'evaluating' stamp: 'LR 11/23/2023 20:25:21'!
importToParty: aParty from: aRecord

	| newAddress |

	self assertValidAddressRecord: aRecord.
	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:25:21' prior: 50656565!
importAddress
	
	self assertCustomerWasImported.
	addressImporter importToParty: newCustomer from: record! !

!methodRemoval: AddressImporter #importParty:from: stamp: 'LR 11/23/2023 20:25:21'!
importParty: aParty from: aRecord

	| newAddress |

	self assertValidAddressRecord: aRecord.
	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:25:43'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:25:43'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:25:43'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 20:25:43'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 20:25:47'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:25:49'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:25:49'!
ERROR!
!CustomerImporter methodsFor: 'nil' stamp: 'LR 11/23/2023 20:32:24'!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.
	addressImporter := anAddressImporter.! !
!SupplierImporter methodsFor: 'nil' stamp: 'LR 11/23/2023 20:32:36'!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	| addressImporter |
	self initializeFrom: aReadStream into: aCustomerSystem.
	addressImporter := anAddressImporter.! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:32:52'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier addressImporter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:32:49' prior: 50656785!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.
	addressImporter := anAddressImporter.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:33:19' prior: 50656157!
importAddress

	addressImporter! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:33:46' prior: 50656814!
importAddress

	addressImporter importToParty: newSupplier from: record! !
!CSVImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:35:01' prior: 50655547!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:35:51' overrides: 50656825!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!SupplierImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:35:51' overrides: 50656825!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!CSVImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:35:51' prior: 50656825!
from: aReadStream into: aCustomerSystem

	self subclassResponsibility! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:36:14' prior: 50656832 overrides: 50656846!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem! !

!methodRemoval: CSVImporter class #from:into: stamp: 'LR 11/23/2023 20:36:18'!
from: aReadStream into: aCustomerSystem

	self subclassResponsibility!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:36:59'!
from: aReadStream into: aCustomerSystem addressImporter: andAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!SupplierImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:37:00'!
from: aReadStream into: aCustomerSystem addressImporter: andAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem! !
!CSVImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:37:00' prior: 50655569!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !

!methodRemoval: CustomerImporter class #from:into: stamp: 'LR 11/23/2023 20:37:00'!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem!

!methodRemoval: SupplierImporter class #from:into: stamp: 'LR 11/23/2023 20:37:00'!
from: aReadStream into: aCustomerSystem 

	^self new initializeFrom: aReadStream into: aCustomerSystem!
!SupplierImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:38:04' prior: 50656872!
from: aReadStream into: aCustomerSystem addressImporter: andAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !
!SupplierImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:38:30' prior: 50656900!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LR 11/23/2023 20:38:49' prior: 50656864!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter! !
!CSVImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 20:42:43'!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: addressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:42:43' prior: 50650378!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system anAddressImporter: addressImporter..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:42:43' prior: 50656032!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | self assert: error messageText equals: SupplierImporter invalidRecordTypeErrorDescription]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:42:43' prior: 50650559!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system anAddressImporter: addressImporter. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:42:43' prior: 50656109!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:42:43' prior: 50650388!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: system anAddressImporter: addressImporter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !

!methodRemoval: CSVImporter class #valueFrom:into: stamp: 'LR 11/23/2023 20:42:43'!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value!
!CSVImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 20:42:54' prior: 50656926!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!CustomerImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 20:43:59' overrides: 50657018!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!SupplierImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 20:44:00' overrides: 50657018!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!CSVImporter class methodsFor: 'importing' stamp: 'LR 11/23/2023 20:44:00' prior: 50657018!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter

	self subclassResponsibility! !

!methodRemoval: CSVImporter class #valueFrom:into:anAddressImporter: stamp: 'LR 11/23/2023 20:44:06'!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter

	self subclassResponsibility!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'LR 11/23/2023 20:45:21'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system addressImporter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 20:45:19' prior: 50656976!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'LR 11/23/2023 20:45:37' prior: 50650573 overrides: 16961394!
setUp

	system := Environment current createCustomerSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressImporter new.
! !

!methodRemoval: AddressImporter class #for:party:record: stamp: 'LR 11/23/2023 20:45:49'!
for: aCsvImporter party: aNewParty record: aRecord
	^self new initializeFor: aCsvImporter party: aNewParty record: aRecord!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 20:46:09'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:46:10'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 20:46:14'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 20:46:14'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:46:16'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:46:16'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 20:46:16'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:47:09'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:47:09'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 20:47:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 20:47:09'!
PASSED!
!ImportTest methodsFor: 'tests - customer' stamp: 'LR 11/23/2023 20:47:25' prior: 50650420!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: AddressImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:47:28'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:47:28'!
ERROR!

!methodRemoval: CustomerImporter class #invalidAddressRecordErrorDescription stamp: 'LR 11/23/2023 20:48:10'!
invalidAddressRecordErrorDescription

	^'Address record has to have six fields'!
!AddressImporter class methodsFor: 'nil' stamp: 'LR 11/23/2023 20:48:16'!
invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:48:25'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:48:27'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:48:27'!
ERROR!
!ImportTest methodsFor: 'tests - customer' stamp: 'LR 11/23/2023 20:48:37' prior: 50650431!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: AddressImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:48:39'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/23/2023 20:48:46'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 20:48:49'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/23/2023 20:48:49'!
PASSED!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:49:47'!
assertIsSupplier

	^ record first = 'S'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:49:47' prior: 50656251 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self assertIsSupplier ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [^self importAddress.]
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:50:26'!
isSuplierRecord

	^ record first = 'S'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:50:26' prior: 50657281 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSuplierRecord ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [^self importAddress.]
	! !

!methodRemoval: SupplierImporter #assertIsSupplier stamp: 'LR 11/23/2023 20:50:26'!
assertIsSupplier

	^ record first = 'S'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:50:37'!
isSupplierRecord

	^ record first = 'S'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:50:37' prior: 50657295 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	record first = 'A' ifTrue: [^self importAddress.]
	! !

!methodRemoval: SupplierImporter #isSuplierRecord stamp: 'LR 11/23/2023 20:50:37'!
isSuplierRecord

	^ record first = 'S'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:51:05'!
isAddressRecord

	^ record first = 'A'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 20:51:05' prior: 50657313 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	self isAddressRecord ifTrue: [^self importAddress.]
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 20:53:19' prior: 50657067!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assert: supplier isCustomersEmpty.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 20:57:17' prior: 50657339!
test01SingleSupplierIsImportedCorrectly

	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:00:59' prior: 50657362!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer|
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:05:15' prior: 50657384!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer|
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size = 1.
	self assert: supplier customers anyOne equals: importedCustomer.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:07:28' prior: 50657410!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: supplier customers anyOne equals: importedCustomer.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:08:20' prior: 50657440!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: 'Pepe' equals: importedCustomer firstName.
	self assert: 'Sanchez' equals: importedCustomer lastName.
	self assert: 'D' equals: importedCustomer identificationType.
	self assert: '223344' equals: importedCustomer identificationNumber.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:08:46' prior: 50657472!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: 'Pepe' equals: associatedCustomer firstName.
	self assert: 'Sanchez' equals: associatedCustomer lastName.
	self assert: 'D' equals: associatedCustomer identificationType.
	self assert: '223344' equals: associatedCustomer identificationNumber.
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!Customer methodsFor: 'addresses' stamp: 'LR 11/23/2023 21:16:54'!
hasFirstName: aName hasLastName: aLastName hasIdentificationNumber: anIdNumber hasIdType: anIdType

	firstName = aName and:[
				lastName = aLastName and:[
						identificationType = anIdType and:[
								identificationNumber = anIdNumber
							]
					]
			]! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:18:28' prior: 50657510!
test01SingleSupplierIsImportedCorrectly

	| stream supplier importedCustomer associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/23/2023 21:18:46' prior: 50657559!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 21:18:51'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/23/2023 21:18:51'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:20:07' prior: 50657331 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	self isAddressRecord ifTrue: [^self importAddress.].
	self record first = 'NC' ifTrue: [^self importCustomer].
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:20:22' prior: 50657633 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	self isAddressRecord ifTrue: [^self importAddress.].
	record first = 'NC' ifTrue: [^self importCustomer].
	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:21:30'!
importCustomer
	
	! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 21:22:09'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier addressImporter newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:22:08' prior: 50657654!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:23:12' prior: 50657667!
importCustomer

	
	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !

CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier addressImporter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/23/2023 21:23:18'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier addressImporter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:23:30' prior: 50657680!
importCustomer

	|newCustomer|
	
	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:24:48' prior: 50657707!
importCustomer

	|newCustomer|
	
	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/23/2023 21:25:09'!
assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !

----QUIT----(23 November 2023 21:53:32) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (24 November 2023 10:16:59) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:30:58'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:30:58'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:30:58'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:31:16'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:31:16'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:31:16'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:31:46'!
customers
	self shouldBeImplemented.! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:32:37' prior: 50657828!
customers
	^Set with: nil! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:32:39'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:33:52' prior: 50657832!
customers
	| pepeSanchez |
	pepeSanchez = Customer new.
	^Set with: pepeSanchez! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:34:20' prior: 50657839!
customers
	| pepeSanchez |
	pepeSanchez = Customer new.
	^Set with: pepeSanchez! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:35:22' prior: 50657845!
customers
	| pepeSanchez |
	pepeSanchez := Customer new.
	pepeSanchez firstName: 'Pepe'.
	pepeSanchez lastName: 'Sanchez'.
	pepeSanchez identificationType: 'D'.
	pepeSanchez identificationNumber: '22333444'.
	^Set with: pepeSanchez! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:35:29'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:35:29'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:35:30'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:35:30'!
ERROR!

associatedCustomer!

supplier customers!

supplier customers anyOne!

associatedCustomer!

supplier customers anyOne!

supplier customers!

associatedCustomer!

supplier customers anyOne!

associatedCustomer!

associatedCustomer!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 10:39:44' prior: 50657593!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers first.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

supplier customers first!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:40:06'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:40:22' prior: 50657851!
customers
	| pepeSanchez |
	pepeSanchez := Customer new.
	pepeSanchez firstName: 'Pepe'.
	pepeSanchez lastName: 'Sanchez'.
	pepeSanchez identificationType: 'D'.
	pepeSanchez identificationNumber: '22333444'.
	^OrderedCollection with: pepeSanchez! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:40:26'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:40:26'!
ERROR!

associatedCustomer!

associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D'!
!Customer methodsFor: 'addresses' stamp: 'LR 11/24/2023 10:41:33' prior: 50657547!
hasFirstName: aName hasLastName: aLastName hasIdentificationNumber: anIdNumber hasIdType: anIdType

	^firstName = aName and: [
		lastName = aLastName and: [
			identificationType = anIdType and: [
				identificationNumber = anIdNumber
			]
		]
	]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:41:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:41:52'!
PASSED!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:41:59' prior: 50657947!
customers
	| pepeSanchez |
	pepeSanchez := Customer new.
	pepeSanchez firstName: 'Pepe'.
	pepeSanchez lastName: 'Sanchez'.
	pepeSanchez identificationType: 'D'.
	pepeSanchez identificationNumber: '22333444'.
	^Set with: pepeSanchez! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:42:05'!
ERROR!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:42:05'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:42:05'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 10:42:12' prior: 50657910!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:42:14'!
PASSED!

associatedCustomer!
!Customer class methodsFor: 'nil' stamp: 'LR 11/24/2023 10:45:59'!
withFirstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber
	^self new initializeWithFirstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber! !
!Customer methodsFor: 'initialization' stamp: 'LR 11/24/2023 10:47:29'!
initializeWithFirstName: aFirstName lastName: aLastName identificationType: anIdType identificationNumber: anIdNumber
	firstName := aFirstName.
	lastName := aLastName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 10:48:26' prior: 50651846!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identificationType: record
		identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 10:48:44' prior: 50657720!
importCustomer

	|newCustomer|
	
	self assertValidCustomerRecord.

	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identificationType: record
		identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:49:18' prior: 50658018!
customers
	| pepeSanchez |
	pepeSanchez := Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D'
		identificationNumber: '22333444'.
	^Set with: pepeSanchez! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:49:41' prior: 50658118!
customers
	^Set with: Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D'
		identificationNumber: '22333444'! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:49:48' prior: 50658127!
customers
	^Set with: (Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D'
		identificationNumber: '22333444')! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:50:17' prior: 50658135!
customers
	^Set with: (Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D'
		identificationNumber: '22333444'
	)! !

!methodRemoval: Customer #firstName: stamp: 'LR 11/24/2023 10:50:22'!
firstName: aName

	firstName := aName!

!methodRemoval: Customer #lastName: stamp: 'LR 11/24/2023 10:50:23'!
lastName: aLastName

	lastName := aLastName
!

!methodRemoval: Customer #identificationNumber: stamp: 'LR 11/24/2023 10:50:27'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber!

!methodRemoval: Customer #identificationType: stamp: 'LR 11/24/2023 10:50:28'!
identificationType: anIdentificationType

	identificationType := anIdentificationType!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:32'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:32'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:50:32'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:50:32'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:50:32'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:50:32'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:42'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:42'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:48'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:50:48'!
ERROR!

customers!

aCustomer identificationType!

customers!

aCustomer identificationType!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 10:52:39' prior: 50658096!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identificationType: record fourth
		identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 10:52:44' prior: 50658107!
importCustomer

	|newCustomer|
	
	self assertValidCustomerRecord.

	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identificationType: record fourth
		identificationNumber: record fifth.
	system addCustomer: newCustomer! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:52:48'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:52:48'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 10:54:24' prior: 50650490!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := system customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: (importedCustomer hasFirstName: aFirstName hasLastName: aLastName  hasIdentificationNumber: anIdNumber hasIdType: anIdType). 
	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:54:25'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:54:25'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 10:54:30' prior: 50658282!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := system customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: (importedCustomer hasFirstName: aFirstName hasLastName: aLastName  hasIdentificationNumber: anIdNumber hasIdType: anIdType). 

	^importedCustomer

	! !

!methodRemoval: Customer #firstName stamp: 'LR 11/24/2023 10:54:51'!
firstName

	^firstName !

!methodRemoval: Customer #lastName stamp: 'LR 11/24/2023 10:54:53'!
lastName

	^lastName !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 10:57:36'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 10:57:36'!
PASSED!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 10:58:59' prior: 50655204!
isIdentifiedAs: anIdType withNumber: anIdNumber withName: aName 
	^(self isIdentifiedAs: anIdType numbered: anIdNumber) and: [firstName = aName].! !
!Customer methodsFor: 'testing' stamp: 'LR 11/24/2023 11:00:35'!
isIdentifiedWithType: anIdType andNumber: anIdNumber
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]! !
!Party methodsFor: 'testing' stamp: 'LR 11/24/2023 11:00:43'!
isIdentifiedWithType: anIdType andNumber: anIdNumber
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]! !

!methodRemoval: Customer #isIdentifiedWithType:andNumber: stamp: 'LR 11/24/2023 11:00:43'!
isIdentifiedWithType: anIdType andNumber: anIdNumber
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]!
!Customer methodsFor: 'testing' stamp: 'LR 11/24/2023 11:01:09' prior: 50657969!
hasFirstName: aName hasLastName: aLastName hasIdentificationNumber: anIdNumber hasIdType: anIdType

	^firstName = aName and: [
		lastName = aLastName and: [
			self isIdentifiedWithType: anIdType andNumber: anIdNumber
		]
	]! !

!methodRemoval: Supplier #isIdentifiedAs:numbered: stamp: 'LR 11/24/2023 11:01:22'!
isIdentifiedAs: anIdType numbered: anIdNumber 
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:01:32' prior: 50658402!
isIdentifiedAs: anIdType withNumber: anIdNumber withName: aName 
	^(self isIdentifiedAs: anIdType withNumber: anIdNumber) and: [firstName = aName].! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:01:54'!
isIdentifiedWithType: anIdType andNumber: anIdNumber withName: aName 
	^(self isIdentifiedAs: anIdType withNumber: anIdNumber) and: [firstName = aName].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 11:01:54' prior: 50658038!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedWithType: 'D' andNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: Supplier #isIdentifiedAs:withNumber:withName: stamp: 'LR 11/24/2023 11:01:54'!
isIdentifiedAs: anIdType withNumber: anIdNumber withName: aName 
	^(self isIdentifiedAs: anIdType withNumber: anIdNumber) and: [firstName = aName].!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:02:02' prior: 50658454!
isIdentifiedWithType: anIdType andNumber: anIdNumber withName: aName 
	^(self isIdentifiedWithType: anIdType andNumber: anIdNumber) and: [firstName = aName].! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:09'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:02:09'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:09'!
ERROR!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:02:41' prior: 50655061!
supplierWithIdentificationType: anIdType number: anIdNumber 
	^suppliers detect: [ :supplier | supplier isIdentifiedWithType: anIdType andNumber: anIdNumber ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:47'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:02:51'!
PASSED!

!methodRemoval: Supplier #isCustomersEmpty stamp: 'LR 11/24/2023 11:05:42'!
isCustomersEmpty
	^true!
!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:07:59' prior: 50650971 overrides: 50650926!
customerWithIdentificationType: anIdType number: anIdNumber

	^(session
		select: [ :aCustomer | aCustomer isIdentifiedWithType: anIdType andNumber: anIdNumber ]
		ofType: Customer
	) anyOne! !
!TransientCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:08:31' prior: 50651046 overrides: 50650926!
customerWithIdentificationType: anIdType number: anIdNumber

	^customers detect: [ :aCustomer | aCustomer isIdentifiedWithType: anIdType andNumber: anIdNumber ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:08:34'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:08:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:08:35'!
PASSED!

Object subclass: #PartyId
	instanceVariableNames: 'type number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PartyId category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:09:46'!
Object subclass: #PartyId
	instanceVariableNames: 'type number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 11:11:39'!
withFirstName: firstName lastName: lastName identification: partyId
	^self new initializeWithFirstName: firstName lastName: lastName identification: partyId! !

!methodRemoval: Customer class #withFirstName:lastName:identificationType:identificationNumber: stamp: 'LR 11/24/2023 11:11:43'!
withFirstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber
	^self new initializeWithFirstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:12:07'!
Party subclass: #Customer
	instanceVariableNames: 'lastName identification'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:12:05'!
initializeWithFirstName: aFirstName lastName: aLastName identification: aPartyId
	firstName := aFirstName.
	lastName := aLastName.
	identification := aPartyId.! !

Object subclass: #Party
	instanceVariableNames: 'identification addresses firstName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Party subclass: #Customer
	instanceVariableNames: 'lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:12:29'!
Party subclass: #Customer
	instanceVariableNames: 'lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Object subclass: #Party
	instanceVariableNames: 'identification addresses firstName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:12:34'!
Object subclass: #Party
	instanceVariableNames: 'identification addresses firstName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:12:56'!
initializeWithName: aName identification: aPartyId
	firstName := aName.
	identification := aPartyId.! !

!methodRemoval: Supplier #initializeWithName:identificationType:identificationNumber: stamp: 'LR 11/24/2023 11:13:00'!
initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber 
	firstName := aName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.!
!Supplier class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 11:13:14'!
withName: aName identification: aPartyId
	^self new initializeWithName: aName identification: aPartyId ! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:13:17'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:13:17'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:13:17'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:13:17'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:13:17'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:13:17'!
PASSED!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:15:23'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system addressImporter pepeSanchezId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:15:21' prior: 50658462!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isIdentifiedWithType: 'D' andNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'LR 11/24/2023 11:15:53' prior: 50657090 overrides: 16961394!
setUp

	system := Environment current createCustomerSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressImporter new.
	pepeSanchezId := PartyId ofType: 'D' numbered: '22333444'.
! !
!PartyId class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 11:16:12'!
ofType: aRenameMe1 numbered: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOfType: aRenameMe1 numbered: aRenameMe2 ! !
!PartyId class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 11:16:36' prior: 50658850!
ofType: idType numbered: idNumber 
	^self new initializeWithType: idType numbered: idNumber ! !

!classDefinition: #PartyId category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:16:52'!
Object subclass: #PartyId
	instanceVariableNames: 'type number idType_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PartyId category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:16:52'!
Object subclass: #PartyId
	instanceVariableNames: 'type number idType_CHANGE_ME idNumber_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PartyId methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:16:52'!
initializeWithType: idType numbered: idNumber 
	self shouldBeImplemented.
	idType_CHANGE_ME := idType.
	idNumber_CHANGE_ME := idNumber.! !
!PartyId methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:16:58' prior: 50658882!
initializeWithType: anIdType numbered: idNumber 
	self shouldBeImplemented.
	idType_CHANGE_ME := anIdType.
	idNumber_CHANGE_ME := idNumber.! !
!PartyId methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:17:03' prior: 50658890!
initializeWithType: anIdType numbered: anIdNumber 
	self shouldBeImplemented.
	idType_CHANGE_ME := anIdType.
	idNumber_CHANGE_ME := anIdNumber.! !
!PartyId methodsFor: 'initialization' stamp: 'LR 11/24/2023 11:17:19' prior: 50658898!
initializeWithType: anIdType numbered: anIdNumber 
	type := anIdType.
	number := anIdNumber.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:17:20'!
ERROR!

Object subclass: #PartyId
	instanceVariableNames: 'type number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PartyId category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:17:29'!
Object subclass: #PartyId
	instanceVariableNames: 'type number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:17:33'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:17:33'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:18:09'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:18:09'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 11:19:28' prior: 50656289!
importSupplier

	newSupplier := Supplier withName: record second identification: (PartyId ofType: record third numbered: record fourth).
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 11:19:42' prior: 50658941!
importSupplier

	| id |
	id := PartyId ofType: record third numbered: record fourth.
	newSupplier := Supplier withName: record second identification: (id).
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 11:19:49' prior: 50658950!
importSupplier

	| id |
	id := PartyId ofType: record third numbered: record fourth.
	newSupplier := Supplier withName: record second identification: id.
	system addSupplier: newSupplier! !

!methodRemoval: Supplier class #withName:identificationType:identificationNumber: stamp: 'LR 11/24/2023 11:20:07'!
withName: aName identificationType: anIdType identificationNumber: anIdNumber 
	^self new initializeWithName: aName identificationType: anIdType identificationNumber: anIdNumber !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:20:13'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:20:13'!
ERROR!
!Customer class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 11:20:27'!
withFirstName: aRenameMe1 lastName: aRenameMe2 identificationType: aRenameMe3 identificationNumber: aRenameMe4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithFirstName: aRenameMe1 lastName: aRenameMe2 identificationType: aRenameMe3 identificationNumber: aRenameMe4 ! !

!methodRemoval: Customer class #withFirstName:lastName:identificationType:identificationNumber: stamp: 'LR 11/24/2023 11:20:56'!
withFirstName: aRenameMe1 lastName: aRenameMe2 identificationType: aRenameMe3 identificationNumber: aRenameMe4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithFirstName: aRenameMe1 lastName: aRenameMe2 identificationType: aRenameMe3 identificationNumber: aRenameMe4 !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:21:10'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:21:10'!
ERROR!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 11:21:56' prior: 50658233!
importCustomer

	|newCustomer id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identification: id.
	system addCustomer: newCustomer! !

!methodRemoval: Customer #initializeWithFirstName:lastName:identificationType:identificationNumber: stamp: 'LR 11/24/2023 11:22:13'!
initializeWithFirstName: aFirstName lastName: aLastName identificationType: anIdType identificationNumber: anIdNumber
	firstName := aFirstName.
	lastName := aLastName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:22:28'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:22:28'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:24:22' prior: 50650543!
assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:25:02'!
assertCustomerWithIdentification: anId hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := system customerWithIdentification: anId.

	self assert: (importedCustomer hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId). 

	^importedCustomer

	! !

!methodRemoval: ImportTest #assertCustomerWithIdentificationType:number:hasFirstName:lastName: stamp: 'LR 11/24/2023 11:25:09'!
assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := system customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: (importedCustomer hasFirstName: aFirstName hasLastName: aLastName  hasIdentificationNumber: anIdNumber hasIdType: anIdType). 

	^importedCustomer

	!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:25:35'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:25:35'!
ERROR!
!Party methodsFor: 'testing' stamp: 'LR 11/24/2023 11:27:07'!
isIdentifiedWith: anId
	^identification equals: anId! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:27:24'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:27:24'!
ERROR!

!methodRemoval: Party #isIdentifiedWithType:andNumber: stamp: 'LR 11/24/2023 11:27:47'!
isIdentifiedWithType: anIdType andNumber: anIdNumber
	^identificationType = anIdType and: [ identificationNumber = anIdNumber ]!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:27:54'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:27:54'!
ERROR!
!TransientCustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:30:08'!
supplierWithIdentification: anId
	^suppliers detect: [ :supplier | supplier isIdentifiedWith: anId ]! !

!methodRemoval: TransientCustomerSystem #supplierWithIdentificationType:number: stamp: 'LR 11/24/2023 11:30:13'!
supplierWithIdentificationType: anIdType number: anIdNumber 
	^suppliers detect: [ :supplier | supplier isIdentifiedWithType: anIdType andNumber: anIdNumber ]!
!CustomerSystem methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:30:20'!
supplierWithIdentification: anId

	self subclassResponsibility! !

!methodRemoval: Supplier #isIdentifiedWithType:andNumber:withName: stamp: 'LR 11/24/2023 11:30:49'!
isIdentifiedWithType: anIdType andNumber: anIdNumber withName: aName 
	^(self isIdentifiedWithType: anIdType andNumber: anIdNumber) and: [firstName = aName].!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:30:55'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:30:55'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:31:20' prior: 50658808!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentification: supplierId.
	self assert: (supplier isIdentifiedWithType: 'D' andNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:31:49' prior: 50659162!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentification: supplierId.
	self assert: (supplier isIdentifiedWithType: 'D' andNumber: '123' withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:31:59' prior: 50659195!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentification: supplierId.
	self assert: (supplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentificationNumber: '22333444' hasIdType: 'D').
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:32:14'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:32:14'!
ERROR!
!PartyId methodsFor: 'testing' stamp: 'LR 11/24/2023 11:32:32'!
equals: anId 
	self shouldBeImplemented.! !
!PartyId methodsFor: 'testing' stamp: 'LR 11/24/2023 11:32:56' prior: 50659268!
equals: anId 
	number = anId number and: [ type = anId type ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:32:58'!
ERROR!
!PartyId methodsFor: 'accessing' stamp: 'LR 11/24/2023 11:33:07'!
number
	self shouldBeImplemented.
	^number! !
!PartyId methodsFor: 'accessing' stamp: 'LR 11/24/2023 11:33:12' prior: 50659280!
number
	^number! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:33:15'!
ERROR!
!PartyId methodsFor: 'accessing' stamp: 'LR 11/24/2023 11:33:19'!
type
	self shouldBeImplemented.
	^type! !
!PartyId methodsFor: 'accessing' stamp: 'LR 11/24/2023 11:33:22' prior: 50659290!
type
	^type! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:33:23'!
ERROR!
!PartyId methodsFor: 'testing' stamp: 'LR 11/24/2023 11:33:54' prior: 50659272!
equals: anId 
	^number = anId number and: [ type = anId type ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:33:59'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:33:59'!
ERROR!
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 11:34:15'!
isIdentifiedWith: supplierId withName: aRenameMe1 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 11:34:58' prior: 50659312!
isIdentifiedWith: supplierId withName: aRenameMe1 
	^(self isIdentifiedWith: supplierId) and: [ firstName = aRenameMe1 ]! !
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 11:35:01' prior: 50659318!
isIdentifiedWith: supplierId withName: name 
	^(self isIdentifiedWith: supplierId) and: [ firstName = name ]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:35:08'!
ERROR!
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 11:35:53'!
hasFirstName: name

	^ firstName = name! !
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 11:35:53' prior: 50659325!
isIdentifiedWith: supplierId withName: name 
	^(self isIdentifiedWith: supplierId) and: [ self hasFirstName: name ]! !
!Party methodsFor: 'testing' stamp: 'LR 11/24/2023 11:35:58'!
hasFirstName: name

	^ firstName = name! !

!methodRemoval: Supplier #hasFirstName: stamp: 'LR 11/24/2023 11:35:58'!
hasFirstName: name

	^ firstName = name!
!Customer methodsFor: 'testing' stamp: 'LR 11/24/2023 11:36:16' prior: 50658430!
hasFirstName: aName hasLastName: aLastName hasIdentificationNumber: anIdNumber hasIdType: anIdType

	^(self hasFirstName: aName) and: [
		lastName = aLastName and: [
			self isIdentifiedWithType: anIdType andNumber: anIdNumber
		]
	]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:38:21'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:38:21'!
ERROR!
!TransientCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:38:50'!
customerWithIdentification: anId 
	self shouldBeImplemented.! !

!methodRemoval: TransientCustomerSystem #customerWithIdentificationType:number: stamp: 'LR 11/24/2023 11:39:38'!
customerWithIdentificationType: anIdType number: anIdNumber

	^customers detect: [ :aCustomer | aCustomer isIdentifiedWithType: anIdType andNumber: anIdNumber ]!
!TransientCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:39:58' prior: 50659369!
customerWithIdentification: anId 
	^customers detect: [:customer | customer isIdentifiedWith: anId]! !
!CustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:40:09'!
customerWithIdentification: anId

	self subclassResponsibility! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:40:30'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:40:30'!
ERROR!
!Customer methodsFor: 'testing' stamp: 'LR 11/24/2023 11:40:54'!
hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId 
	self shouldBeImplemented.! !
!Customer methodsFor: 'testing' stamp: 'LR 11/24/2023 11:41:34' prior: 50659400!
hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId 
	
	^(self hasFirstName: aFirstName) and: [
		lastName = aLastName and: [
			self isIdentifiedWith: anId
		]
	]! !

!methodRemoval: Customer #hasFirstName:hasLastName:hasIdentificationNumber:hasIdType: stamp: 'LR 11/24/2023 11:41:47'!
hasFirstName: aName hasLastName: aLastName hasIdentificationNumber: anIdNumber hasIdType: anIdType

	^(self hasFirstName: aName) and: [
		lastName = aLastName and: [
			self isIdentifiedWithType: anIdType andNumber: anIdNumber
		]
	]!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:41:56'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:41:56'!
ERROR!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 11:42:33' prior: 50658143!
customers
	^Set with: (Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identification: (PartyId ofType: 'D' numbered: '22333444')
	)! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:42:34'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:42:49' prior: 50659229!
test01SingleSupplierIsImportedCorrectly

	| stream supplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentification: supplierId.
	self assert: (supplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier customers size equals: 1.
	associatedCustomer := supplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: supplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:42:50'!
FAILURE!

suppliers!

system numberOfSuppliers!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:43:55'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:43:57'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:43:59'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:43:59'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:44:00'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:44:00'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:44:00'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:44:00'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:44:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:44:01'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:44:05'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:44:05'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 11:44:44' prior: 50658222!
importCustomer

	| id |
	self assertValidCustomerRecord.
	
	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identificationType: record fourth
		identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 11:44:55' prior: 50659538!
importCustomer

	| id |
	self assertValidCustomerRecord.
	
	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identification: id.
	system addCustomer: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:44:57'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:45:50' prior: 50650526!
assertJuanPerezWasImportedCorrectly

	| importedCustomer juanPerezId |
	
	juanPerezId := PartyId ofType: 'C' numbered: '23-25666777-9'.
	importedCustomer := self assertCustomerWithIdentification: juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:45:53'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:45:56'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:45:56'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:45:56'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:45:56'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:46:02'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:46:02'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:47:11' prior: 50650509!
assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: system numberOfCustomers.
	importedCustomer := system customerWithIdentification: pepeSanchezId.
	self assert: importedCustomer isAddressesEmpty
	! !

!methodRemoval: CustomerSystem #customerWithIdentificationType:number: stamp: 'LR 11/24/2023 11:47:20'!
customerWithIdentificationType: anIdType number: anIdNumber

	self subclassResponsibility !

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:47:47'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:47:49'!
PASSED!

self makeCurrent!

self makeCurrent!

self makeCurrent!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:48:07'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:48:08'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:48:08'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:48:08'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:48:08'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:48:08'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:48:17'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:48:17'!
ERROR!
!CustomerSystem methodsFor: 'updating' stamp: 'LR 11/24/2023 11:48:42'!
addSupplier: aSupplier

	self subclassResponsibility! !
!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:49:09' overrides: 50659726!
addSupplier: aSupplier

	^session persist: aSupplier! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:49:28'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:49:28'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:49:28'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:49:28'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:49:28'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:49:29'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:49:29'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:49:29'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:49:29'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:49:29'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:49:29'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:49:38'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:49:38'!
ERROR!
!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LR 11/24/2023 11:50:45' overrides: 50659389!
customerWithIdentification: anId

	^(session
		select: [ :aCustomer | aCustomer isIdentifiedWith: anId ]
		ofType: Customer
	) anyOne! !

!methodRemoval: PersistentCustomerSystem #customerWithIdentificationType:number: stamp: 'LR 11/24/2023 11:50:47'!
customerWithIdentificationType: anIdType number: anIdNumber

	^(session
		select: [ :aCustomer | aCustomer isIdentifiedWithType: anIdType andNumber: anIdNumber ]
		ofType: Customer
	) anyOne!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:50:51'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:50:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:50:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:50:52'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:50:52'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:50:52'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:50:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:50:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:50:52'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:50:59'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:50:59'!
ERROR!

Party subclass: #Customer
	instanceVariableNames: 'id lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LR 11/24/2023 11:51:44'!
Party subclass: #Customer
	instanceVariableNames: 'id lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:51:46'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:51:47'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:51:47'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:51:47'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:51:47'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:51:47'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:51:50'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:51:50'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:51:50'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:51:50'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:51:51'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:51:51'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:51:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:51:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:51:51'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:51:55'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:51:55'!
ERROR!
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 11/14/2023 09:06:24' prior: 50651859!
persist: anObject

	| table |

	self assertCanUseDatabase.
	self assertTypeIsPersisted: anObject class.
	self delay.
	
	table := self tableOfType: anObject class.
	self defineIdOf: anObject.
	table add: anObject.
	self persistRelationsOf: anObject.
! !
!DataBaseSession methodsFor: 'persistance' stamp: 'LR 11/24/2023 11:53:19' prior: 50659924!
persist: anObject

	| table |

	self assertCanUseDatabase.
	self assertTypeIsPersisted: anObject class.
	self delay.
	
	table := self tableOfType: anObject class.
	self defineIdOf: anObject.
	table add: anObject.
	self persistRelationsOf: anObject.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:53:22'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:53:23'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:53:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:53:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:53:24'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:53:24'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:53:24'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:53:25'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:53:25'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:53:25'!
PASSED!

self makeCurrent!

self makeCurrent!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:54:28'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:54:30'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:54:30'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:56:56' prior: 50656947!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | 
			self assert: error messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertNoSupplierWasImported.
		]! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:56:59'!
ERROR!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:56:59'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:57:06'!
assertNoSupplierWasImported
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:57:17' prior: 50660040!
assertNoSupplierWasImported
	system! !

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:57:18'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 11:57:48' prior: 50660045!
assertNoSupplierWasImported

	^ self assert: 0 equals: system numberOfSuppliers! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 11:57:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 11:57:52'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 11:58:43' prior: 50659444!
test01SingleSupplierIsImportedCorrectly

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system anAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!CustomerImporter class methodsFor: 'importing' stamp: 'LR 11/24/2023 12:01:25'!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!SupplierImporter class methodsFor: 'importing' stamp: 'LR 11/24/2023 12:01:25'!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:01:25' prior: 50656935!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system withAddressImporter: addressImporter..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:01:25' prior: 50660020!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system withAddressImporter: addressImporter.
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | 
			self assert: error messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:01:25' prior: 50656998!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: system withAddressImporter: addressImporter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:01:25' prior: 50660096!
test01SingleSupplierIsImportedCorrectly

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system withAddressImporter: addressImporter.
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:01:25' prior: 50656961!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system withAddressImporter: addressImporter. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !

!methodRemoval: CustomerImporter class #valueFrom:into:anAddressImporter: stamp: 'LR 11/24/2023 12:01:25'!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value!

!methodRemoval: SupplierImporter class #valueFrom:into:anAddressImporter: stamp: 'LR 11/24/2023 12:01:25'!
valueFrom: aReadStream into: aCustomerSystem anAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter) value!

!classDefinition: #CustomerRecor category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:04:30'!
Object subclass: #CustomerRecor
	instanceVariableNames: 'record system delete'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerRecor class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:04:30'!
delete: aSelf of: aRecord system: aSystem
	^self new initializeDelete: aSelf of: aRecord system: aSystem! !
!CustomerRecor methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:04:30'!
initializeDelete: aSelf of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.
	delete := aSelf.! !
!CustomerRecor methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:04:30'!
compute

	|newCustomer id|
	
	delete assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identification: id.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:04:30' prior: 50659021!
importCustomer
	(CustomerRecor delete: self of: record system: system) compute! !

Object subclass: #CustomerRecord
	instanceVariableNames: 'record system delete'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:04:35'!
Object subclass: #CustomerRecord
	instanceVariableNames: 'record system delete'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerRecord stamp: 'LR 11/24/2023 12:04:43'!
Object subclass: #CustomerRecord
	instanceVariableNames: 'record system delete'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRenamed: #CustomerRecor as: #CustomerRecord stamp: 'LR 11/24/2023 12:04:46'!
Smalltalk renameClassNamed: #CustomerRecor as: #CustomerRecord!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:04:46' prior: 50660289!
importCustomer
	(CustomerRecord delete: self of: record system: system) compute! !

Object subclass: #CustomerRecord
	instanceVariableNames: 'record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:05:24'!
Object subclass: #CustomerRecord
	instanceVariableNames: 'record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:05:28' prior: 50660270!
initializeDelete: aSelf of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.! !
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:05:39'!
of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:05:39' prior: 50660264!
delete: aSelf of: aRecord system: aSystem
	^self new of: aRecord system: aSystem! !

!methodRemoval: CustomerRecord #initializeDelete:of:system: stamp: 'LR 11/24/2023 12:05:39'!
initializeDelete: aSelf of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.!
!CustomerRecord class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:05:58'!
of: aRecord system: aSystem
	^self new of: aRecord system: aSystem! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:05:58' prior: 50660320!
importCustomer
	(CustomerRecord of: record system: system) compute! !

!methodRemoval: CustomerRecord class #delete:of:system: stamp: 'LR 11/24/2023 12:05:58'!
delete: aSelf of: aRecord system: aSystem
	^self new of: aRecord system: aSystem!
!CustomerRecord class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:06:12'!
initializeWithRecord: aRecord system: aSystem
	^self new of: aRecord system: aSystem! !
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:06:12'!
initializeWithRecord: aRecord system: aSystem
	record := aRecord.
	system := aSystem.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:06:12' prior: 50660368!
importCustomer
	(CustomerRecord initializeWithRecord: record system: system) compute! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:06:12' prior: 50660362!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord system: aSystem! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:06:12' prior: 50660379!
initializeWithRecord: aRecord system: aSystem
	^self new initializeWithRecord: aRecord system: aSystem! !

!methodRemoval: CustomerRecord class #of:system: stamp: 'LR 11/24/2023 12:06:12'!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord system: aSystem!

!methodRemoval: CustomerRecord #of:system: stamp: 'LR 11/24/2023 12:06:12'!
of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.!
!CustomerRecord class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:07:08'!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord system: aSystem! !
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:07:08'!
of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:07:08' prior: 50660405!
initializeWithRecord: aRecord system: aSystem
	^self new of: aRecord system: aSystem! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:07:08' prior: 50660391!
importCustomer
	(CustomerRecord of: record system: system) compute! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:07:08' prior: 50660421!
of: aRecord system: aSystem
	^self new of: aRecord system: aSystem! !

!methodRemoval: CustomerRecord class #initializeWithRecord:system: stamp: 'LR 11/24/2023 12:07:08'!
initializeWithRecord: aRecord system: aSystem
	^self new of: aRecord system: aSystem!

!methodRemoval: CustomerRecord #initializeWithRecord:system: stamp: 'LR 11/24/2023 12:07:08'!
initializeWithRecord: aRecord system: aSystem
	record := aRecord.
	system := aSystem.!
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:07:25'!
initializeWithRecord: aRecord system: aSystem
	record := aRecord.
	system := aSystem.! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:07:25' prior: 50660445!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord system: aSystem! !

!methodRemoval: CustomerRecord #of:system: stamp: 'LR 11/24/2023 12:07:25'!
of: aRecord system: aSystem
	record := aRecord.
	system := aSystem.!
!CustomerRecord methodsFor: 'nil' stamp: 'LR 11/24/2023 12:08:15'!
assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:08:40' prior: 50660277!
compute

	|newCustomer id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identification: id.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:12:12' prior: 50660439!
importCustomer
	
	system addCustomer: (CustomerRecord of: record) parseCustomer! !

Object subclass: #CustomerRecord
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:12:34'!
Object subclass: #CustomerRecord
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:12:38' prior: 50660462!
initializeWithRecord: aRecord system: aSystem
	record := aRecord.! !
!CustomerRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:12:56'!
initializeWithRecord: aRecord 
	record := aRecord.! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:12:56' prior: 50660469!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord ! !

!methodRemoval: CustomerRecord #initializeWithRecord:system: stamp: 'LR 11/24/2023 12:12:56'!
initializeWithRecord: aRecord system: aSystem
	record := aRecord.!
!CustomerRecord class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:13:06'!
of: aRecord 
	^self new initializeWithRecord: aRecord ! !

!methodRemoval: CustomerRecord class #of:system: stamp: 'LR 11/24/2023 12:13:06'!
of: aRecord system: aSystem
	^self new initializeWithRecord: aRecord !
!CustomerRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:13:27' prior: 50660486!
compute

	|newCustomer id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	newCustomer := Customer
		withFirstName: record second
		lastName: record third
		identification: id.! !
!CustomerRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:13:39' prior: 50660547!
compute

	|id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	^Customer
		withFirstName: record second
		lastName: record third
		identification: id.! !
!CustomerRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:13:59'!
parseCustomer

	|id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	^Customer
		withFirstName: record second
		lastName: record third
		identification: id.! !

!methodRemoval: CustomerRecord #compute stamp: 'LR 11/24/2023 12:13:59'!
compute

	|id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	^Customer
		withFirstName: record second
		lastName: record third
		identification: id.!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 12:14:58' prior: 50659551!
importCustomer

	
	self assertValidCustomerRecord.
	
	newCustomer := (CustomerRecord of: record) parseCustomer.
	system addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 12:15:05' prior: 50660584!
importCustomer

	self assertValidCustomerRecord.
	
	newCustomer := (CustomerRecord of: record) parseCustomer.
	system addCustomer: newCustomer! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:16:46'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:17:36'!
PASSED!

anError messageText!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 12:20:07' prior: 50660592!
importCustomer
	newCustomer := (CustomerRecord of: record) parseCustomer.
	system addCustomer: newCustomer! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:20:18'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:20:18'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:20:18'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:20:18'!
PASSED!
!CustomerRecord class methodsFor: 'nil' stamp: 'LR 11/24/2023 12:20:55'!
invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !

!methodRemoval: CustomerImporter class #invalidCustomerRecordErrorDescription stamp: 'LR 11/24/2023 12:21:19'!
invalidCustomerRecordErrorDescription

	^'Invalid Customer record'!
!ImportTest methodsFor: 'tests - customer' stamp: 'LR 11/24/2023 12:21:25' prior: 50650442!
test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerRecord invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests - customer' stamp: 'LR 11/24/2023 12:21:32' prior: 50650452!
test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerRecord invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !

!classRenamed: #AddressImporter as: #AddressRecord stamp: 'LR 11/24/2023 12:24:33'!
Smalltalk renameClassNamed: #AddressImporter as: #AddressRecord!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:24:33' prior: 50657181!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: AddressRecord invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:24:33' prior: 50657222!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: AddressRecord invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:24:33' prior: 50658841 overrides: 16961394!
setUp

	system := Environment current createCustomerSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressRecord new.
	pepeSanchezId := PartyId ofType: 'D' numbered: '22333444'.
! !

Object subclass: #CsvRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CsvRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:25:43'!
Object subclass: #CsvRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CsvRecord methodsFor: 'nil' stamp: 'LR 11/24/2023 12:25:56'!
parse

	^self subclassResponsibility ! !
!CsvRecord class methodsFor: 'nil' stamp: 'LR 11/24/2023 12:26:26'!
of: record
	^self new initializeWith: record! !

CsvRecord subclass: #CustomerRecord
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:27:33'!
CsvRecord subclass: #CustomerRecord
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:27:43'!
CsvRecord subclass: #CustomerRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CsvRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:27:43'!
Object subclass: #CsvRecord
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:27:58' overrides: 50660767!
parse

	|id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	^Customer
		withFirstName: record second
		lastName: record third
		identification: id.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:27:58' prior: 50660642!
importCustomer
	newCustomer := (CustomerRecord of: record) parse.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:27:58' prior: 50660498!
importCustomer
	
	system addCustomer: (CustomerRecord of: record) parse! !

!methodRemoval: CustomerRecord #parseCustomer stamp: 'LR 11/24/2023 12:27:58'!
parseCustomer

	|id|
	
	self assertValidCustomerRecord.

	id := PartyId ofType: record fourth numbered: record fifth.
	^Customer
		withFirstName: record second
		lastName: record third
		identification: id.!
!CsvRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:28:14'!
initializeWithRecord: aRecord 
	record := aRecord.! !

!methodRemoval: CustomerRecord #initializeWithRecord: stamp: 'LR 11/24/2023 12:28:14'!
initializeWithRecord: aRecord 
	record := aRecord.!

CsvRecord subclass: #AddressRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:28:34'!
CsvRecord subclass: #AddressRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:28:48'!
assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !

!methodRemoval: AddressRecord #assertValidAddressRecord: stamp: 'LR 11/24/2023 12:28:51'!
assertValidAddressRecord: aRecord

	^ aRecord size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]!
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:29:25' overrides: 50660767!
parse

	| newAddress |
	self assertValidAddressRecord.
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/24/2023 12:30:18' prior: 50656709!
importAddress
	
	self assertCustomerWasImported.
	newCustomer addAddress: (AddressRecord of: record) parse.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:30:47' prior: 50656819!
importAddress
	newSupplier addAddress: (AddressRecord of: record) parse.
	addressImporter importToParty: newSupplier from: record! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:30:49' prior: 50660888!
importAddress
	newSupplier addAddress: (AddressRecord of: record) parse.! !

!methodRemoval: AddressRecord #importToParty:from: stamp: 'LR 11/24/2023 12:30:55'!
importToParty: aParty from: aRecord

	| newAddress |

	self assertValidAddressRecord: aRecord.
	newAddress := Address new.
	aParty addAddress: newAddress.
	newAddress streetName: aRecord second.
	newAddress streetNumber: aRecord third asNumber .
	newAddress town: aRecord fourth.
	newAddress zipCode: aRecord fifth asNumber .
	newAddress province: aRecord sixth!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:30:59'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:30:59'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:30:59'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:30:59'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:30:59'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:31:08'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:31:08'!
ERROR!
!CsvRecord methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:31:56'!
initializeWith: aRecord 
	record := aRecord.! !
!CustomerRecord class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:31:56' prior: 50660537 overrides: 50660771!
of: aRecord 
	^self new initializeWith: aRecord ! !

!methodRemoval: CsvRecord #initializeWithRecord: stamp: 'LR 11/24/2023 12:31:56'!
initializeWithRecord: aRecord 
	record := aRecord.!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:00'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:00'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:32:00'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:03'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:03'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:51'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:51'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:32:51'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:55'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:32:55'!
ERROR!

(AddressRecord of: record) parse!
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:34:24' prior: 50660869 overrides: 50660767!
parse

	| newAddress |
	self assertValidAddressRecord.
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth
	^newAddress.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:27'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:27'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:34:27'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:34'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:34'!
ERROR!
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:34:41' prior: 50661065 overrides: 50660767!
parse

	| newAddress |
	self assertValidAddressRecord.
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth.
	^newAddress.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:42'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:34:44'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:34:44'!
PASSED!
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:36:07' prior: 50661123 overrides: 50660767!
parse

	
	self assertValidAddressRecord.
	^Address 
		withStreetName: record second
		streetNumber: record third asNumber
		town: record fourth
		zipCode: record fifth asNumber
		province: record sixth.! !
!AddressRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:36:13' prior: 50661146 overrides: 50660767!
parse
	
	self assertValidAddressRecord.
	^Address 
		withStreetName: record second
		streetNumber: record third asNumber
		town: record fourth
		zipCode: record fifth asNumber
		province: record sixth.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:36:16'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:36:16'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:36:16'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:36:18'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:36:18'!
ERROR!
!Address class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:36:23'!
withStreetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithStreetName: aRenameMe1 streetNumber: aRenameMe2 town: aRenameMe3 zipCode: aRenameMe4 province: aRenameMe5 ! !
!Address class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:36:46' prior: 50661210!
withStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: aRenameMe5 
	^self new initializeWithStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: aRenameMe5 ! !
!Address class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:36:50' prior: 50661224!
withStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: proince 
	^self new initializeWithStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: proince ! !
!Address class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:36:57' prior: 50661235!
withStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: province 
	^self new initializeWithStreetName: streetName streetNumber: streetNumber town: town zipCode: zipCode province: province ! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:37:02'!
ERROR!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:37:20'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province streetName_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:37:20'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province streetName_CHANGE_ME streetNumber_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:37:20'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province streetName_CHANGE_ME streetNumber_CHANGE_ME town_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:37:20'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province streetName_CHANGE_ME streetNumber_CHANGE_ME town_CHANGE_ME zipCode_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:37:21'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province streetName_CHANGE_ME streetNumber_CHANGE_ME town_CHANGE_ME zipCode_CHANGE_ME province_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'nil' stamp: 'LR 11/24/2023 12:39:14'!
initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	streetName = aStreetName.
	streetNumber = aStreetNumber.
	town = aTown.
	zipCode = aZipCode.
	province = aProvince.! !

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:39:20'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:40:38'!
hasStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	^streetName = aStreetName and: [
		streetNumber = aStreetNumber and: [
			town = aTown and: [
				zipCode = aZipCode and: [
					province = aProvince
				]
			]
		]
	]! !

!methodRemoval: Address #province stamp: 'LR 11/24/2023 12:40:44'!
province

	^province!

!methodRemoval: Address #province: stamp: 'LR 11/24/2023 12:40:44'!
province: aProvince

	province := aProvince
	!

!methodRemoval: Address #isAt: stamp: 'LR 11/24/2023 12:40:47'!
isAt: aStreetName

	^streetName = aStreetName !

!methodRemoval: Address #streetName stamp: 'LR 11/24/2023 12:40:47'!
streetName

	^streetName !

!methodRemoval: Address #streetName: stamp: 'LR 11/24/2023 12:40:47'!
streetName: aStreetName

	streetName := aStreetName !

!methodRemoval: Address #streetNumber stamp: 'LR 11/24/2023 12:40:47'!
streetNumber

	^streetNumber !

!methodRemoval: Address #streetNumber: stamp: 'LR 11/24/2023 12:40:47'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber !

!methodRemoval: Address #town stamp: 'LR 11/24/2023 12:40:49'!
town

	^town!

!methodRemoval: Address #town: stamp: 'LR 11/24/2023 12:40:49'!
town: aTown

	town := aTown!

!methodRemoval: Address #zipCode stamp: 'LR 11/24/2023 12:40:51'!
zipCode

	^zipCode!

!methodRemoval: Address #zipCode: stamp: 'LR 11/24/2023 12:40:51'!
zipCode: aZipCode

	zipCode := aZipCode!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:40:57'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:40:57'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:40:57'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:41:09'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:41:09'!
ERROR!
!Address methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:41:36'!
isAt: aStreetName 
	self shouldBeImplemented.! !
!Address methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:41:46' prior: 50661425!
isAt: aStreetName 
	streetName = aStreetName! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:41:47'!
ERROR!
!Address methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:42:00' prior: 50661430!
isAt: aStreetName 
	^streetName = aStreetName! !
!Address methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:42:12' prior: 50661334!
hasStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	^(self isAt: aStreetName) and: [
		streetNumber = aStreetNumber and: [
			town = aTown and: [
				zipCode = aZipCode and: [
					province = aProvince
				]
			]
		]
	]! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:42:20'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:42:20'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:42:20'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:42:22'!
FAILURE!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:42:22'!
FAILURE!

aStreetName!

addresses!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:43:29'!
FAILURE!

streetName!

Address 
		withStreetName: record second
		streetNumber: record third asNumber
		town: record fourth
		zipCode: record fifth asNumber
		province: record sixth!

aStreetName!
!Address methodsFor: 'initialization' stamp: 'LR 11/24/2023 12:46:30' prior: 50661310!
initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTown.
	zipCode := aZipCode.
	province := aProvince.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:46:33'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:46:33'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:46:33'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:46:38'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:46:38'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 12:47:21' prior: 50656318!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: (importedAddress hasStreetName: aStreetName streetNumber: aNumber town: aTown zipCode: aZipCode province: aProvince).
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 12:47:34' prior: 50661564!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: (importedAddress hasStreetName: aStreetName streetNumber: aNumber town: aTown zipCode: aZipCode province: aProvince).

	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:47:37'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:47:39'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:47:39'!
PASSED!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:49:30'!
parseSupplier

	| id |
	id := PartyId ofType: record third numbered: record fourth.
	newSupplier := Supplier withName: record second identification: id! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:49:30' prior: 50658960!
importSupplier

	self parseSupplier.
	system addSupplier: newSupplier! !

CsvRecord subclass: #SupplierRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierRecord category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:49:56'!
CsvRecord subclass: #SupplierRecord
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:50:22' overrides: 50660767!
parse

	^self subclassResponsibility ! !
!CsvRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:50:22' prior: 50660767!
parse

	self subclassResponsibility! !
!SupplierRecord methodsFor: 'evaluating' stamp: 'LR 11/24/2023 12:50:52' prior: 50661668 overrides: 50661672!
parse

	| id |
	id := PartyId ofType: record third numbered: record fourth.
	^Supplier withName: record second identification: id! !

!methodRemoval: SupplierImporter #parseSupplier stamp: 'LR 11/24/2023 12:50:59'!
parseSupplier

	| id |
	id := PartyId ofType: record third numbered: record fourth.
	newSupplier := Supplier withName: record second identification: id!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:51:15' prior: 50661650!
importSupplier

	newSupplier := (SupplierRecord of: record) parse.
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:52:32'!
isNewCustomerRecord

	^ record first = 'NC'! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:52:32' prior: 50657644 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	self isAddressRecord ifTrue: [^self importAddress.].
	self isNewCustomerRecord ifTrue: [^self importCustomer].
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:52:54'!
PASSED!

self makeCurrent!

self makeCurrent!

self makeCurrent!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 12:53:08'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 12:53:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 12:53:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 12:53:08'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 12:53:09'!
PASSED!

self makeCurrent!

self makeCurrent!

!classRenamed: #CustomerSystem as: #ErpSystem stamp: 'LR 11/24/2023 12:54:38'!
Smalltalk renameClassNamed: #CustomerSystem as: #ErpSystem!

!classRenamed: #PersistentCustomerSystem as: #PersistentErpSystem stamp: 'LR 11/24/2023 12:54:45'!
Smalltalk renameClassNamed: #PersistentCustomerSystem as: #PersistentErpSystem!
!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:54:45' prior: 50651330 overrides: 50651228!
createCustomerSystem

	^PersistentErpSystem new! !

!classRenamed: #TransientCustomerSystem as: #TransientErpSystem stamp: 'LR 11/24/2023 12:54:55'!
Smalltalk renameClassNamed: #TransientCustomerSystem as: #TransientErpSystem!
!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:54:55' prior: 50651292 overrides: 50651228!
createCustomerSystem

	^TransientErpSystem new! !

CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LR 11/24/2023 12:57:55'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:58:18' prior: 50656776!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:58:41' overrides: 50655401!
initializeFrom: aReadStream into: aCustomerSystem 

	self initializeFrom: aReadStream into: aCustomerSystem.! !
!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:58:41' prior: 50656908!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:58:41' prior: 50656917!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !

!methodRemoval: CustomerImporter #initializeFrom:into:withAddressImporter: stamp: 'LR 11/24/2023 12:58:41'!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 12:59:16'!
from: aReadStream into: aCustomerSystem   

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:16' prior: 50660130!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem ) value! !
!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:16' prior: 50660139!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem ) value! !

!methodRemoval: CustomerImporter class #from:into:addressImporter: stamp: 'LR 11/24/2023 12:59:16'!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem !
!CustomerImporter class methodsFor: 'importing' stamp: 'LR 11/24/2023 12:59:26'!
valueFrom: aReadStream into: aCustomerSystem  

	^(self from: aReadStream into: aCustomerSystem ) value! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:26' prior: 50660176!
test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: system . ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:26' prior: 50660224!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:26' prior: 50660148!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system ..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:26' prior: 50660189!
test01SingleSupplierIsImportedCorrectly

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 12:59:26' prior: 50660160!
test02FailsWithEmptyLine

	| stream |
	stream := ReadStream on: '
	'.
	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
		 raise: Error - MessageNotUnderstood
		 withExceptionDo: [:error | 
			self assert: error messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertNoSupplierWasImported.
		]! !

!methodRemoval: CustomerImporter class #valueFrom:into:withAddressImporter: stamp: 'LR 11/24/2023 12:59:26'!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem ) value!
!SupplierImporter class methodsFor: 'importing' stamp: 'LR 11/24/2023 12:59:51'!
valueFrom: aReadStream into: aCustomerSystem  

	^(self from: aReadStream into: aCustomerSystem ) value! !

!methodRemoval: SupplierImporter class #valueFrom:into:withAddressImporter: stamp: 'LR 11/24/2023 12:59:51'!
valueFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter 

	^(self from: aReadStream into: aCustomerSystem ) value!

CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'LR 11/24/2023 13:00:02'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:00:06' prior: 50656804!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:00:10' overrides: 50655401!
initializeFrom: aReadStream into: aCustomerSystem 

	self initializeFrom: aReadStream into: aCustomerSystem.! !

!methodRemoval: SupplierImporter #initializeFrom:into:withAddressImporter: stamp: 'LR 11/24/2023 13:00:10'!
initializeFrom: aReadStream into: aCustomerSystem withAddressImporter: anAddressImporter

	self initializeFrom: aReadStream into: aCustomerSystem.!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:00:13'!
ERROR!
!CustomerImporter methodsFor: 'initialization' stamp: 'LR 11/24/2023 13:01:03' prior: 50661836 overrides: 50655401!
initializeFrom: aReadStream into: aCustomerSystem 

	readStream := aReadStream.
	system := aCustomerSystem! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:01:10'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:01:10'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:01:10'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:01:12'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:01:12'!
ERROR!
!SupplierImporter class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 13:01:29'!
from: aReadStream into: aCustomerSystem   

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !

!methodRemoval: SupplierImporter class #from:into:addressImporter: stamp: 'LR 11/24/2023 13:01:29'!
from: aReadStream into: aCustomerSystem addressImporter: anAddressImporter  

	^self new initializeFrom: aReadStream into: aCustomerSystem !

!methodRemoval: SupplierImporter #initializeFrom:into: stamp: 'LR 11/24/2023 13:01:48'!
initializeFrom: aReadStream into: aCustomerSystem 

	self initializeFrom: aReadStream into: aCustomerSystem.!
!CSVImporter methodsFor: 'initialization' stamp: 'LR 11/24/2023 13:01:55' prior: 50655401!
initializeFrom: aReadStream into: aCustomerSystem 

	readStream := aReadStream.
	system := aCustomerSystem! !

!methodRemoval: CustomerImporter #initializeFrom:into: stamp: 'LR 11/24/2023 13:01:55'!
initializeFrom: aReadStream into: aCustomerSystem 

	readStream := aReadStream.
	system := aCustomerSystem!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:02:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:02:01'!
PASSED!
!CSVImporter class methodsFor: 'instance creation' stamp: 'LR 11/24/2023 13:02:21'!
from: aReadStream into: aCustomerSystem   

	^self new initializeFrom: aReadStream into: aCustomerSystem ! !

!methodRemoval: CustomerImporter class #from:into: stamp: 'LR 11/24/2023 13:02:21'!
from: aReadStream into: aCustomerSystem   

	^self new initializeFrom: aReadStream into: aCustomerSystem !

!methodRemoval: SupplierImporter class #from:into: stamp: 'LR 11/24/2023 13:02:21'!
from: aReadStream into: aCustomerSystem   

	^self new initializeFrom: aReadStream into: aCustomerSystem !
!CSVImporter class methodsFor: 'importing' stamp: 'LR 11/24/2023 13:02:26'!
valueFrom: aReadStream into: aCustomerSystem  

	^(self from: aReadStream into: aCustomerSystem ) value! !

!methodRemoval: CustomerImporter class #valueFrom:into: stamp: 'LR 11/24/2023 13:02:26'!
valueFrom: aReadStream into: aCustomerSystem  

	^(self from: aReadStream into: aCustomerSystem ) value!

!methodRemoval: SupplierImporter class #valueFrom:into: stamp: 'LR 11/24/2023 13:02:26'!
valueFrom: aReadStream into: aCustomerSystem  

	^(self from: aReadStream into: aCustomerSystem ) value!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:05:06' prior: 50660896!
importAddress

	newSupplier addAddress: (AddressRecord of: record) parse.! !
!CsvRecord class methodsFor: 'nil' stamp: 'LR 11/24/2023 13:07:07'!
parse: record
	^(self of: record) parse! !
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:08:05' prior: 50660813!
importCustomer
	newCustomer := CustomerRecord parse: record.
	system addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:08:21' prior: 50660881!
importAddress
	
	self assertCustomerWasImported.
	newCustomer addAddress: (AddressRecord parse: record).! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:21' prior: 50662212!
importAddress

	newSupplier addAddress: (AddressRecord parse: record).! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:31' prior: 50660820!
importCustomer
	
	system addCustomer: (CustomerRecord parse: record)! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:48' prior: 50661692!
importSupplier

	newSupplier := (SupplierRecord parse: record).
	system addSupplier: newSupplier! !

!classRenamed: #CsvRecord as: #CsvRecordParser stamp: 'LR 11/24/2023 13:09:55'!
Smalltalk renameClassNamed: #CsvRecord as: #CsvRecordParser!

!classRenamed: #AddressRecord as: #AddressRecordParser stamp: 'LR 11/24/2023 13:09:58'!
Smalltalk renameClassNamed: #AddressRecord as: #AddressRecordParser!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:58' prior: 50660724!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: AddressRecordParser invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:58' prior: 50660747 overrides: 16961394!
setUp

	system := Environment current createCustomerSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressRecordParser new.
	pepeSanchezId := PartyId ofType: 'D' numbered: '22333444'.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:58' prior: 50660735!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: AddressRecordParser invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:58' prior: 50662235!
importAddress

	newSupplier addAddress: (AddressRecordParser parse: record).! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:09:58' prior: 50662228!
importAddress
	
	self assertCustomerWasImported.
	newCustomer addAddress: (AddressRecordParser parse: record).! !

!classRenamed: #CustomerRecord as: #CustomerRecordParser stamp: 'LR 11/24/2023 13:10:06'!
Smalltalk renameClassNamed: #CustomerRecord as: #CustomerRecordParser!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:10:06' prior: 50660708!
test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerRecordParser invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:10:06' prior: 50662241!
importCustomer
	
	system addCustomer: (CustomerRecordParser parse: record)! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:10:06' prior: 50662222!
importCustomer
	newCustomer := CustomerRecordParser parse: record.
	system addCustomer: newCustomer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:10:06' prior: 50660697!
test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerRecordParser invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !

!classRenamed: #SupplierRecord as: #SupplierRecordParser stamp: 'LR 11/24/2023 13:10:13'!
Smalltalk renameClassNamed: #SupplierRecord as: #SupplierRecordParser!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:10:13' prior: 50662247!
importSupplier

	newSupplier := (SupplierRecordParser parse: record).
	system addSupplier: newSupplier! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:13:30'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:13:30'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:18:56' prior: 50662333!
importCustomer

	newCustomer := CustomerRecordParser parse: record.
	system addCustomer: newCustomer! !

!methodRemoval: SupplierImporter #assertValidCustomerRecord stamp: 'LR 11/24/2023 13:26:18'!
assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]!
!Environment methodsFor: 'customer system' stamp: 'LR 11/24/2023 13:28:23'!
createErpSystem

	self subclassResponsibility ! !
!DevelopmentEnvironment methodsFor: 'erp system' stamp: 'LR 11/24/2023 13:28:23' overrides: 50662415!
createErpSystem

	^TransientErpSystem new! !
!IntegrationEnvironment methodsFor: 'erp system' stamp: 'LR 11/24/2023 13:28:23' overrides: 50662415!
createErpSystem

	^PersistentErpSystem new! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 13:28:23' prior: 50662275 overrides: 16961394!
setUp

	system := Environment current createErpSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressRecordParser new.
	pepeSanchezId := PartyId ofType: 'D' numbered: '22333444'.
! !

!methodRemoval: Environment #createCustomerSystem stamp: 'LR 11/24/2023 13:28:23'!
createCustomerSystem

	self subclassResponsibility !

!methodRemoval: DevelopmentEnvironment #createCustomerSystem stamp: 'LR 11/24/2023 13:28:23'!
createCustomerSystem

	^TransientErpSystem new!

!methodRemoval: IntegrationEnvironment #createCustomerSystem stamp: 'LR 11/24/2023 13:28:23'!
createCustomerSystem

	^PersistentErpSystem new!

!methodRemoval: CustomerRecordParser class #of: stamp: 'LR 11/24/2023 13:33:18'!
of: aRecord 
	^self new initializeWith: aRecord !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:33:30'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:33:30'!
PASSED!
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:36:15' prior: 50662303!
importAddress
	
	| parsedAddress |
	self assertCustomerWasImported.
	parsedAddress := AddressRecordParser parse: record.
	newCustomer addAddress: (parsedAddress).! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:36:35' prior: 50662496!
importAddress
	
	| parsedAddress |
	self assertCustomerWasImported.
	parsedAddress := AddressRecordParser parse: record.
	newCustomer addAddress: parsedAddress.! !
!SupplierImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:36:58' prior: 50662297!
importAddress

	| parsedAddress |
	parsedAddress := AddressRecordParser parse: record.
	newSupplier addAddress: (parsedAddress).! !
!SupplierImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:37:03' prior: 50662512!
importAddress

	| parsedAddress |
	parsedAddress := AddressRecordParser parse: record.
	newSupplier addAddress: parsedAddress.! !
!SupplierImporter methodsFor: 'supplier' stamp: 'LR 11/24/2023 13:37:12' prior: 50662357!
importSupplier

	newSupplier := SupplierRecordParser parse: record.
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:37:21' prior: 50662327!
importCustomer
	
	| parsedCustomer |
	parsedCustomer := CustomerRecordParser parse: record.
	system addCustomer: (parsedCustomer)! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:37:23' prior: 50662533!
importCustomer
	
	| parsedCustomer |
	parsedCustomer := CustomerRecordParser parse: record.
	system addCustomer: parsedCustomer! !

!classRenamed: #CsvRecordParser as: #CSVRecordParser stamp: 'LR 11/24/2023 13:37:45'!
Smalltalk renameClassNamed: #CsvRecordParser as: #CSVRecordParser!
!CSVImporter methodsFor: 'nil' stamp: 'LR 11/24/2023 13:38:22'!
parseRecordWith: csvRecordParser
	^csvRecordParser parse: record.! !
!CustomerImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:38:45' prior: 50662504!
importAddress
	
	| parsedAddress |
	self assertCustomerWasImported.
	parsedAddress := self parseRecordWith: AddressRecordParser.
	newCustomer addAddress: parsedAddress.! !
!SupplierImporter methodsFor: 'address' stamp: 'LR 11/24/2023 13:39:01' prior: 50662519!
importAddress

	| parsedAddress |
	parsedAddress := self parseRecordWith: AddressRecordParser.
	newSupplier addAddress: parsedAddress.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:39:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:39:05'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:39:22' prior: 50662402!
importCustomer

	newCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: newCustomer! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 13:39:46' prior: 50662540!
importCustomer
	
	| parsedCustomer |
	parsedCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: parsedCustomer! !
!SupplierImporter methodsFor: 'supplier' stamp: 'LR 11/24/2023 13:40:01' prior: 50662526!
importSupplier

	newSupplier := self parseRecordWith: SupplierRecordParser .
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'supplier' stamp: 'LR 11/24/2023 13:40:02' prior: 50662626!
importSupplier

	newSupplier := self parseRecordWith: SupplierRecordParser.
	system addSupplier: newSupplier! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 13:40:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 13:40:05'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 14:57:21'!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: ImportTest #test01SingleSupplierIsImportedCorrectly stamp: 'LR 11/24/2023 14:57:24'!
test01SingleSupplierIsImportedCorrectly

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 14:57:46'!
test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

TestCase subclass: #ImportTest
	instanceVariableNames: 'system pepeSanchezId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'LR 11/24/2023 14:59:11'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system pepeSanchezId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'LR 11/24/2023 14:59:14'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'LR 11/24/2023 14:59:29'!
pepeSanchezId

	^ PartyId ofType: 'D' numbered: '22333444'! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'LR 11/24/2023 14:59:29' prior: 50662431 overrides: 16961394!
setUp

	system := Environment current createErpSystem.
	system start.
	system beginTransaction.
	addressImporter := AddressRecordParser new.
	pepeSanchezId := self pepeSanchezId.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'LR 11/24/2023 14:59:33' prior: 50662808 overrides: 16961394!
setUp

	system := Environment current createErpSystem.
	system start.
	system beginTransaction.
! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 14:59:34'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 14:59:34'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 14:59:34'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 14:59:34'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 14:59:34'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 14:59:34'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 14:59:34'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 14:59:54' prior: 50662677!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:00:35' prior: 50662744!
test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - customer' stamp: 'LR 11/24/2023 15:00:42' prior: 50661930!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:00:49'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:00:49'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:00:49'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:00:49'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:00:49'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:00:49'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:00:49'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:01:03' prior: 50659628!
assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: system numberOfCustomers.
	importedCustomer := system customerWithIdentification: self pepeSanchezId.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:01:11' prior: 50659051!
assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:01:57'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:01:57'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:01:57'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:03:40'!
assertSupplierWithIdentification: anId hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := system customerWithIdentification: anId.

	self assert: (importedCustomer hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId). 

	^importedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:03:47' prior: 50663063!
assertSupplierWithIdentification: anId hasFirstName: aFirstName lastName: aLastName

	| importedSupplier |

	importedSupplier := system customerWithIdentification: anId.

	self assert: (importedSupplier hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId). 

	^importedSupplier

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:04:19'!
assertSupplierWithIdentification: anId hasFirstName: aFirstName

	| importedSupplier |

	importedSupplier := system supplierWithIdentification: anId.

	self assert: (importedSupplier hasFirstName: aFirstName hasIdentification: anId). 

	^importedSupplier

	! !

!methodRemoval: ImportTest #assertSupplierWithIdentification:hasFirstName:lastName: stamp: 'LR 11/24/2023 15:04:22'!
assertSupplierWithIdentification: anId hasFirstName: aFirstName lastName: aLastName

	| importedSupplier |

	importedSupplier := system customerWithIdentification: anId.

	self assert: (importedSupplier hasFirstName: aFirstName hasLastName: aLastName hasIdentification: anId). 

	^importedSupplier

	!

!methodRemoval: ImportTest #test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:04:51'!
test01SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: (importedSupplier isIdentifiedWith: supplierId withName: 'Supplier1').
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:05:39' prior: 50662867!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier associatedCustomer supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:08:51' prior: 50663148!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier customers size equals: 1.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:09:40'!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	associatedCustomer := importedSupplier customers anyOne.
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:12:17' prior: 50663210!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	self deny: importedSupplier customers isEmpty.
	associatedCustomer := importedSupplier customers detect: [:customer | 
		customer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId
	].
	^associatedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:14:06' prior: 50663223!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	self deny: importedSupplier customers isEmpty.
	associatedCustomer := importedSupplier customers detect: [:customer | 
		customer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId
	] ifNone: [
		self fail
	].
	^associatedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:14:33' prior: 50663238!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	self deny: importedSupplier customers isEmpty.
	associatedCustomer := importedSupplier customers detect: [:customer | 
		customer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId
	] ifNone: [
		self failWith: 'Associated customer not found'
	].
	^associatedCustomer

	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:14:55'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:14:55'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:14:55'!
ERROR!
!Supplier methodsFor: 'testing' stamp: 'LR 11/24/2023 15:15:16'!
hasFirstName: aFirstName hasIdentification: anId 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:15:52' prior: 50663088!
assertSupplierWithIdentification: anId hasFirstName: aFirstName

	| importedSupplier |

	importedSupplier := system supplierWithIdentification: anId.

	self assert: (importedSupplier isIdentifiedWith: anId withName: aFirstName). 

	^importedSupplier

	! !

!methodRemoval: Supplier #hasFirstName:hasIdentification: stamp: 'LR 11/24/2023 15:15:58'!
hasFirstName: aFirstName hasIdentification: anId 
	self shouldBeImplemented.!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:16:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:16:00'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:17:03' prior: 50663181!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customers size equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:17:04'!
PASSED!
!Supplier methodsFor: 'nil' stamp: 'LR 11/24/2023 15:20:27'!
findCustomerWithId: aCustomerId ifNone: aFallbackAction

	^self customers detect: [ :customer |
		customer isIdentifiedWith: aCustomerId
	] ifNone: aFallbackAction
	! !

!methodRemoval: Supplier #findCustomerWithId:ifNone: stamp: 'LR 11/24/2023 15:21:32'!
findCustomerWithId: aCustomerId ifNone: aFallbackAction

	^self customers detect: [ :customer |
		customer isIdentifiedWith: aCustomerId
	] ifNone: aFallbackAction
	!
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 15:25:20'!
findCustomerWithId: anId ifNone: aFallbackAction
	^Customer withFirstName: 'Pepe' lastName: 'Sanchez' identification: (PartyId ofType: 'D' numbered: '22333444')! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 15:25:47'!
customersCount
	^1! !

!methodRemoval: Supplier #customers stamp: 'LR 11/24/2023 15:25:52'!
customers
	^Set with: (Customer
		withFirstName: 'Pepe'
		lastName: 'Sanchez'
		identification: (PartyId ofType: 'D' numbered: '22333444')
	)!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:25:59' prior: 50663254!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	associatedCustomer := importedSupplier customers detect: [:customer | 
		customer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId
	] ifNone: [
		self failWith: 'Associated customer not found'
	].
	^associatedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:27:16' prior: 50663442!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	associatedCustomer := importedSupplier findCustomerWithId: self pepeSanchezId ifNone: [
		self failWith: 'Associated customer not found'
	].
	self assert: (associatedCustomer hasFirstName: 'Pepe' hasLastName: 'Sanchez' hasIdentification: self pepeSanchezId ).
	^associatedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:27:32' prior: 50663457!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	associatedCustomer := importedSupplier findCustomerWithId: self pepeSanchezId ifNone: [
		self failWith: 'Associated customer not found'
	].
	self assert: (associatedCustomer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId ).
	^associatedCustomer

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:27:41' prior: 50663374!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customersCount equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:27:45'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:27:45'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:28:30'!
test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customersCount equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:30:28' prior: 50650626!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,', self pepeSanchezId type, ',', self pepeSanchezId number,
'A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:30:29'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:30:29'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:30:29'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:30:43' prior: 50663588!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,', self pepeSanchezId type, ',', self pepeSanchezId number,
'
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:30:44'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:30:45'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:30:45'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:30:45'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:31:35' prior: 50663644!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,', self pepeSanchezId type, ',', self pepeSanchezId number, String newLineString,
'A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:31:53'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:31:53'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:32:41' prior: 50663697!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,', self pepeSanchezId type, ',', self pepeSanchezId number, String newLineString,
'A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,', self juanPerezId type, ',', self juanPerezId number, String newLineString,
'A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:34:11' prior: 50663751!
validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:34:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:34:16'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 15:34:40'!
juanPerezId
	^PartyId ofType: 'C' numbered: '23-25666777-9'! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:36:01' prior: 50659565!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |
	importedCustomer := self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:36:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:36:14'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:36:14'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:36:14'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:36:14'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:36:14'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:36:26'!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customersCount equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: ImportTest #test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:36:26'!
test02SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customersCount equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:36:46' prior: 50663874!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier customersCount equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 15:37:06'!
numberOfCustomers
	^1! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:37:06' prior: 50663935!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:37:06' prior: 50663490!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: Supplier #customersCount stamp: 'LR 11/24/2023 15:37:06'!
customersCount
	^1!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:39:28' prior: 50663969!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:39:29'!
FAILURE!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:39:29'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 15:40:44' prior: 50662618!
importCustomer
	
	| parsedCustomer |
	parsedCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: parsedCustomer.
	newSupplier addCustomer: parsedCustomer.! !

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'LR 11/24/2023 15:41:16'!
Party subclass: #Supplier
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'updating' stamp: 'LR 11/24/2023 15:41:12'!
addCustomer: customer
	customers add: customer! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 15:41:25' prior: 50663965!
numberOfCustomers
	^customers size! !
!Supplier methodsFor: 'evaluating' stamp: 'LR 11/24/2023 15:41:56' prior: 50663423!
findCustomerWithId: anId ifNone: aFallbackAction
	^customers detect: [ :customer |
		customer isIdentifiedWith: anId
	] ifNone: aFallbackAction! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:42:03'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:42:03'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:42:03'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:42:13'!
ERROR!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:42:13'!
ERROR!
!Supplier methodsFor: 'initialization' stamp: 'LR 11/24/2023 15:42:26' prior: 50658739!
initializeWithName: aName identification: aPartyId
	firstName := aName.
	identification := aPartyId.
	customers := Set new.! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:42:53'!
FAILURE!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:42:53'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:42:53'!
FAILURE!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:43:36'!
FAILURE!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:43:36'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:43:36'!
FAILURE!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:45:08' prior: 50663473!
assert: importedSupplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId

	| associatedCustomer |
	associatedCustomer := importedSupplier findCustomerWithId: customerId ifNone: [
		self failWith: 'Associated customer not found'
	].
	self assert: (associatedCustomer hasFirstName: customerName hasLastName: customerLastName hasIdentification: customerId ).
	^associatedCustomer

	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:45:11'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:45:11'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:45:34' prior: 50664033!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:45:36'!
FAILURE!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:45:36'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:45:36'!
FAILURE!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:45:43' prior: 50664319!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: importedSupplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:47:28'!
assertCorrectlyImportedCustomerOf: supplier

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:47:28' prior: 50664402!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:47:29' prior: 50664000!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:49:27'!
assertCorrectlyImportedCustomerOf: supplier withId: customerId 

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:49:27' prior: 50664445!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:49:27' prior: 50664473!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: ImportTest #assertCorrectlyImportedCustomerOf: stamp: 'LR 11/24/2023 15:49:27'!
assertCorrectlyImportedCustomerOf: supplier

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:50:22'!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: name  

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:22' prior: 50664539!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:22' prior: 50664510!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	
	
	! !

!methodRemoval: ImportTest #assertCorrectlyImportedCustomerOf:withId: stamp: 'LR 11/24/2023 15:50:22'!
assertCorrectlyImportedCustomerOf: supplier withId: customerId 

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: 'Pepe' lastName: 'Sanchez' andId: self pepeSanchezId!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:22' prior: 50664575!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: name  

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: name lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: name lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:50:25' prior: 50664655!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName  

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: customerName lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: customerName lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:50:47'!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName lastName: customerLastName   

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: customerName lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: customerName lastName: 'Sanchez' andId: self pepeSanchezId! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:47' prior: 50664614!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez' .
	self assertCustomerWithIdentification: self juanPerezId hasFirstName: 'Juan' lastName: 'Perez'.
	self assert: importedSupplier hasCustomerWithName: 'Juan' lastName: 'Perez' andId: self juanPerezId .
	
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:47' prior: 50664587!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez' .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!methodRemoval: ImportTest #assertCorrectlyImportedCustomerOf:withId:name: stamp: 'LR 11/24/2023 15:50:47'!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName  

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: customerName lastName: 'Sanchez'.
	self assert: supplier hasCustomerWithName: customerName lastName: 'Sanchez' andId: self pepeSanchezId!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 15:50:47' prior: 50664679!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName lastName: customerLastName   

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: customerName lastName: customerLastName.
	self assert: supplier hasCustomerWithName: customerName lastName: customerLastName andId: self pepeSanchezId! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:50:53' prior: 50664763!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName lastName: customerLastName   

	self assertCustomerWithIdentification: self pepeSanchezId hasFirstName: customerName lastName: customerLastName.
	self assert: supplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 15:50:57' prior: 50664777!
assertCorrectlyImportedCustomerOf: supplier withId: customerId name: customerName lastName: customerLastName   

	self assertCustomerWithIdentification: customerId hasFirstName: customerName lastName: customerLastName.
	self assert: supplier hasCustomerWithName: customerName lastName: customerLastName andId: customerId! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:51:43' prior: 50664693!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:51:46'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:53:06'!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:53:22' prior: 50664804!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	self assert: system numberOfCustomers equals: 2.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:53:39'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:53:40'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:53:45' prior: 50664723!
test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
NC,Pepe,Sanchez,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez' .
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'
	
	
	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 15:53:46'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 15:53:46'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:54:37' prior: 50664835!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	system addCustomer: self jamesBond.
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 15:54:49' prior: 50665012!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self jamesBond.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:01:01' prior: 50665041!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:02:04' prior: 50664862!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	self assert: system numberOfSuppliers equals: 1.
	self assert: system numberOfCustomers equals: 2.
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:02:23' prior: 50665093!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:02:39' prior: 50665069!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:03:56'!
ERROR!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:03:56'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 16:04:02'!
pepeSanchez
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 16:04:24' prior: 50665177!
pepeSanchez
	^Customer withFirstName: 'Pepe' lastName: 'Sanchez' identification: self pepeSanchezId ! !

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:04:26'!
FAILURE!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:04:36'!
FAILURE!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:04:36'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'LR 11/24/2023 16:06:14' prior: 50661704 overrides: 50655457!
importRecord

	self assertRecordNotEmpty.
	
	self isSupplierRecord ifTrue: [^self importSupplier].
	self isAddressRecord ifTrue: [^self importAddress.].
	self isNewCustomerRecord ifTrue: [^self importCustomer].
	self isExistingCustomerRecord ifTrue: [^self importExistingCustomer].	! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 16:06:44'!
isExistingCustomerRecord

	^ record first = 'EC'! !

!classDefinition: #ExistingCustomerRecordParser category: 'CustomerImporter' stamp: 'LR 11/24/2023 16:07:31'!
CSVRecordParser subclass: #ExistingCustomerRecordParser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 16:07:17'!
importExistingCustomer
	
	| parsedCustomer |
	parsedCustomer := self parseRecordWith: ExistingCustomerRecordParser.
	newSupplier addCustomer: parsedCustomer.! !
!ExistingCustomerRecordParser methodsFor: 'parse' stamp: 'LR 11/24/2023 16:08:11' overrides: 50661672!
parse

	self subclassResponsibility! !
!CSVRecordParser methodsFor: 'parse' stamp: 'LR 11/24/2023 16:08:11' prior: 50661672!
parse

	self subclassResponsibility! !
!ExistingCustomerRecordParser methodsFor: 'parse' stamp: 'LR 11/24/2023 16:09:16' prior: 50665235 overrides: 50665239!
parse

	^Customer withFirstName: 'Pepe' lastName: 'Sanchez' identification: (PartyId ofType: 'D' numbered: '22333444')! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:09:19'!
PASSED!

!classRenamed: #ExistingCustomerRecordParser as: #PartyIdRecordParser stamp: 'LR 11/24/2023 16:10:34'!
Smalltalk renameClassNamed: #ExistingCustomerRecordParser as: #PartyIdRecordParser!
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'LR 11/24/2023 16:10:34' prior: 50665226!
importExistingCustomer
	
	| parsedCustomer |
	parsedCustomer := self parseRecordWith: PartyIdRecordParser.
	newSupplier addCustomer: parsedCustomer.! !
!PartyIdRecordParser methodsFor: 'parse' stamp: 'LR 11/24/2023 16:10:54' prior: 50665244 overrides: 50665239!
parse

	^PartyId ofType: 'D' numbered: '22333444'! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 16:11:30' prior: 50665304!
importExistingCustomer
	
	| parsedId |
	parsedId := self parseRecordWith: PartyIdRecordParser.
	newSupplier addCustomer: parsedId.! !
!SupplierImporter methodsFor: 'customer' stamp: 'LR 11/24/2023 16:11:57' prior: 50665318!
importExistingCustomer
	
	| parsedId |
	parsedId := self parseRecordWith: PartyIdRecordParser.
	newSupplier addCustomer: (Customer withFirstName: 'Pepe' lastName: 'Sanchez' identification: parsedId)! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:12:03'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:12:03'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:12:04'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:12:04'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:12:55'!
test04SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:13:05'!
test05SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !

!methodRemoval: ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:13:06'!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:13:08'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:13:15'!
test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	! !

!methodRemoval: ImportTest #test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers stamp: 'LR 11/24/2023 16:13:15'!
test03SingleSupplierIsImportedCorrectlyWithTwoNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
NC,Juan,Perez,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:13:25'!
test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !

!methodRemoval: ImportTest #test04SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:13:25'!
test04SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:13:30'!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !

!methodRemoval: ImportTest #test05SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:13:30'!
test05SingleSupplierIsImportedCorrectlyWithOneExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:13:36'!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	! !

!methodRemoval: ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomer stamp: 'LR 11/24/2023 16:13:37'!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	
	
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:14:33' prior: 50665594!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:14:45' prior: 50665640!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'LR 11/24/2023 16:16:00' prior: 50665666!
test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'test data' stamp: 'LR 11/24/2023 16:16:24'!
juanPerez
	^Customer withFirstName: 'Juan' lastName: 'Perez' identification: self juanPerezId ! !
!PartyIdRecordParser methodsFor: 'parse' stamp: 'LR 11/24/2023 16:18:24' prior: 50665313 overrides: 50665239!
parse

	^PartyId ofType: record second numbered: record third! !

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:18:30'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:18:32'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:18:32'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:18:32'!
FAILURE!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:21:15'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:21:15'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:21:15'!
FAILURE!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 16:22:56' prior: 50650538!
assertNoCustomerWasImported

	^ self assert: system numberOfCustomers equals: 0! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:22:58'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:22:58'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:22:58'!
FAILURE!
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 16:23:09' prior: 50660052!
assertNoSupplierWasImported

	^ self assert: system numberOfSuppliers equals: 0! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 16:23:24' prior: 50650520!
assertImportedRightNumberOfCustomers

	^ self assert: system numberOfCustomers equals: 2! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 16:23:32' prior: 50662990!
assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: system numberOfCustomers equals: 1.
	importedCustomer := system customerWithIdentification: self pepeSanchezId.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'LR 11/24/2023 16:24:04' prior: 50661586!
assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self failWith: 'Address not found' ].
	self assert: (importedAddress hasStreetName: aStreetName streetNumber: aNumber town: aTown zipCode: aZipCode province: aProvince).

	! !

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:24:07'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'LR 11/24/2023 16:24:07'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'LR 11/24/2023 16:24:07'!
FAILURE!

----QUIT----(24 November 2023 16:24:24) CuisUniversity-5981.image priorSource: 10434842!

----STARTUP---- (26 November 2023 17:38:32) as /home/bruno/Downloads/linux64(1)/linux64/CuisUniversity-5981.image!


!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:42:03'!
FAILURE!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:42:03'!
FAILURE!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:51:19'!
FAILURE!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:51:19'!
FAILURE!

importedSupplier!
!TransientErpSystem methodsFor: 'customers' stamp: 'BR 11/26/2023 17:56:50' prior: 50659383 overrides: 50659389!
customerWithIdentification: anId 
	^customers detect: [:customer | customer isIdentifiedWith: anId] ifNone: [].! !

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:57:42'!
FAILURE!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 17:57:42'!
FAILURE!

supplier!

a Customer!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 18:20:48'!
FAILURE!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 18:20:48'!
FAILURE!

parsedId!
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 18:25:04' prior: 50665325!
importExistingCustomer
	
	| parsedId existingCustomer |
	parsedId := self parseRecordWith: PartyIdRecordParser.
	existingCustomer := system customerWithIdentification: parsedId.
	newSupplier addCustomer: (Customer withFirstName: 'Pepe' lastName: 'Sanchez' identification: parsedId)! !
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 18:25:42' prior: 50666046!
importExistingCustomer
	
	| parsedId existingCustomer |
	parsedId := self parseRecordWith: PartyIdRecordParser.
	existingCustomer := system customerWithIdentification: parsedId.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 18:25:48'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:28:59'!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:29:22' prior: 50666072!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:29:38' prior: 50666100!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:30:16' prior: 50666129!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self juanPerezId name: 'Juan' lastName: 'Perez'.
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:34:39' prior: 50666155!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedSupplier at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'
	! !

!testRun: #ImportTest #test06SingleSupplierIsImportedCorrectlyWithAddresses stamp: 'BR 11/26/2023 18:34:41'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:34:51'!
test06SingleSupplierIsImportedCorrectlyWithManyAddresses

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedSupplier at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'
	! !

!methodRemoval: ImportTest #test06SingleSupplierIsImportedCorrectlyWithAddresses stamp: 'BR 11/26/2023 18:34:51'!
test06SingleSupplierIsImportedCorrectlyWithAddresses

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedSupplier at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'
	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:35:47'!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedSupplier at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:36:16' prior: 50666264!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	self assertAddressOf: importedSupplier at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedSupplier at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'
	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:37:08' prior: 50666291!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 2.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:37:48' prior: 50666317!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:38:17' prior: 50666336!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:38:22'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:39:03'!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:39:29'!
test07SingleSupplierDoesNotReimportAlreadyExistingCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!methodRemoval: ImportTest #test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:39:29'!
test07SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,22333444'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:40:04' prior: 50666384!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:42:22' prior: 50666451!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:42:40' prior: 50666473!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,5456774'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:43:30' prior: 50666496!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self pepeSanchez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:43:49' prior: 50666519!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:44:31' prior: 50666543!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:44:34'!
ERROR!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:44:34'!
ERROR!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:45:12'!
ERROR!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:45:12'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:45:32' prior: 50666567!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,D,23256667779'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:45:33'!
ERROR!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:45:33'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:46:23' prior: 50666607!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23256667779'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:46:25'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:46:45' prior: 50666639!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 1.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:46:47'!
FAILURE!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:46:47'!
FAILURE!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:47:01' prior: 50666671!
test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 18:47:03'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:48:11'!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:48:25' prior: 50666730!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:48:40' prior: 50666753!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 18:48:41'!
ERROR!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 18:48:41'!
ERROR!

Set new anyOne!
!PersistentErpSystem methodsFor: 'customers' stamp: 'BR 11/26/2023 18:58:05' prior: 50659781 overrides: 50659389!
customerWithIdentification: anId
	|filtered|
	filtered := (session
		select: [ :aCustomer | aCustomer isIdentifiedWith: anId ]
		ofType: Customer
	).
	filtered isEmpty ifTrue: [^self error: self nonExistentCustomerId]. 
	^filtered anyOne! !
!ErpSystem class methodsFor: 'nil' stamp: 'BR 11/26/2023 18:58:39'!
nonExistentCustomerId
	^'Customer id is not registered in the system'.! !
!PersistentErpSystem methodsFor: 'customers' stamp: 'BR 11/26/2023 18:58:54' prior: 50666801 overrides: 50659389!
customerWithIdentification: anId
	|filtered|
	filtered := (session
		select: [ :aCustomer | aCustomer isIdentifiedWith: anId ]
		ofType: Customer
	).
	filtered isEmpty ifTrue: [^self error: self class nonExistentCustomerId]. 
	^filtered anyOne! !
!TransientErpSystem methodsFor: 'customers' stamp: 'BR 11/26/2023 18:59:16' prior: 50666022 overrides: 50659389!
customerWithIdentification: anId 
	^customers detect: [:customer | customer isIdentifiedWith: anId] ifNone: [^self error: self class nonExistentCustomerId.].! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 18:59:56' prior: 50666774!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	
	ErpSystem nonExistentCustomerId

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:00:00' prior: 50666837!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 0.
	self assert: system numberOfCustomers equals: 0.
	
	ErpSystem nonExistentCustomerId.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:02:10' prior: 50666856!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	importedSupplier := system supplierWithIdentification: supplierId.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:02:18'!
ERROR!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:02:18'!
ERROR!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:03:52' prior: 50666875!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:03:57'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:06:24' prior: 50666906!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream importedSupplier supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assertNoSupplierWasImported.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:29'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:29'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:42'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:42'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:46'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:51'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:51'!
FAILURE!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'BR 11/26/2023 19:06:55'!
PASSED!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:57'!
FAILURE!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:06:57'!
FAILURE!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:08:42' prior: 50666929!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream supplierId |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test01SingleSupplierIsImportedCorrectlyWithOneNewCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test02FailsWithEmptyLine stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test03SingleSupplierIsImportedCorrectlyWithManyNewCustomers stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test04SingleSupplierIsImportedCorrectlyWithOneExistingCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test05SingleSupplierIsImportedCorrectlyWithManyExistingCustomers stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test06SingleSupplierIsImportedCorrectlyWithManyAddresses stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test07SingleSupplierDoesNotReimportAlreadyExistingCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test08SingleSupplierIsImportedCorrectlyWithExistingAndNewCustomers stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'BR 11/26/2023 19:08:54'!
PASSED!

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:08:54'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:10:07' prior: 50666988!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 1.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:10:18' prior: 50667077!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:10:20'!
PASSED!
!SupplierImporter class methodsFor: 'nil' stamp: 'BR 11/26/2023 19:13:20'!
canNotImportCustomerWithoutSupplier

	^'Cannot import customer without Supplier'! !
!SupplierImporter methodsFor: 'address' stamp: 'BR 11/26/2023 19:14:41' prior: 50662565!
importAddress

	| parsedAddress |
	self assertSupplierWasImported.
	parsedAddress := self parseRecordWith: AddressRecordParser.
	newSupplier addAddress: parsedAddress.! !
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 19:14:50' prior: 50664078!
importCustomer
	
	| parsedCustomer |
	self assertCustomerWasImported.
	parsedCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: parsedCustomer.
	newSupplier addCustomer: parsedCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 19:14:58' prior: 50667147!
importCustomer
	
	| parsedCustomer |
	self assertSupplierWasImported.
	parsedCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: parsedCustomer.
	newSupplier addCustomer: parsedCustomer.! !
!SupplierImporter methodsFor: 'supplier' stamp: 'BR 11/26/2023 19:16:46'!
assertSupplierWasImportedWhenAddingAddress

	^ newSupplier ifNil: [ self error: self class canNotImportAddressWithoutSupplierErrorDescription ]! !
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 19:16:59' prior: 50667157!
importCustomer
	
	| parsedCustomer |
	self assertSupplierWasImportedWhenImportingCustomer.
	parsedCustomer := self parseRecordWith: CustomerRecordParser.
	system addCustomer: parsedCustomer.
	newSupplier addCustomer: parsedCustomer.! !
!SupplierImporter methodsFor: 'supplier' stamp: 'BR 11/26/2023 19:17:23'!
assertSupplierWasImportedWhenImportingCustomer

	^ newSupplier ifNil: [ self error: self class canNotImportCustomerWithoutSupplierErrorDescription ]! !
!SupplierImporter methodsFor: 'address' stamp: 'BR 11/26/2023 19:17:47' prior: 50667138!
importAddress

	| parsedAddress |
	self assertSupplierWasImportedWhenAddingAddress.
	parsedAddress := self parseRecordWith: AddressRecordParser.
	newSupplier addAddress: parsedAddress.! !
!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'BR 11/26/2023 19:18:18'!
canNotImportCustomerWithoutSupplierErrorDescription

	^'Cannot import customer without Supplier'! !
!SupplierImporter class methodsFor: 'as yet unclassified' stamp: 'BR 11/26/2023 19:18:44'!
canNotImportAddressWithoutSupplierErrorDescription

	^'Cannot import Address without Supplier'! !

!methodRemoval: SupplierImporter class #canNotImportCustomerWithoutSupplier stamp: 'BR 11/26/2023 19:19:19'!
canNotImportCustomerWithoutSupplier

	^'Cannot import customer without Supplier'!
!SupplierImporter methodsFor: 'customer' stamp: 'BR 11/26/2023 19:20:23' prior: 50666058!
importExistingCustomer
	
	| parsedId existingCustomer |
	self assertSupplierWasImportedWhenImportingCustomer.
	parsedId := self parseRecordWith: PartyIdRecordParser.
	existingCustomer := system customerWithIdentification: parsedId.
	newSupplier addCustomer: existingCustomer.! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:21:04'!
test10ImportingFailsWhenAttemptintToImportWithEmptySupplier

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:21:45' prior: 50667232!
test10ImportingFailsWhenAttemptintToImportWithEmptySupplier

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:22:06' prior: 50667258!
test10ImportingFailsWhenAttemptintToImportWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:22:40' prior: 50667282!
test10ImportingFailsWhenAttemptintToImportWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportCustomerWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test10ImportingFailsWhenAttemptintToImportWithEmptySupplier stamp: 'BR 11/26/2023 19:22:42'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:22:56'!
test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportCustomerWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:23:03' prior: 50667323!
test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportAddressWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:23:24' prior: 50667342!
test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportAddressWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!testRun: #ImportTest #test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier stamp: 'BR 11/26/2023 19:23:30'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:23:41'!
test11ImportingFailsWhenAttemptingToImportAddressWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportAddressWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!methodRemoval: ImportTest #test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier stamp: 'BR 11/26/2023 19:23:41'!
test11ImportingFailsWhenAttemptintToImportAddressWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportAddressWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:25:10'!
test10ImportingFailsWhenAttemptingToImportWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportCustomerWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!methodRemoval: ImportTest #test10ImportingFailsWhenAttemptintToImportWithEmptySupplier stamp: 'BR 11/26/2023 19:25:10'!
test10ImportingFailsWhenAttemptintToImportWithEmptySupplier

	| stream |
	
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: SupplierImporter canNotImportCustomerWithoutSupplierErrorDescription.
		self assert: system numberOfSuppliers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:25:17'!
test09ImportingFailsWhenAttemptingToImportNonExistentCustomer

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	! !

!methodRemoval: ImportTest #test09ImportingFailsWhenAttemptintToImportNonExistentCustomer stamp: 'BR 11/26/2023 19:25:17'!
test09ImportingFailsWhenAttemptintToImportNonExistentCustomer

	| stream supplierId importedSupplier|
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.

	self should: [
		SupplierImporter valueFrom: stream into: system .
		]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:error | 
		self assert: error messageText equals: ErpSystem nonExistentCustomerId.
		self assert: system numberOfSuppliers equals: 1.
		importedSupplier := self assertSupplierWithIdentification: supplierId hasFirstName: 'Supplier1'.
		self assert: importedSupplier numberOfCustomers equals: 0.
		self assert: system numberOfCustomers equals: 0.
	]

	
	
	
	
	

	!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:27:49'!
test12ManySuppliersAreImportedCorrectly

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23-25666777-9
S,Supplier2,E,1234'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:28:17' prior: 50667513!
test12ManySuppliersAreImportedCorrectly

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
EC,C,23-25666777-9
S,Supplier2,E,1234'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assert: system numberOfSuppliers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:28:19'!
PASSED!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:29:35' prior: 50667536!
test12ManySuppliersAreImportedCorrectly

	| stream importedSupplier supplierId |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
S,Supplier2,E,1234
EC,C,23-25666777-9'.
	supplierId := PartyId ofType: 'D' numbered: '123'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier := system supplierWithIdentification: supplierId.
	self assert: importedSupplier numberOfCustomers equals: 2.
	self assert: system numberOfCustomers equals: 2.
	self assert: system numberOfSuppliers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.

	! !

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:29:36'!
FAILURE!

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:29:36'!
FAILURE!

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:30:47'!
FAILURE!

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:30:47'!
FAILURE!
!ImportTest methodsFor: 'tests - supplier' stamp: 'BR 11/26/2023 19:33:53' prior: 50667564!
test12ManySuppliersAreImportedCorrectly

	| stream importedSupplier1 importedSupplier2 supplierId1 supplierId2 |
	
	system addCustomer: self juanPerez.
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444
S,Supplier2,E,1234
EC,C,23-25666777-9'.
	supplierId1 := PartyId ofType: 'D' numbered: '123'.
	supplierId2 := PartyId ofType: 'E' numbered: '1234'.
	SupplierImporter valueFrom: stream into: system .
	
	importedSupplier1 := system supplierWithIdentification: supplierId1.
	importedSupplier2 := system supplierWithIdentification: supplierId2.
	
	self assert: importedSupplier1 numberOfCustomers equals: 1.
	self assert: importedSupplier2 numberOfCustomers equals: 1.
	self assert: system numberOfCustomers equals: 2.
	self assert: system numberOfSuppliers equals: 2.
	self assertCorrectlyImportedCustomerOf: importedSupplier1 withId: self pepeSanchezId name: 'Pepe' lastName: 'Sanchez'.
	self assertCorrectlyImportedCustomerOf: importedSupplier2 withId: self juanPerezId name: 'Juan' lastName: 'Perez'.

	! !

!testRun: #ImportTest #test12ManySuppliersAreImportedCorrectly stamp: 'BR 11/26/2023 19:33:57'!
PASSED!

----QUIT----(26 November 2023 19:38:41) CuisUniversity-5981.image priorSource: 10699094!