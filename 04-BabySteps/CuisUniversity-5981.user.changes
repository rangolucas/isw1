

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (5 September 2023 20:05:54) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/01-CodigoRepetido/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:14:36'!
assertThat: aForbiddenAction failsWith: anError andCompliesWith: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:23:54'!
assertThat: aForbiddenAction failsWith: anError andThen: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
! !

!methodRemoval: CustomerBookTest #assertThat:failsWith:andCompliesWith: stamp: 'LR 9/5/2023 20:23:54'!
assertThat: aForbiddenAction failsWith: anError andCompliesWith: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:24:42' prior: 50650434!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self
		assertThat: [ customerBook addCustomerNamed: '' ]
		failsWith: Error
		andThen: 
			[ :anError | 
				self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
				self assert: customerBook isEmpty 
			]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:25:55' prior: 50650446!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)
		]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:26:06' prior: 50650666!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self
		assertThat: [ customerBook addCustomerNamed: '' ]
		failsWith: Error
		andThen: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty 
		]! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LR 9/5/2023 20:26:16'!
PASSED!

!methodRemoval: CustomerBookTest #forbiddenAction: stamp: 'LR 9/5/2023 20:26:43'!
forbiddenAction: action 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]!

!methodRemoval: CustomerBookTest #forbiddenAction:raises: stamp: 'LR 9/5/2023 20:26:46'!
forbiddenAction: action raises: errorMessage

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]!

!methodRemoval: CustomerBookTest #forbiddenAction:raises:when: stamp: 'LR 9/5/2023 20:26:47'!
forbiddenAction: action raises: errorMessage when: assertion

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: assertion!

TestCase!

TestCase selectors!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:39:40'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !
!CustomerBookTest class methodsFor: 'testing' stamp: 'LR 9/5/2023 20:40:21'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/5/2023 20:40:21'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:02'!
deleteMe! !
!CustomerBookTest class methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:08'!
deleteMe! !

!methodRemoval: CustomerBookTest #deleteMe stamp: 'LR 9/5/2023 20:43:08'!
deleteMe!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:27'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest class #xxx: stamp: 'LR 9/5/2023 20:43:27'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!

!methodRemoval: CustomerBookTest class #deleteMe stamp: 'LR 9/5/2023 20:43:29'!
deleteMe!
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:44:42'!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/5/2023 20:44:42'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:45:02' prior: 50650832!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:45:54' prior: 50650461!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:46:44' prior: 50650480!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LR 9/5/2023 20:46:52'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LR 9/5/2023 20:46:52'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:23'!
xxx: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:28'!
assertThat: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/5/2023 20:48:28'!
xxx: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:34' prior: 50650936!
assertThat: aCustomerBook
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 0 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 0 equals: aCustomerBook numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:49:52'!
assertThat: aCustomerBook 
hasTotalCustomers: totalCount 
ofWhichActive: activeCount
andSuspended: suspendedCount

	self assert: activeCount equals: aCustomerBook numberOfActiveCustomers.
	self assert: suspendedCount equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: totalCount equals: aCustomerBook numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:50:51' prior: 50650861!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	
	self assertThat: customerBook hasTotalCustomers: 1 ofWhichActive: 0 andSuspended: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:51:10' prior: 50650879!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assertThat: customerBook hasTotalCustomers: 0 ofWhichActive: 0 andSuspended: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LR 9/5/2023 20:51:14'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LR 9/5/2023 20:51:14'!
PASSED!
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:52:50' prior: 50650850!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:53:11'!
createCustomerBookWithCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:55:00' prior: 50651037!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := self createCustomerBookWithCustomerNamed: aCustomerName.	
	customerBook suspendCustomerNamed: aCustomerName.
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:56:46' prior: 50650421!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithCustomerNamed: paulMcCartney.
	  
	self assertThat: [customerBook removeCustomerNamed: paulMcCartney] takesLessThan: 100 * millisecond
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:57:36' prior: 50650680!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook :=  self createCustomerBookWithCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)
		]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:58:15' prior: 50650501!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:02:27'!
xxx: aCustomerBook gg: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:02:42'!
assertThat: aCustomerBook onlyContainsACustomerNamed: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
! !

!methodRemoval: CustomerBookTest #xxx:gg: stamp: 'LR 9/5/2023 21:02:42'!
xxx: aCustomerBook gg: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:03:02' prior: 50651116!
assertThat: aCustomerBook onlyContainsACustomerNamed: aCustomerName
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aCustomerName).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:03:30' prior: 50651094!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:18' prior: 50651078!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook :=  self createCustomerBookWithCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:55' prior: 50651140!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	self assertThat: [ customerBook suspendCustomerNamed: 'George Harrison' ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:58' prior: 50651168!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	self 
		assertThat: [ customerBook suspendCustomerNamed: 'George Harrison' ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LR 9/5/2023 21:05:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LR 9/5/2023 21:05:02'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:06:29' prior: 50650517!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:07:27' prior: 50651226!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	self assertThat: [ customerBook suspendCustomerNamed: johnLennon ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:07:31' prior: 50651242!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	self 
		assertThat: [ customerBook suspendCustomerNamed: johnLennon ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'LR 9/5/2023 21:07:41'!
PASSED!

!methodRemoval: CustomerBookTest #assertThat: stamp: 'LR 9/5/2023 21:08:21'!
assertThat: aCustomerBook
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 0 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 0 equals: aCustomerBook numberOfCustomers.


	
!

----STARTUP---- (12 September 2023 23:29:17) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/Downloads/Ejercicio Numeros/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/12/2023 23:34:13'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/12/2023 23:34:13'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/12/2023 23:34:13'!
ERROR!

sevenTenths!

self class!

oneFifth + oneHalf !

	sevenTenths := (Entero with: 7) / (Entero with: 10).!

oneFifth!

oneFifth + oneHalf!

oneFifth!

oneFifth + oneHalf!

(oneFifth + oneHalf) type!

(oneFifth + oneHalf) class!

sevenTenths class!
!Behavior method!
isZero
	#_coverageTracker683458_ markAsExecuted.
	^ #_coverageTracker683458_
		coverAll:
			{12 to: 16}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
canNotDivideByZeroErrorDescription
	#_coverageTracker683467_ markAsExecuted.
	^ #_coverageTracker683467_
		coverAll:
			{39 to: 71}
		byLiteralOrPseudoVariable: 'No se puede dividir por cero!!!!!!'.! !
!Behavior method!
printOn: aStream
	#_coverageTracker683483_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker683483_
		cover: (20 to: 26)
		declaredAt: (10 to: 16)
		by: aStream.
	#_coverageTracker683483_
		coverAll:
			{28 to: 33}
		evaluating: [
			receiver1 print:
				(#_coverageTracker683483_
					cover: (35 to: 39)
					declaredAt: (35 to: 39)
					by: value) ]
		thatSends: #print:
		to: receiver1 ] value.! !
!Behavior method!
isOne
	#_coverageTracker683490_ markAsExecuted.
	^ #_coverageTracker683490_
		coverAll:
			{11 to: 15}
		byLiteralOrPseudoVariable: false.! !
!Behavior method!
with: aValue
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	#_coverageTracker683506_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683506_
		cover: (139 to: 144)
		declaredAt: (7 to: 12)
		by: aValue.
	#_coverageTracker683506_
		coverAll:
			{146 to: 154}
		evaluating: [ receiver1 isInteger ]
		thatSends: #isInteger
		to: receiver1 ] value.
	#_coverageTracker683506_
		coverAll:
			{156 to: 163}
		evaluating: [
			receiver3 ifFalse: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker683506_
					coverAll:
						{168 to: 171}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683506_
					coverAll:
						{173 to: 178}
					evaluating: [
						receiver2 error:
							(#_coverageTracker683506_
								coverAll:
									{180 to: 206}
								byLiteralOrPseudoVariable: 'aValue debe ser anInteger') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifFalse:
		to: receiver3 ] value.
	^ [ | receiver5 |
	receiver5 _ [ | receiver4 |
	receiver4 _ #_coverageTracker683506_
		coverAll:
			{215 to: 218}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683506_
		coverAll:
			{220 to: 222}
		evaluating: [ receiver4 new ]
		thatSends: #new
		to: receiver4 ] value.
	#_coverageTracker683506_
		coverAll:
			{224 to: 237}
		evaluating: [
			receiver5 initalizeWith:
				(#_coverageTracker683506_
					cover: (239 to: 244)
					declaredAt: (7 to: 12)
					by: aValue) ]
		thatSends: #initalizeWith:
		to: receiver5 ] value.! !
!Behavior method!
integerValue
	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	#_coverageTracker683524_ markAsExecuted.
	^ #_coverageTracker683524_
		cover: (138 to: 142)
		declaredAt: (138 to: 142)
		by: value.! !
!Behavior method!
- aSubtrahend
	| newNumerator newDenominator |
	#_coverageTracker683542_ markAsExecuted.
	#_coverageTracker683542_
		cover: (54 to: 65)
		declaredAt: (21 to: 32)
		by:
			(newNumerator _ [ | receiver5 |
			receiver5 _ [ | receiver2 |
			receiver2 _ #_coverageTracker683542_
				cover: (71 to: 79)
				declaredAt: (71 to: 79)
				by: numerator.
			#_coverageTracker683542_
				coverAll:
					{81 to: 81}
				evaluating: [
					receiver2 *
						[ | receiver1 |
						receiver1 _ #_coverageTracker683542_
							cover: (83 to: 93)
							declaredAt: (3 to: 13)
							by: aSubtrahend.
						#_coverageTracker683542_
							coverAll:
								{95 to: 105}
							evaluating: [ receiver1 denominator ]
							thatSends: #denominator
							to: receiver1 ] value ]
				thatSends: #*
				to: receiver2 ] value.
			#_coverageTracker683542_
				coverAll:
					{108 to: 108}
				evaluating: [
					receiver5 -
						[ | receiver4 |
						receiver4 _ #_coverageTracker683542_
							cover: (111 to: 121)
							declaredAt: (111 to: 121)
							by: denominator.
						#_coverageTracker683542_
							coverAll:
								{123 to: 123}
							evaluating: [
								receiver4 *
									[ | receiver3 |
									receiver3 _ #_coverageTracker683542_
										cover: (125 to: 135)
										declaredAt: (3 to: 13)
										by: aSubtrahend.
									#_coverageTracker683542_
										coverAll:
											{137 to: 145}
										evaluating: [ receiver3 numerator ]
										thatSends: #numerator
										to: receiver3 ] value ]
							thatSends: #*
							to: receiver4 ] value ]
				thatSends: #-
				to: receiver5 ] value).
	#_coverageTracker683542_
		cover: (150 to: 163)
		declaredAt: (34 to: 47)
		by:
			(newDenominator _ [ | receiver7 |
			receiver7 _ #_coverageTracker683542_
				cover: (168 to: 178)
				declaredAt: (111 to: 121)
				by: denominator.
			#_coverageTracker683542_
				coverAll:
					{180 to: 180}
				evaluating: [
					receiver7 *
						[ | receiver6 |
						receiver6 _ #_coverageTracker683542_
							cover: (182 to: 192)
							declaredAt: (3 to: 13)
							by: aSubtrahend.
						#_coverageTracker683542_
							coverAll:
								{194 to: 204}
							evaluating: [ receiver6 denominator ]
							thatSends: #denominator
							to: receiver6 ] value ]
				thatSends: #*
				to: receiver7 ] value).
	^ [ | receiver8 |
	receiver8 _ #_coverageTracker683542_
		cover: (211 to: 222)
		declaredAt: (21 to: 32)
		by: newNumerator.
	#_coverageTracker683542_
		coverAll:
			{224 to: 224}
		evaluating: [
			receiver8 /
				(#_coverageTracker683542_
					cover: (226 to: 239)
					declaredAt: (34 to: 47)
					by: newDenominator) ]
		thatSends: #/
		to: receiver8 ] value.! !
!Behavior method!
invalidNumberTypeErrorDescription
	#_coverageTracker683573_ markAsExecuted.
	^ #_coverageTracker683573_
		coverAll:
			{40 to: 67}
		byLiteralOrPseudoVariable: 'Tipo de número inválido!!!!!!'.! !
!Behavior method!
* aMultiplier
	#_coverageTracker683577_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683577_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683577_
		coverAll:
			{25 to: 29}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker683577_
		coverAll:
			{31 to: 35}
		evaluating: [
			receiver4 with:
				[ | receiver3 |
				receiver3 _ #_coverageTracker683577_
					cover: (37 to: 41)
					declaredAt: (37 to: 41)
					by: value.
				#_coverageTracker683577_
					coverAll:
						{43 to: 43}
					evaluating: [
						receiver3 *
							[ | receiver2 |
							receiver2 _ #_coverageTracker683577_
								cover: (45 to: 55)
								declaredAt: (3 to: 13)
								by: aMultiplier.
							#_coverageTracker683577_
								coverAll:
									{57 to: 68}
								evaluating: [ receiver2 integerValue ]
								thatSends: #integerValue
								to: receiver2 ] value ]
					thatSends: #*
					to: receiver3 ] value ]
		thatSends: #with:
		to: receiver4 ] value.! !
!Behavior method!
invalidNumberType
	#_coverageTracker683586_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker683586_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683586_
		coverAll:
			{26 to: 31}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker683586_
					coverAll:
						{33 to: 36}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683586_
					coverAll:
						{38 to: 42}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker683586_
					coverAll:
						{44 to: 76}
					evaluating: [ receiver2 invalidNumberTypeErrorDescription ]
					thatSends: #invalidNumberTypeErrorDescription
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
greatestCommonDivisorWith: anEntero
	#_coverageTracker683591_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683591_
		coverAll:
			{42 to: 45}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683591_
		coverAll:
			{47 to: 51}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker683591_
		coverAll:
			{53 to: 57}
		evaluating: [
			receiver4 with:
				[ | receiver3 |
				receiver3 _ #_coverageTracker683591_
					cover: (60 to: 64)
					declaredAt: (60 to: 64)
					by: value.
				#_coverageTracker683591_
					coverAll:
						{66 to: 69}
					evaluating: [
						receiver3 gcd:
							[ | receiver2 |
							receiver2 _ #_coverageTracker683591_
								cover: (71 to: 78)
								declaredAt: (28 to: 35)
								by: anEntero.
							#_coverageTracker683591_
								coverAll:
									{80 to: 91}
								evaluating: [ receiver2 integerValue ]
								thatSends: #integerValue
								to: receiver2 ] value ]
					thatSends: #gcd:
					to: receiver3 ] value ]
		thatSends: #with:
		to: receiver4 ] value.! !
!Behavior method!
isOne
	#_coverageTracker683606_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683606_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: value.
	#_coverageTracker683606_
		coverAll:
			{17 to: 17}
		evaluating: [
			receiver1 =
				(#_coverageTracker683606_
					coverAll:
						{18 to: 19}
					byLiteralOrPseudoVariable: 1) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
hash
	#_coverageTracker683609_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683609_
		cover: (10 to: 18)
		declaredAt: (10 to: 18)
		by: numerator.
	#_coverageTracker683609_
		coverAll:
			{20 to: 23}
		evaluating: [ receiver1 hash ]
		thatSends: #hash
		to: receiver1 ] value.
	#_coverageTracker683609_
		coverAll:
			{25 to: 25}
		evaluating: [
			receiver3 /
				[ | receiver2 |
				receiver2 _ #_coverageTracker683609_
					cover: (27 to: 37)
					declaredAt: (27 to: 37)
					by: denominator.
				#_coverageTracker683609_
					coverAll:
						{39 to: 42}
					evaluating: [ receiver2 hash ]
					thatSends: #hash
					to: receiver2 ] value ]
		thatSends: #/
		to: receiver3 ] value.
	#_coverageTracker683609_
		coverAll:
			{45 to: 48}
		evaluating: [ receiver4 hash ]
		thatSends: #hash
		to: receiver4 ] value.! !
!Behavior method!
/ aDivisor
	#_coverageTracker683615_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683615_
		coverAll:
			{17 to: 24}
		by: Fraccion.
	#_coverageTracker683615_
		coverAll:
			{26 to: 30. 37 to: 41}
		evaluating: [
			receiver1
				with:
					(#_coverageTracker683615_
						coverAll:
							{32 to: 35}
						byLiteralOrPseudoVariable: self)
				over:
					(#_coverageTracker683615_
						cover: (43 to: 50)
						declaredAt: (3 to: 10)
						by: aDivisor) ]
		thatSends: #with:over:
		to: receiver1 ] value.! !
!Behavior method!
// aDivisor
	#_coverageTracker683622_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683622_
		coverAll:
			{18 to: 21}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683622_
		coverAll:
			{23 to: 27}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker683622_
		coverAll:
			{29 to: 33}
		evaluating: [
			receiver4 with:
				[ | receiver3 |
				receiver3 _ #_coverageTracker683622_
					cover: (35 to: 39)
					declaredAt: (35 to: 39)
					by: value.
				#_coverageTracker683622_
					coverAll:
						{41 to: 42}
					evaluating: [
						receiver3 //
							[ | receiver2 |
							receiver2 _ #_coverageTracker683622_
								cover: (44 to: 51)
								declaredAt: (4 to: 11)
								by: aDivisor.
							#_coverageTracker683622_
								coverAll:
									{53 to: 64}
								evaluating: [ receiver2 integerValue ]
								thatSends: #integerValue
								to: receiver2 ] value ]
					thatSends: #//
					to: receiver3 ] value ]
		thatSends: #with:
		to: receiver4 ] value.! !
!Behavior method!
negativeFibonacciErrorDescription
	#_coverageTracker683638_ markAsExecuted.
	^ #_coverageTracker683638_
		coverAll:
			{38 to: 97}
		byLiteralOrPseudoVariable: ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'.! !
!Behavior method!
- aSubtrahend
	#_coverageTracker683643_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683643_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683643_
		coverAll:
			{26 to: 30}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker683643_
		coverAll:
			{32 to: 36}
		evaluating: [
			receiver4 with:
				[ | receiver3 |
				receiver3 _ #_coverageTracker683643_
					cover: (38 to: 42)
					declaredAt: (38 to: 42)
					by: value.
				#_coverageTracker683643_
					coverAll:
						{44 to: 44}
					evaluating: [
						receiver3 -
							[ | receiver2 |
							receiver2 _ #_coverageTracker683643_
								cover: (46 to: 56)
								declaredAt: (3 to: 13)
								by: aSubtrahend.
							#_coverageTracker683643_
								coverAll:
									{58 to: 69}
								evaluating: [ receiver2 integerValue ]
								thatSends: #integerValue
								to: receiver2 ] value ]
					thatSends: #-
					to: receiver3 ] value ]
		thatSends: #with:
		to: receiver4 ] value.! !
!Behavior method!
denominator
	#_coverageTracker683652_ markAsExecuted.
	^ #_coverageTracker683652_
		cover: (17 to: 27)
		declaredAt: (17 to: 27)
		by: denominator.! !
!Behavior method!
initializeWith: aNumerator over: aDenominator
	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	#_coverageTracker683654_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683654_
		cover: (136 to: 145)
		declaredAt: (17 to: 26)
		by: aNumerator.
	#_coverageTracker683654_
		coverAll:
			{147 to: 152}
		evaluating: [ receiver1 isZero ]
		thatSends: #isZero
		to: receiver1 ] value.
	#_coverageTracker683654_
		coverAll:
			{154 to: 160}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker683654_
					coverAll:
						{164 to: 167}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683654_
					coverAll:
						{169 to: 174}
					evaluating: [
						receiver2 error:
							(#_coverageTracker683654_
								coverAll:
									{176 to: 207}
								byLiteralOrPseudoVariable: 'una fraccion no puede ser cero') ]
					thatSends: #error:
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver6 |
	receiver6 _ [ | receiver4 |
	receiver4 _ #_coverageTracker683654_
		cover: (213 to: 224)
		declaredAt: (34 to: 45)
		by: aDenominator.
	#_coverageTracker683654_
		coverAll:
			{226 to: 230}
		evaluating: [ receiver4 isOne ]
		thatSends: #isOne
		to: receiver4 ] value.
	#_coverageTracker683654_
		coverAll:
			{232 to: 238}
		evaluating: [
			receiver6 ifTrue: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker683654_
					coverAll:
						{242 to: 245}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683654_
					coverAll:
						{247 to: 252}
					evaluating: [
						receiver5 error:
							(#_coverageTracker683654_
								coverAll:
									{254 to: 321}
								byLiteralOrPseudoVariable: 'una fraccion no puede tener denominador 1 porque sino es un entero') ]
					thatSends: #error:
					to: receiver5 ] value ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.
	#_coverageTracker683654_
		cover: (329 to: 337)
		declaredAt: (329 to: 337)
		by:
			(numerator _ #_coverageTracker683654_
				cover: (342 to: 351)
				declaredAt: (17 to: 26)
				by: aNumerator).
	#_coverageTracker683654_
		cover: (355 to: 365)
		declaredAt: (355 to: 365)
		by:
			(denominator _ #_coverageTracker683654_
				cover: (370 to: 381)
				declaredAt: (34 to: 45)
				by: aDenominator).! !
!Behavior method!
= anObject
	#_coverageTracker683679_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ [ | receiver2 |
	receiver2 _ #_coverageTracker683679_
		cover: (16 to: 23)
		declaredAt: (3 to: 10)
		by: anObject.
	#_coverageTracker683679_
		coverAll:
			{25 to: 33}
		evaluating: [
			receiver2 isKindOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker683679_
					coverAll:
						{35 to: 38}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683679_
					coverAll:
						{40 to: 44}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value ]
		thatSends: #isKindOf:
		to: receiver2 ] value.
	#_coverageTracker683679_
		coverAll:
			{47 to: 50}
		evaluating: [
			receiver5 and: [
				[ | receiver4 |
				receiver4 _ #_coverageTracker683679_
					cover: (54 to: 58)
					declaredAt: (54 to: 58)
					by: value.
				#_coverageTracker683679_
					coverAll:
						{60 to: 60}
					evaluating: [
						receiver4 =
							[ | receiver3 |
							receiver3 _ #_coverageTracker683679_
								cover: (62 to: 69)
								declaredAt: (3 to: 10)
								by: anObject.
							#_coverageTracker683679_
								coverAll:
									{71 to: 82}
								evaluating: [ receiver3 integerValue ]
								thatSends: #integerValue
								to: receiver3 ] value ]
					thatSends: #=
					to: receiver4 ] value ]]
		thatSends: #and:
		to: receiver5 ] value.! !
!Behavior method!
/ aDivisor
	#_coverageTracker683688_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ [ | receiver2 |
	receiver2 _ #_coverageTracker683688_
		cover: (18 to: 26)
		declaredAt: (18 to: 26)
		by: numerator.
	#_coverageTracker683688_
		coverAll:
			{28 to: 28}
		evaluating: [
			receiver2 *
				[ | receiver1 |
				receiver1 _ #_coverageTracker683688_
					cover: (30 to: 37)
					declaredAt: (3 to: 10)
					by: aDivisor.
				#_coverageTracker683688_
					coverAll:
						{39 to: 49}
					evaluating: [ receiver1 denominator ]
					thatSends: #denominator
					to: receiver1 ] value ]
		thatSends: #*
		to: receiver2 ] value.
	#_coverageTracker683688_
		coverAll:
			{52 to: 52}
		evaluating: [
			receiver5 /
				[ | receiver4 |
				receiver4 _ #_coverageTracker683688_
					cover: (55 to: 65)
					declaredAt: (55 to: 65)
					by: denominator.
				#_coverageTracker683688_
					coverAll:
						{67 to: 67}
					evaluating: [
						receiver4 *
							[ | receiver3 |
							receiver3 _ #_coverageTracker683688_
								cover: (69 to: 76)
								declaredAt: (3 to: 10)
								by: aDivisor.
							#_coverageTracker683688_
								coverAll:
									{78 to: 86}
								evaluating: [ receiver3 numerator ]
								thatSends: #numerator
								to: receiver3 ] value ]
					thatSends: #*
					to: receiver4 ] value ]
		thatSends: #/
		to: receiver5 ] value.! !
!Behavior method!
numerator
	#_coverageTracker683704_ markAsExecuted.
	^ #_coverageTracker683704_
		cover: (15 to: 23)
		declaredAt: (15 to: 23)
		by: numerator.! !
!Behavior method!
+ anAdder
	#_coverageTracker683706_ markAsExecuted.
	^ [ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683706_
		coverAll:
			{16 to: 19}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683706_
		coverAll:
			{21 to: 25}
		evaluating: [ receiver1 class ]
		thatSends: #class
		to: receiver1 ] value.
	#_coverageTracker683706_
		coverAll:
			{27 to: 31}
		evaluating: [
			receiver4 with:
				[ | receiver3 |
				receiver3 _ #_coverageTracker683706_
					cover: (33 to: 37)
					declaredAt: (33 to: 37)
					by: value.
				#_coverageTracker683706_
					coverAll:
						{39 to: 39}
					evaluating: [
						receiver3 +
							[ | receiver2 |
							receiver2 _ #_coverageTracker683706_
								cover: (41 to: 47)
								declaredAt: (3 to: 9)
								by: anAdder.
							#_coverageTracker683706_
								coverAll:
									{49 to: 60}
								evaluating: [ receiver2 integerValue ]
								thatSends: #integerValue
								to: receiver2 ] value ]
					thatSends: #+
					to: receiver3 ] value ]
		thatSends: #with:
		to: receiver4 ] value.! !
!Behavior method!
printOn: aStream
	#_coverageTracker683715_ markAsExecuted.
	[ | cascadeReceiver |
	cascadeReceiver _ #_coverageTracker683715_
		cover: (20 to: 26)
		declaredAt: (10 to: 16)
		by: aStream.
	[ | receiver1 |
	receiver1 _ cascadeReceiver.
	#_coverageTracker683715_
		coverAll:
			{31 to: 36}
		evaluating: [
			receiver1 print:
				(#_coverageTracker683715_
					cover: (38 to: 46)
					declaredAt: (38 to: 46)
					by: numerator) ]
		thatSends: #print:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker683715_
		coverAll:
			{51 to: 58}
		evaluating: [
			receiver2 nextPut:
				(#_coverageTracker683715_
					coverAll:
						{60 to: 61}
					byLiteralOrPseudoVariable: $/) ]
		thatSends: #nextPut:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker683715_
		coverAll:
			{66 to: 71}
		evaluating: [
			receiver3 print:
				(#_coverageTracker683715_
					cover: (73 to: 83)
					declaredAt: (73 to: 83)
					by: denominator) ]
		thatSends: #print:
		to: receiver3 ] value ] value.! !
!Behavior method!
+ anAdder
	| newNumerator newDenominator |
	#_coverageTracker683722_ markAsExecuted.
	#_coverageTracker683722_
		cover: (50 to: 61)
		declaredAt: (17 to: 28)
		by:
			(newNumerator _ [ | receiver5 |
			receiver5 _ [ | receiver2 |
			receiver2 _ #_coverageTracker683722_
				cover: (67 to: 75)
				declaredAt: (67 to: 75)
				by: numerator.
			#_coverageTracker683722_
				coverAll:
					{77 to: 77}
				evaluating: [
					receiver2 *
						[ | receiver1 |
						receiver1 _ #_coverageTracker683722_
							cover: (79 to: 85)
							declaredAt: (3 to: 9)
							by: anAdder.
						#_coverageTracker683722_
							coverAll:
								{87 to: 97}
							evaluating: [ receiver1 denominator ]
							thatSends: #denominator
							to: receiver1 ] value ]
				thatSends: #*
				to: receiver2 ] value.
			#_coverageTracker683722_
				coverAll:
					{100 to: 100}
				evaluating: [
					receiver5 +
						[ | receiver4 |
						receiver4 _ #_coverageTracker683722_
							cover: (103 to: 113)
							declaredAt: (103 to: 113)
							by: denominator.
						#_coverageTracker683722_
							coverAll:
								{115 to: 115}
							evaluating: [
								receiver4 *
									[ | receiver3 |
									receiver3 _ #_coverageTracker683722_
										cover: (117 to: 123)
										declaredAt: (3 to: 9)
										by: anAdder.
									#_coverageTracker683722_
										coverAll:
											{125 to: 133}
										evaluating: [ receiver3 numerator ]
										thatSends: #numerator
										to: receiver3 ] value ]
							thatSends: #*
							to: receiver4 ] value ]
				thatSends: #+
				to: receiver5 ] value).
	#_coverageTracker683722_
		cover: (138 to: 151)
		declaredAt: (30 to: 43)
		by:
			(newDenominator _ [ | receiver7 |
			receiver7 _ #_coverageTracker683722_
				cover: (156 to: 166)
				declaredAt: (103 to: 113)
				by: denominator.
			#_coverageTracker683722_
				coverAll:
					{168 to: 168}
				evaluating: [
					receiver7 *
						[ | receiver6 |
						receiver6 _ #_coverageTracker683722_
							cover: (170 to: 176)
							declaredAt: (3 to: 9)
							by: anAdder.
						#_coverageTracker683722_
							coverAll:
								{178 to: 188}
							evaluating: [ receiver6 denominator ]
							thatSends: #denominator
							to: receiver6 ] value ]
				thatSends: #*
				to: receiver7 ] value).
	^ [ | receiver8 |
	receiver8 _ #_coverageTracker683722_
		cover: (195 to: 206)
		declaredAt: (17 to: 28)
		by: newNumerator.
	#_coverageTracker683722_
		coverAll:
			{208 to: 208}
		evaluating: [
			receiver8 /
				(#_coverageTracker683722_
					cover: (210 to: 223)
					declaredAt: (30 to: 43)
					by: newDenominator) ]
		thatSends: #/
		to: receiver8 ] value.! !
!Behavior method!
negated
	#_coverageTracker683749_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker683749_
		coverAll:
			{13 to: 16}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683749_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver2 *
				[ | receiver1 |
				receiver1 _ #_coverageTracker683749_
					coverAll:
						{21 to: 26}
					by: Entero.
				#_coverageTracker683749_
					coverAll:
						{28 to: 32}
					evaluating: [
						receiver1 with:
							(#_coverageTracker683749_
								coverAll:
									{34 to: 35}
								byLiteralOrPseudoVariable: -1) ]
					thatSends: #with:
					to: receiver1 ] value ]
		thatSends: #*
		to: receiver2 ] value.! !
!Behavior method!
isNegative
	#_coverageTracker683753_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683753_
		cover: (16 to: 20)
		declaredAt: (16 to: 20)
		by: value.
	#_coverageTracker683753_
		coverAll:
			{22 to: 22}
		evaluating: [
			receiver1 <
				(#_coverageTracker683753_
					coverAll:
						{23 to: 24}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #<
		to: receiver1 ] value.! !
!Behavior method!
hash
	#_coverageTracker683755_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683755_
		cover: (9 to: 13)
		declaredAt: (9 to: 13)
		by: value.
	#_coverageTracker683755_
		coverAll:
			{15 to: 18}
		evaluating: [ receiver1 hash ]
		thatSends: #hash
		to: receiver1 ] value.! !
!Behavior method!
isNegative
	#_coverageTracker683760_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683760_
		cover: (16 to: 24)
		declaredAt: (16 to: 24)
		by: numerator.
	#_coverageTracker683760_
		coverAll:
			{26 to: 26}
		evaluating: [
			receiver1 <
				(#_coverageTracker683760_
					coverAll:
						{27 to: 28}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #<
		to: receiver1 ] value.! !
!Behavior method!
fibonacci
	| one two |
	#_coverageTracker683771_ markAsExecuted.
	#_coverageTracker683771_
		cover: (28 to: 30)
		declaredAt: (15 to: 17)
		by:
			(one _ [ | receiver1 |
			receiver1 _ #_coverageTracker683771_
				coverAll:
					{35 to: 40}
				by: Entero.
			#_coverageTracker683771_
				coverAll:
					{42 to: 46}
				evaluating: [
					receiver1 with:
						(#_coverageTracker683771_
							coverAll:
								{48 to: 48}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #with:
				to: receiver1 ] value).
	#_coverageTracker683771_
		cover: (52 to: 54)
		declaredAt: (19 to: 21)
		by:
			(two _ [ | receiver2 |
			receiver2 _ #_coverageTracker683771_
				coverAll:
					{59 to: 64}
				by: Entero.
			#_coverageTracker683771_
				coverAll:
					{66 to: 70}
				evaluating: [
					receiver2 with:
						(#_coverageTracker683771_
							coverAll:
								{72 to: 72}
							byLiteralOrPseudoVariable: 2) ]
				thatSends: #with:
				to: receiver2 ] value).
	[ | receiver6 |
	receiver6 _ [ | receiver3 |
	receiver3 _ #_coverageTracker683771_
		coverAll:
			{78 to: 81}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683771_
		coverAll:
			{83 to: 92}
		evaluating: [ receiver3 isNegative ]
		thatSends: #isNegative
		to: receiver3 ] value.
	#_coverageTracker683771_
		coverAll:
			{94 to: 100}
		evaluating: [
			receiver6 ifTrue: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker683771_
					coverAll:
						{103 to: 106}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683771_
					coverAll:
						{108 to: 113}
					evaluating: [
						receiver5 error:
							[ | receiver4 |
							receiver4 _ #_coverageTracker683771_
								coverAll:
									{115 to: 120}
								by: Entero.
							#_coverageTracker683771_
								coverAll:
									{122 to: 154}
								evaluating: [ receiver4 negativeFibonacciErrorDescription ]
								thatSends: #negativeFibonacciErrorDescription
								to: receiver4 ] value ]
					thatSends: #error:
					to: receiver5 ] value ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.
	[ | receiver10 |
	receiver10 _ [ | receiver9 |
	receiver9 _ [ | receiver7 |
	receiver7 _ #_coverageTracker683771_
		coverAll:
			{162 to: 165}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683771_
		coverAll:
			{167 to: 172}
		evaluating: [ receiver7 isZero ]
		thatSends: #isZero
		to: receiver7 ] value.
	#_coverageTracker683771_
		coverAll:
			{174 to: 176}
		evaluating: [
			receiver9 or: [
				[ | receiver8 |
				receiver8 _ #_coverageTracker683771_
					coverAll:
						{179 to: 182}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683771_
					coverAll:
						{184 to: 188}
					evaluating: [ receiver8 isOne ]
					thatSends: #isOne
					to: receiver8 ] value ]]
		thatSends: #or:
		to: receiver9 ] value.
	#_coverageTracker683771_
		coverAll:
			{192 to: 198}
		evaluating: [ receiver10 ifTrue: [ ^ #_coverageTracker683771_
					cover: (202 to: 204)
					declaredAt: (15 to: 17)
					by: one ]]
		thatSends: #ifTrue:
		to: receiver10 ] value.
	^ [ | receiver15 |
	receiver15 _ [ | receiver12 |
	receiver12 _ [ | receiver11 |
	receiver11 _ #_coverageTracker683771_
		coverAll:
			{214 to: 217}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683771_
		coverAll:
			{219 to: 219}
		evaluating: [
			receiver11 -
				(#_coverageTracker683771_
					cover: (221 to: 223)
					declaredAt: (15 to: 17)
					by: one) ]
		thatSends: #-
		to: receiver11 ] value.
	#_coverageTracker683771_
		coverAll:
			{226 to: 234}
		evaluating: [ receiver12 fibonacci ]
		thatSends: #fibonacci
		to: receiver12 ] value.
	#_coverageTracker683771_
		coverAll:
			{236 to: 236}
		evaluating: [
			receiver15 +
				[ | receiver14 |
				receiver14 _ [ | receiver13 |
				receiver13 _ #_coverageTracker683771_
					coverAll:
						{239 to: 242}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683771_
					coverAll:
						{244 to: 244}
					evaluating: [
						receiver13 -
							(#_coverageTracker683771_
								cover: (246 to: 248)
								declaredAt: (19 to: 21)
								by: two) ]
					thatSends: #-
					to: receiver13 ] value.
				#_coverageTracker683771_
					coverAll:
						{251 to: 259}
					evaluating: [ receiver14 fibonacci ]
					thatSends: #fibonacci
					to: receiver14 ] value ]
		thatSends: #+
		to: receiver15 ] value.! !
!Behavior method!
= anObject
	#_coverageTracker683812_ markAsExecuted.
	^ [ | receiver8 |
	receiver8 _ [ | receiver2 |
	receiver2 _ #_coverageTracker683812_
		cover: (16 to: 23)
		declaredAt: (3 to: 10)
		by: anObject.
	#_coverageTracker683812_
		coverAll:
			{25 to: 33}
		evaluating: [
			receiver2 isKindOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker683812_
					coverAll:
						{35 to: 38}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683812_
					coverAll:
						{40 to: 44}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value ]
		thatSends: #isKindOf:
		to: receiver2 ] value.
	#_coverageTracker683812_
		coverAll:
			{47 to: 50}
		evaluating: [
			receiver8 and: [
				[ | receiver7 |
				receiver7 _ [ | receiver4 |
				receiver4 _ #_coverageTracker683812_
					cover: (55 to: 63)
					declaredAt: (55 to: 63)
					by: numerator.
				#_coverageTracker683812_
					coverAll:
						{65 to: 65}
					evaluating: [
						receiver4 *
							[ | receiver3 |
							receiver3 _ #_coverageTracker683812_
								cover: (67 to: 74)
								declaredAt: (3 to: 10)
								by: anObject.
							#_coverageTracker683812_
								coverAll:
									{76 to: 86}
								evaluating: [ receiver3 denominator ]
								thatSends: #denominator
								to: receiver3 ] value ]
					thatSends: #*
					to: receiver4 ] value.
				#_coverageTracker683812_
					coverAll:
						{89 to: 89}
					evaluating: [
						receiver7 =
							[ | receiver6 |
							receiver6 _ #_coverageTracker683812_
								cover: (92 to: 102)
								declaredAt: (92 to: 102)
								by: denominator.
							#_coverageTracker683812_
								coverAll:
									{104 to: 104}
								evaluating: [
									receiver6 *
										[ | receiver5 |
										receiver5 _ #_coverageTracker683812_
											cover: (106 to: 113)
											declaredAt: (3 to: 10)
											by: anObject.
										#_coverageTracker683812_
											coverAll:
												{115 to: 123}
											evaluating: [ receiver5 numerator ]
											thatSends: #numerator
											to: receiver5 ] value ]
								thatSends: #*
								to: receiver6 ] value ]
					thatSends: #=
					to: receiver7 ] value ]]
		thatSends: #and:
		to: receiver8 ] value.! !
!Behavior method!
with: aDividend over: aDivisor
	| greatestCommonDivisor numerator denominator |
	#_coverageTracker683828_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ [ | receiver1 |
	receiver1 _ #_coverageTracker683828_
		cover: (85 to: 92)
		declaredAt: (23 to: 30)
		by: aDivisor.
	#_coverageTracker683828_
		coverAll:
			{94 to: 99}
		evaluating: [ receiver1 isZero ]
		thatSends: #isZero
		to: receiver1 ] value.
	#_coverageTracker683828_
		coverAll:
			{101 to: 107}
		evaluating: [
			receiver4 ifTrue: [
				[ | receiver3 |
				receiver3 _ #_coverageTracker683828_
					coverAll:
						{111 to: 114}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker683828_
					coverAll:
						{116 to: 121}
					evaluating: [
						receiver3 error:
							[ | receiver2 |
							receiver2 _ #_coverageTracker683828_
								coverAll:
									{123 to: 126}
								byLiteralOrPseudoVariable: self.
							#_coverageTracker683828_
								coverAll:
									{128 to: 161}
								evaluating: [ receiver2 canNotDivideByZeroErrorDescription ]
								thatSends: #canNotDivideByZeroErrorDescription
								to: receiver2 ] value ]
					thatSends: #error:
					to: receiver3 ] value ]]
		thatSends: #ifTrue:
		to: receiver4 ] value.
	[ | receiver6 |
	receiver6 _ [ | receiver5 |
	receiver5 _ #_coverageTracker683828_
		cover: (167 to: 175)
		declaredAt: (7 to: 15)
		by: aDividend.
	#_coverageTracker683828_
		coverAll:
			{177 to: 182}
		evaluating: [ receiver5 isZero ]
		thatSends: #isZero
		to: receiver5 ] value.
	#_coverageTracker683828_
		coverAll:
			{184 to: 190}
		evaluating: [ receiver6 ifTrue: [ ^ #_coverageTracker683828_
					cover: (195 to: 203)
					declaredAt: (7 to: 15)
					by: aDividend ]]
		thatSends: #ifTrue:
		to: receiver6 ] value.
	[ | receiver11 |
	receiver11 _ [ | receiver7 |
	receiver7 _ #_coverageTracker683828_
		cover: (211 to: 218)
		declaredAt: (23 to: 30)
		by: aDivisor.
	#_coverageTracker683828_
		coverAll:
			{220 to: 229}
		evaluating: [ receiver7 isNegative ]
		thatSends: #isNegative
		to: receiver7 ] value.
	#_coverageTracker683828_
		coverAll:
			{231 to: 237}
		evaluating: [ receiver11 ifTrue: [ ^ [ | receiver10 |
				receiver10 _ [ | receiver8 |
				receiver8 _ #_coverageTracker683828_
					cover: (241 to: 249)
					declaredAt: (7 to: 15)
					by: aDividend.
				#_coverageTracker683828_
					coverAll:
						{251 to: 257}
					evaluating: [ receiver8 negated ]
					thatSends: #negated
					to: receiver8 ] value.
				#_coverageTracker683828_
					coverAll:
						{259 to: 259}
					evaluating: [
						receiver10 /
							[ | receiver9 |
							receiver9 _ #_coverageTracker683828_
								cover: (261 to: 268)
								declaredAt: (23 to: 30)
								by: aDivisor.
							#_coverageTracker683828_
								coverAll:
									{270 to: 276}
								evaluating: [ receiver9 negated ]
								thatSends: #negated
								to: receiver9 ] value ]
					thatSends: #/
					to: receiver10 ] value ]]
		thatSends: #ifTrue:
		to: receiver11 ] value.
	#_coverageTracker683828_
		cover: (283 to: 303)
		declaredAt: (36 to: 56)
		by:
			(greatestCommonDivisor _ [ | receiver12 |
			receiver12 _ #_coverageTracker683828_
				cover: (308 to: 316)
				declaredAt: (7 to: 15)
				by: aDividend.
			#_coverageTracker683828_
				coverAll:
					{318 to: 343}
				evaluating: [
					receiver12 greatestCommonDivisorWith:
						(#_coverageTracker683828_
							cover: (345 to: 352)
							declaredAt: (23 to: 30)
							by: aDivisor) ]
				thatSends: #greatestCommonDivisorWith:
				to: receiver12 ] value).
	#_coverageTracker683828_
		cover: (357 to: 365)
		declaredAt: (58 to: 66)
		by:
			(numerator _ [ | receiver13 |
			receiver13 _ #_coverageTracker683828_
				cover: (370 to: 378)
				declaredAt: (7 to: 15)
				by: aDividend.
			#_coverageTracker683828_
				coverAll:
					{380 to: 381}
				evaluating: [
					receiver13 //
						(#_coverageTracker683828_
							cover: (383 to: 403)
							declaredAt: (36 to: 56)
							by: greatestCommonDivisor) ]
				thatSends: #//
				to: receiver13 ] value).
	#_coverageTracker683828_
		cover: (407 to: 417)
		declaredAt: (68 to: 78)
		by:
			(denominator _ [ | receiver14 |
			receiver14 _ #_coverageTracker683828_
				cover: (422 to: 429)
				declaredAt: (23 to: 30)
				by: aDivisor.
			#_coverageTracker683828_
				coverAll:
					{431 to: 432}
				evaluating: [
					receiver14 //
						(#_coverageTracker683828_
							cover: (434 to: 454)
							declaredAt: (36 to: 56)
							by: greatestCommonDivisor) ]
				thatSends: #//
				to: receiver14 ] value).
	[ | receiver16 |
	receiver16 _ [ | receiver15 |
	receiver15 _ #_coverageTracker683828_
		cover: (460 to: 470)
		declaredAt: (68 to: 78)
		by: denominator.
	#_coverageTracker683828_
		coverAll:
			{472 to: 476}
		evaluating: [ receiver15 isOne ]
		thatSends: #isOne
		to: receiver15 ] value.
	#_coverageTracker683828_
		coverAll:
			{478 to: 484}
		evaluating: [ receiver16 ifTrue: [ ^ #_coverageTracker683828_
					cover: (489 to: 497)
					declaredAt: (58 to: 66)
					by: numerator ]]
		thatSends: #ifTrue:
		to: receiver16 ] value.
	^ [ | receiver18 |
	receiver18 _ [ | receiver17 |
	receiver17 _ #_coverageTracker683828_
		coverAll:
			{505 to: 508}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker683828_
		coverAll:
			{510 to: 512}
		evaluating: [ receiver17 new ]
		thatSends: #new
		to: receiver17 ] value.
	#_coverageTracker683828_
		coverAll:
			{514 to: 528. 540 to: 544}
		evaluating: [
			receiver18
				initializeWith:
					(#_coverageTracker683828_
						cover: (530 to: 538)
						declaredAt: (58 to: 66)
						by: numerator)
				over:
					(#_coverageTracker683828_
						cover: (546 to: 556)
						declaredAt: (68 to: 78)
						by: denominator) ]
		thatSends: #initializeWith:over:
		to: receiver18 ] value.! !
!Behavior method!
isZero
	#_coverageTracker683878_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker683878_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: value.
	#_coverageTracker683878_
		coverAll:
			{18 to: 18}
		evaluating: [
			receiver1 =
				(#_coverageTracker683878_
					coverAll:
						{19 to: 20}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
* aMultiplier
	#_coverageTracker683882_ markAsExecuted.
	^ [ | receiver5 |
	receiver5 _ [ | receiver2 |
	receiver2 _ #_coverageTracker683882_
		cover: (21 to: 29)
		declaredAt: (21 to: 29)
		by: numerator.
	#_coverageTracker683882_
		coverAll:
			{31 to: 31}
		evaluating: [
			receiver2 *
				[ | receiver1 |
				receiver1 _ #_coverageTracker683882_
					cover: (33 to: 43)
					declaredAt: (3 to: 13)
					by: aMultiplier.
				#_coverageTracker683882_
					coverAll:
						{45 to: 53}
					evaluating: [ receiver1 numerator ]
					thatSends: #numerator
					to: receiver1 ] value ]
		thatSends: #*
		to: receiver2 ] value.
	#_coverageTracker683882_
		coverAll:
			{56 to: 56}
		evaluating: [
			receiver5 /
				[ | receiver4 |
				receiver4 _ #_coverageTracker683882_
					cover: (59 to: 69)
					declaredAt: (59 to: 69)
					by: denominator.
				#_coverageTracker683882_
					coverAll:
						{71 to: 71}
					evaluating: [
						receiver4 *
							[ | receiver3 |
							receiver3 _ #_coverageTracker683882_
								cover: (73 to: 83)
								declaredAt: (3 to: 13)
								by: aMultiplier.
							#_coverageTracker683882_
								coverAll:
									{85 to: 95}
								evaluating: [ receiver3 denominator ]
								thatSends: #denominator
								to: receiver3 ] value ]
					thatSends: #*
					to: receiver4 ] value ]
		thatSends: #/
		to: receiver5 ] value.! !
!Behavior method!
initalizeWith: aValue
	#_coverageTracker683891_ markAsExecuted.
	#_coverageTracker683891_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(value _ #_coverageTracker683891_
				cover: (36 to: 41)
				declaredAt: (16 to: 21)
				by: aValue).! !

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:40:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:40:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:41:03'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/12/2023 23:41:08'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/12/2023 23:41:08'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/12/2023 23:41:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/12/2023 23:41:08'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:43:43' prior: 50651699 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) ifTrue: 
		[self class with: value + anAdder integerValue]
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:51:14' prior: 50653479 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraction numerator: anAdder numerator + anAdder denominator denominator: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:51:24'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:51:24'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:52:21' prior: 50653486 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraction numerator: (anAdder numerator + anAdder denominator) denominator: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:52:25'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:52:25'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:52:39' prior: 50653503 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion numerator: (anAdder numerator + anAdder denominator) denominator: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:52:43'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:52:43'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:53:23' prior: 50653520 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion initializeWith: (anAdder numerator + anAdder denominator) over: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:53:26'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:53:26'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:53:55' prior: 50653537 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: (anAdder numerator + anAdder denominator) over: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:53:58'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:54:06' prior: 50653554 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: anAdder numerator + anAdder denominator over: anAdder denominator]! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:54:10'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/12/2023 23:54:16'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/12/2023 23:54:16'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/12/2023 23:54:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/12/2023 23:54:16'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:58:14' prior: 50651821 overrides: 50651628!
+ anAdder 
	
	(anAdder isKindOf: self class)
		ifTrue: [
			| newNumerator newDenominator |
	
			newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
			newDenominator := denominator * anAdder denominator.
	
			^newNumerator / newDenominator
		] ifFalse: [
			^anAdder * denominator integerValue + numerator integerValue / denominator integerValue
		]! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:58:28'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:58:28'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:59:31' prior: 50653716 overrides: 50651628!
+ anAdder 
	
	(anAdder isKindOf: self class)
		ifTrue: [
			| newNumerator newDenominator |
	
			newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
			newDenominator := denominator * anAdder denominator.
	
			^newNumerator / newDenominator
		] ifFalse: [
			^anAdder * denominator + numerator / denominator
		]! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/12/2023 23:59:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/12/2023 23:59:40'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/12/2023 23:59:40'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:02:06' prior: 50651693 overrides: 50651623!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: [
		^self class with: value * aMultiplier integerValue
	] ifFalse: [
		^self * aMultiplier numerator / aMultiplier denominator
	]
	! !

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:02:12'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:02:14'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:02:14'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:03:33' prior: 50651814 overrides: 50651623!
* aMultiplier 

	(aMultiplier isKindOf: self class) ifTrue: [
		^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	] ifFalse: [
		^numerator * aMultiplier / denominator
	]
	! !

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:03:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:03:43'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:03:43'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:05:07' prior: 50651711 overrides: 50651637!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [
		^Fraccion with: self over: aDivisor
	] ifFalse: [
		^self * aDivisor denominator / aDivisor numerator
	]! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:05:13'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:05:15'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:05:15'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:06:30' prior: 50651843 overrides: 50651637!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue: [
		^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)
	] ifFalse: [
		^numerator / (denominator * aDivisor)
	]! !

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:06:40'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:06:46'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:06:46'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:06:46'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:06:46'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:09:16'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:09:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:09:16'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:09:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:09:16'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:11:23' prior: 50651705 overrides: 50651632!
- aSubtrahend 

	(aSubtrahend isKindOf: self class) ifTrue: [
		^self class with: value - aSubtrahend integerValue.	
	] ifFalse: [
		^self * aSubtrahend denominator - aSubtrahend numerator / aSubtrahend denominator
	]! !

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:11:30'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:16:06' prior: 50651832 overrides: 50651632!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue: [
		| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator 
	] ifFalse: [
		^numerator - (aSubtrahend * denominator) / denominator
	]
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:16:18'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:16:18'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:28:19'!
m: aMultiplier
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:28:48' prior: 50654271!
m: aaaa
	^self class with: value * aaaa integerValue
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:19'!
m: aMultiplier 
	^self * aMultiplier numerator / aMultiplier denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:49' prior: 50653762 overrides: 50651623!
* aMultiplier 
	
	^aMultiplier m: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:54' prior: 50654288 overrides: 50651623!
* aMultiplier 
	^aMultiplier m: self
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:30:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:30:58'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:31:35' prior: 50654282!
m: aMultiplier 
	^aMultiplier * self numerator / self denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:32:15' prior: 50654277!
m: aaaa
	^aaaa class with: value * self integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:34'!
multiplyToEntero: anEntero
	^anEntero class with: value * self integerValue
	! !

!methodRemoval: Entero #m: stamp: 'LR 9/13/2023 00:38:39'!
m: aaaa
	^aaaa class with: value * self integerValue
	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:45' prior: 50654293 overrides: 50651623!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:54'!
multiplyToEntero: aMultiplier 
	^aMultiplier * self numerator / self denominator
	! !

!methodRemoval: Fraccion #m: stamp: 'LR 9/13/2023 00:38:54'!
m: aMultiplier 
	^aMultiplier * self numerator / self denominator
	!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:39:00' prior: 50654463!
multiplyToEntero: anEntero 
	^anEntero * self numerator / self denominator
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:39:10'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:39:10'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:39:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:39:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:39:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:39:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:39:11'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:39:11'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:39:11'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:39:11'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:41:35' prior: 50654473!
multiplyToEntero: anEntero 
	^anEntero * numerator / denominator
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:41:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:41:40'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:41:47'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:41:47'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:42:10'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:42:10'!
FAILURE!

oneFifth + oneHalf!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:02:06' prior: 50654458 overrides: 50651623!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: [
		^self class with: value * aMultiplier integerValue
	] ifFalse: [
		^self * aMultiplier numerator / aMultiplier denominator
	]
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:44:43'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:44:43'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:44:52' prior: 50654773 overrides: 50651623!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:44:54'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:44:54'!
FAILURE!

oneFifth + oneHalf!

(Entero with: 1) * (Entero with: 2)!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:49:08' prior: 50654448!
multiplyToEntero: anEntero
	^anEntero class with: anEntero integerValue * value
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:49:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:49:16'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:50:43'!
m: anAdder
	
	^anAdder class with: anAdder integerValue + self value! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:51:40'!
m: anAdder 
	
	^Fraccion with: anAdder numerator + anAdder denominator over: anAdder denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:53:34' prior: 50653567 overrides: 50651628!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: self * anAdder denominator + anAdder numerator over: anAdder denominator]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:53:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:53:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:53:38'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:53:38'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:55:31' prior: 50655210!
m: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:55:57' prior: 50655217 overrides: 50651628!
+ anAdder 
	
	^anAdder m: self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:55:59'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:55:59'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:55:59'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:56:55' prior: 50655205!
m: anAdder
	^anAdder class with: anAdder integerValue + self value! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:57:11' prior: 50655510!
m: anAdder
	^anAdder class with: anAdder integerValue + value! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:57:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:57:17'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:57:17'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35'!
addToEntero: anAdder
	^anAdder class with: anAdder integerValue + value! !
!Entero methodsFor: 'as yet unclassified' stamp: 'LR 9/13/2023 00:58:35' prior: 50655370 overrides: 50651628!
+ anAdder 
	
	^anAdder addToEntero: self! !

!methodRemoval: Entero #m: stamp: 'LR 9/13/2023 00:58:35'!
m: anAdder
	^anAdder class with: anAdder integerValue + value!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:47'!
addToEntero: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator! !

!methodRemoval: Fraccion #m: stamp: 'LR 9/13/2023 00:58:47'!
m: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:50' prior: 50655671!
addToEntero: anAdder 
	^Fraccion with: anAdder * denominator + numerator over: denominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 00:58:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 00:58:53'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:00:45'!
m: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:00:58'!
substractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !

!methodRemoval: Entero #m: stamp: 'LR 9/13/2023 01:00:58'!
m: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:19'!
subtractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !

!methodRemoval: Entero #substractFromEntero: stamp: 'LR 9/13/2023 01:01:19'!
substractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:37'!
subtractToEntero: anEntero 
	^anEntero * numerator / denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:02:37'!
subtractFromEntero: aMinuend 
	^aMinuend * denominator - numerator / denominator
	! !

!methodRemoval: Fraccion #subtractToEntero: stamp: 'LR 9/13/2023 01:02:40'!
subtractToEntero: anEntero 
	^anEntero * numerator / denominator
	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:03:06' prior: 50654106 overrides: 50651632!
- aSubtrahend 
	^aSubtrahend subtractFromEntero: self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 01:03:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 01:03:08'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:04:07'!
divideFromEntero: anAdder
	^Fraccion with: anAdder over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:07:49' prior: 50656007!
divideFromEntero: aDividend
	^Fraccion with: aDividend over: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:08:21'!
divideFromEntero: aDividend
	^aDividend * denominator / numerator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:08:33' prior: 50653802 overrides: 50651637!
/ aDivisor 
	aDivisor divideFromEntero: self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:08:35'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 01:08:35'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 01:08:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 01:08:36'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:09:38' prior: 50656017!
divideFromEntero: aDividend
	^aDividend * denominator / numerator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 01:09:40'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 01:09:40'!
FAILURE!

two!

two!

two:=Entero with: 2
two nil .!

(Entero with: 2) / (Entero with: 2)!

(Entero with: 2) / Entero with: 2!

(Entero with: 2) / (Entero with: 2)!

(Entero with: 2) / (Entero with: 1)!

(Entero with: 2) / (Entero with: 2)!

((Entero with: 2) / (Entero with: 2)) class!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:14:22' prior: 50656023 overrides: 50651637!
/ aDivisor 
	^aDivisor divideFromEntero: self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'LR 9/13/2023 01:14:25'!
PASSED!

----STARTUP---- (13 September 2023 23:07:10) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/cuisUniversity/Numero-Exercise.st----!

----STARTUP---- (14 September 2023 02:03:59) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/cuisUniversity/Numero-Exercise.st----!

----STARTUP---- (14 September 2023 20:52:52) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/03-Stack/Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:54:33'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:54:33'!
ERROR!
!OOStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 20:54:59'!
isEmpty
	^True! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:55:02'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:55:02'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:55:12' prior: 50658149!
isEmpty
	^true! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:55:22'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 20:56:13'!
Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:57:11'!
push: item
	items := items + item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:57:44'!
pop: item
	items := items remove: item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:58:31' prior: 50658181!
pop: item
	items := items removeLast! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:58:57' prior: 50658186!
pop: item
	^items removeLast! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:59:15' prior: 50658177!
push: item
	items add: item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:59:38' prior: 50658195!
push: item
	items add: item! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 20:59:50'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 20:59:50'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 20:59:50'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:00:24' prior: 50658159!
isEmpty
	^items isEmpty! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:00:26'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:00:37'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:00:37'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:00:45' prior: 50658236!
isEmpty
	^items empty! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:00:47'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:00:47'!
ERROR!

Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:02:51'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:02:51'!
ERROR!

items class!
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:04:38' overrides: 16785646!
new
	
	|stack|
	
	stack := super new
	stack initialize! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:05:01' overrides: 16920235!
initialize
	items := OrderedCollection new! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:05:03'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:05:03'!
ERROR!
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:06:23' prior: 50658300 overrides: 16785646!
new
	
	|stack|
	
	stack := self basicNew.
	^stack initialize! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:06:28'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:06:28'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:06:35' prior: 50658279!
isEmpty
	^items isEmpty! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:06:37'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:06:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:06:42'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:06:42'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:07:21' prior: 50658191!
pop: item
	|last|
	last := items last.
	items removeLast.
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:07:36'!
pop
	|last|
	last := items last.
	items removeLast.
	^items last! !

!methodRemoval: OOStack #pop: stamp: 'LR 9/14/2023 21:07:44'!
pop: item
	|last|
	last := items last.
	items removeLast.
	^items last!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:07:47'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:07:47'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:07:47'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:07:47'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:07:47'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:07:54'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:07:54'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:08:13'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:08:13'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:08:25' prior: 50658351!
pop
	|last|
	last := items last.
	items removeLast.
	^last! !

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:08:28'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:08:31'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:08:31'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:08:31'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:08:31'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:08:31'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:08:31'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:08:31'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:08:31'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:08:31'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:08:31'!
ERROR!

!methodRemoval: OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:10:50'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject!
!OOStackTest methodsFor: 'test' stamp: 'LR 9/14/2023 21:13:18'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject.! !

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:13:20'!
PASSED!

----STARTUP---- (14 September 2023 21:13:43) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/03-Stack/Stack-Exercise.st----!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:14:39'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:14:49'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:14:51'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:14:52'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:14:52'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:14:58'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:14:58'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:14:58'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:14:58'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:14:58'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:14:58'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:14:58'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:14:58'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:14:58'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:14:58'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:15:09'!
top
	^items last! !

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:15:13'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:15:19'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:15:19'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:15:26'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:15:26'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:15:58' overrides: 16901663!
size
	^items size! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:16:00'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:16:00'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:16:00'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:16:00'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:17:25' prior: 50658406!
pop
	|last|
	self isEmpty ifTrue: [ self error: OOStack stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:17:29'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:17:40'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:17:40'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:17:40'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:18:31' prior: 50658511!
top
	self isEmpty ifTrue: [self error: self class stackEmptyErrorDescription ].
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:18:40' prior: 50658568!
pop
	|last|
	self isEmpty ifTrue: [ self error: self class stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:18:42'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:21:51'!
PASSED!

OOStack subclass: #EmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:22:09'!
OOStack subclass: #EmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:22:14'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NonEmptyStack stamp: 'LR 9/14/2023 21:22:19'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:22:55'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:23:04'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!NonEmptyStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:24:00'!
initializeWith: item
	items := OrderedCollection new
	items add item! !
!EmptyStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:24:26' overrides: 50658615!
top
	self error: self class stackEmptyErrorDescription! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:24:42' prior: 50658615!
top
	self subclassResponsibility ! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:24:57' overrides: 50658764!
top
	^items last! !
!NonEmptyStack class methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:25:42'!
initializeWith: item
	^self new initializeWith: item! !

!methodRemoval: OOStack #initialize stamp: 'LR 9/14/2023 21:26:11'!
initialize
	items := OrderedCollection new!
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:27:00' prior: 50658317 overrides: 16785646!
new
	
	^EmptyStack initialize! !
!EmptyStack class methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:27:10' overrides: 16904184!
initialize! !
!EmptyStack class methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:27:16' prior: 50658787 overrides: 16904184!
initialize
	^self new! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:27:48' overrides: 50658329!
isEmpty
	^true! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:03' overrides: 50658329!
isEmpty
	^false! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:16' prior: 50658329!
isEmpty
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:42' overrides: 50658621!
pop
	self error: self class stackEmptyErrorDescription! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:29:04' prior: 50658621!
pop
	self subclassResponsibility ! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:29:29' overrides: 50658814!
pop
	|last|
	last := items last.
	items removeLast.
	^last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:30:31' prior: 50658199!
push: anItem
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:30:52' overrides: 50658824!
push: anItem
	^NonEmptyStack initializeWith: anItem! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:06' prior: 50658531 overrides: 16901663!
size
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:14' overrides: 50658835!
size
	^0! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:25' overrides: 50658835!
size
	^items size! !
!EmptyStack class methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:32:33' prior: 50658792 overrides: 16904184!
initialize
	^self basicNew! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:32:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:32:35'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:32:35'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:32:35'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:32:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:32:51'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:32:51'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:32:51'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:32:58'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:32:58'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:33:32'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:33:32'!
ERROR!
!NonEmptyStack class methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:33:56' prior: 50658773!
initializeWith: item
	^self basicNew initializeWith: item! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:01'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:01'!
ERROR!
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:34:25' prior: 50658753!
initializeWith: item
	items := OrderedCollection new.
	items add: item! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:34:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:28'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:34:28'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:34:28'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:34:28'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:34:28'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:34:28'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:34:28'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:34:28'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:34:28'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:34:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:35'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:34:35'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:34:35'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:34:35'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:34:35'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:34:35'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:34:35'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:34:35'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:34:35'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:39'!
FAILURE!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:34:39'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:35:40'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:35:40'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:35:40'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:35:40'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:35:40'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:35:40'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:35:40'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:35:40'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:35:40'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:35:40'!
PASSED!

items!

stack isEmpty!

	self deny: stack isEmpty true .!

stack!
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:42:58' prior: 50658782 overrides: 16785646!
new
	|stack|
	stack := self basicNew.
	stack initialize.! !
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:43:03' prior: 50659053 overrides: 16785646!
new
	|stack|
	stack := self basicNew.
	^stack initialize! !

!classRemoval: #EmptyStack stamp: 'LR 9/14/2023 21:43:07'!
OOStack subclass: #EmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack class
	instanceVariableNames: 'items'!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:43:13'!
OOStack class
	instanceVariableNames: 'items'!

OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:44:03'!
OOStack class
	instanceVariableNames: ''!

Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:44:16'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/14/2023 21:44:23'!
Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NonEmptyStack stamp: 'LR 9/14/2023 21:44:28'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:45:12' prior: 50658814!
pop
	|last|
	items isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:46:15' prior: 50658824!
push: anItem
	items add anItem! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:46:21' prior: 50659123!
push: anItem
	items add: anItem! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:46:28' prior: 50658835 overrides: 16901663!
size
	^items size! !

!methodRemoval: OOStack class #new stamp: 'LR 9/14/2023 21:49:35'!
new
	|stack|
	stack := self basicNew.
	^stack initialize!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:50:17' prior: 50658764!
top
	items isEmpty ifTrue: [self error: OOStack subclassResponsibility ].! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:50:22' prior: 50659140!
top
	items isEmpty ifTrue: [self error: OOStack subclassResponsibility ].
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:50:51' prior: 50658804!
isEmpty
	^items isEmpty! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:50:54'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:50:54'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:51:20' overrides: 16920235!
initialize
	items := OrderedCollection new! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:51:25' prior: 50659189 overrides: 16920235!
initialize
	items := OrderedCollection new
	^self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:51:27'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:51:28'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:28'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:51:40' prior: 50659194 overrides: 16920235!
initialize
	items := OrderedCollection new.
	^self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:51:41'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:41'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:41'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:51:50'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:50'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:51:50'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:51:57'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:52:14' prior: 50659146!
top
	items isEmpty ifTrue: [self error: OOStack stackEmptyErrorDescription ].
	^items last! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/14/2023 21:52:16'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/14/2023 21:52:16'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:54:09' prior: 50659115!
pop
	|last|
	items isEmpty ifTrue: [self error: self class stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:54:17' prior: 50659314!
top
	items isEmpty ifTrue: [self error: self class stackEmptyErrorDescription ].
	^items last! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 10:54:19'!
PASSED!

Object subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackBase category: 'Stack-Exercise' stamp: 'LR 9/15/2023 10:55:20'!
Object subclass: #OOStackBase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 10:56:08' prior: 50659232 overrides: 16920235!
initialize
	items := OrderedCollection new.
	items add: OOStackBase initialize
	^self! !

----STARTUP---- (15 September 2023 13:07:09) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:18'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 18:53:44'!
assertThat: actionToMeasure takesLessThan: maximumDuration

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	actionToMeasure value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (maximumDuration)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 18:57:03'!
forbiddenAction: action 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 19:01:56'!
forbiddenAction: action raises: errorMessage

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 19:05:03'!
forbiddenAction: action raises: errorMessage when: assertion

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: assertion! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 18:50:34'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assertThat: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50 * millisecond
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/4/2023 18:51:33'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	self assertThat: [customerBook removeCustomerNamed: paulMcCartney] takesLessThan: 100 * millisecond
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:19'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:19'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16920235!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:19'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'LR 9/15/2023 13:07:19'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 9/4/2023 17:02:48'!
customerAlreadyExistsErrorMessage

	^'Customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 9/4/2023 17:02:52'!
customerCanNotBeEmptyErrorMessage

	^'Customer name cannot be empty!!!!!!'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:14:36'!
assertThat: aForbiddenAction failsWith: anError andCompliesWith: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:23:54'!
assertThat: aForbiddenAction failsWith: anError andThen: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
! !

!methodRemoval: CustomerBookTest #assertThat:failsWith:andCompliesWith: stamp: 'LR 9/15/2023 13:07:19'!
assertThat: aForbiddenAction failsWith: anError andCompliesWith: postCondition
	
	[ aForbiddenAction value.
	self fail ]
		on: anError 
		do: postCondition
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:24:42' prior: 50659542!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self
		assertThat: [ customerBook addCustomerNamed: '' ]
		failsWith: Error
		andThen: 
			[ :anError | 
				self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
				self assert: customerBook isEmpty 
			]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:25:55' prior: 50659554!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)
		]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:26:06' prior: 50659774!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self
		assertThat: [ customerBook addCustomerNamed: '' ]
		failsWith: Error
		andThen: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty 
		]! !

!methodRemoval: CustomerBookTest #forbiddenAction: stamp: 'LR 9/15/2023 13:07:19'!
forbiddenAction: action 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]!

!methodRemoval: CustomerBookTest #forbiddenAction:raises: stamp: 'LR 9/15/2023 13:07:19'!
forbiddenAction: action raises: errorMessage

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]!

!methodRemoval: CustomerBookTest #forbiddenAction:raises:when: stamp: 'LR 9/15/2023 13:07:19'!
forbiddenAction: action raises: errorMessage when: assertion

	| customerBook johnLennon|
			
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook action: 'Paul McCartney'.
	self fail ]
		on: errorMessage 
		do: assertion!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:39:40'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !
!CustomerBookTest class methodsFor: 'testing' stamp: 'LR 9/5/2023 20:40:21'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/15/2023 13:07:19'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:02'!
deleteMe! !
!CustomerBookTest class methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:08'!
deleteMe! !

!methodRemoval: CustomerBookTest #deleteMe stamp: 'LR 9/15/2023 13:07:19'!
deleteMe!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:43:27'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest class #xxx: stamp: 'LR 9/15/2023 13:07:19'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!

!methodRemoval: CustomerBookTest class #deleteMe stamp: 'LR 9/15/2023 13:07:19'!
deleteMe!
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:44:42'!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/15/2023 13:07:19'!
xxx: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.


	
!
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:45:02' prior: 50659910!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	customerBook suspendCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:45:54' prior: 50659569!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:46:44' prior: 50659588!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:23'!
xxx: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:28'!
assertThat: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
! !

!methodRemoval: CustomerBookTest #xxx: stamp: 'LR 9/15/2023 13:07:19'!
xxx: aaa
	self assert: 0 equals: aaa numberOfActiveCustomers.
	self assert: 0 equals: aaa numberOfSuspendedCustomers.
	self assert: 0 equals: aaa numberOfCustomers.


	
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:48:34' prior: 50659984!
assertThat: aCustomerBook
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 0 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 0 equals: aCustomerBook numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:49:52'!
assertThat: aCustomerBook 
hasTotalCustomers: totalCount 
ofWhichActive: activeCount
andSuspended: suspendedCount

	self assert: activeCount equals: aCustomerBook numberOfActiveCustomers.
	self assert: suspendedCount equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: totalCount equals: aCustomerBook numberOfCustomers.


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:50:51' prior: 50659939!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	
	self assertThat: customerBook hasTotalCustomers: 1 ofWhichActive: 0 andSuspended: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:51:10' prior: 50659957!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assertThat: customerBook hasTotalCustomers: 0 ofWhichActive: 0 andSuspended: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:52:50' prior: 50659928!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:53:11'!
createCustomerBookWithCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := CustomerBook new.
	
	customerBook addCustomerNamed: aCustomerName.
	
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'initialization' stamp: 'LR 9/5/2023 20:55:00' prior: 50660056!
createCustomerBookWithSuspendedCustomerNamed: aCustomerName

	| customerBook |
	
	customerBook := self createCustomerBookWithCustomerNamed: aCustomerName.	
	customerBook suspendCustomerNamed: aCustomerName.
	^customerBook


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:56:46' prior: 50659529!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	paulMcCartney := 'Paul McCartney'.
	customerBook := self createCustomerBookWithCustomerNamed: paulMcCartney.
	  
	self assertThat: [customerBook removeCustomerNamed: paulMcCartney] takesLessThan: 100 * millisecond
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:57:36' prior: 50659788!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook :=  self createCustomerBookWithCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)
		]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 20:58:15' prior: 50659609!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:02:27'!
xxx: aCustomerBook gg: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:02:42'!
assertThat: aCustomerBook onlyContainsACustomerNamed: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
! !

!methodRemoval: CustomerBookTest #xxx:gg: stamp: 'LR 9/15/2023 13:07:19'!
xxx: aCustomerBook gg: aaa
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aaa).
!
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:03:02' prior: 50660135!
assertThat: aCustomerBook onlyContainsACustomerNamed: aCustomerName
	self assert: aCustomerBook numberOfCustomers = 1.
	self assert: (aCustomerBook includesCustomerNamed: aCustomerName).
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:03:30' prior: 50660113!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:18' prior: 50660097!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook :=  self createCustomerBookWithCustomerNamed: johnLennon.
	
	self
		assertThat: [ customerBook removeCustomerNamed: 'Paul McCartney' ]
		failsWith: NotFound 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:55' prior: 50660159!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	self assertThat: [ customerBook suspendCustomerNamed: 'George Harrison' ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:04:58' prior: 50660187!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithCustomerNamed: johnLennon.
	
	self 
		assertThat: [ customerBook suspendCustomerNamed: 'George Harrison' ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:06:29' prior: 50659625!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:07:27' prior: 50660216!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	self assertThat: [ customerBook suspendCustomerNamed: johnLennon ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'LR 9/5/2023 21:07:31' prior: 50660232!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
	johnLennon := 'John Lennon'.
	customerBook := self createCustomerBookWithSuspendedCustomerNamed: johnLennon.
	
	self 
		assertThat: [ customerBook suspendCustomerNamed: johnLennon ]
		failsWith: CantSuspend 
		andThen: [ self assertThat: customerBook onlyContainsACustomerNamed: johnLennon ]
! !

!methodRemoval: CustomerBookTest #assertThat: stamp: 'LR 9/15/2023 13:07:19'!
assertThat: aCustomerBook
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 0 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 0 equals: aCustomerBook numberOfCustomers.


	
!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:19'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:19'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50660586!
* aMultiplier 
	
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50660591!
+ anAdder 
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:40:37' overrides: 50660595!
- aSubtrahend 
	
	^ self class with: value - aSubtrahend integerValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50660600!
/ aDivisor 
	
	^Fraccion with: self over: aDivisor! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55'!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:47:50'!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16901788!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 16902975!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' overrides: 50660614!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50660618!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50660622!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24'!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2016 22:53'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50660586!
* aMultiplier 
	
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50660591!
+ anAdder 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:43:50' overrides: 50660595!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50660600!
/ aDivisor 
	
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50660614!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50660618!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50660622!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:20'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'NR 9/23/2018 23:45:19'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:43:43' prior: 50660666 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) ifTrue: 
		[self class with: value + anAdder integerValue]
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:51:14' prior: 50660903 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraction numerator: anAdder numerator + anAdder denominator denominator: anAdder denominator]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:52:21' prior: 50660910 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraction numerator: (anAdder numerator + anAdder denominator) denominator: anAdder denominator]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:52:39' prior: 50660921 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion numerator: (anAdder numerator + anAdder denominator) denominator: anAdder denominator]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:53:23' prior: 50660932 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion initializeWith: (anAdder numerator + anAdder denominator) over: anAdder denominator]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:53:55' prior: 50660943 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: (anAdder numerator + anAdder denominator) over: anAdder denominator]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:54:06' prior: 50660954 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: anAdder numerator + anAdder denominator over: anAdder denominator]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:58:14' prior: 50660792 overrides: 50660591!
+ anAdder 
	
	(anAdder isKindOf: self class)
		ifTrue: [
			| newNumerator newDenominator |
	
			newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
			newDenominator := denominator * anAdder denominator.
	
			^newNumerator / newDenominator
		] ifFalse: [
			^anAdder * denominator integerValue + numerator integerValue / denominator integerValue
		]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:59:31' prior: 50660974 overrides: 50660591!
+ anAdder 
	
	(anAdder isKindOf: self class)
		ifTrue: [
			| newNumerator newDenominator |
	
			newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
			newDenominator := denominator * anAdder denominator.
	
			^newNumerator / newDenominator
		] ifFalse: [
			^anAdder * denominator + numerator / denominator
		]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:02:06' prior: 50660660 overrides: 50660586!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: [
		^self class with: value * aMultiplier integerValue
	] ifFalse: [
		^self * aMultiplier numerator / aMultiplier denominator
	]
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:03:33' prior: 50660785 overrides: 50660586!
* aMultiplier 

	(aMultiplier isKindOf: self class) ifTrue: [
		^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	] ifFalse: [
		^numerator * aMultiplier / denominator
	]
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:05:07' prior: 50660678 overrides: 50660600!
/ aDivisor 
	
	(aDivisor isKindOf: self class) ifTrue: [
		^Fraccion with: self over: aDivisor
	] ifFalse: [
		^self * aDivisor denominator / aDivisor numerator
	]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:06:30' prior: 50660814 overrides: 50660600!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue: [
		^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)
	] ifFalse: [
		^numerator / (denominator * aDivisor)
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:11:23' prior: 50660672 overrides: 50660595!
- aSubtrahend 

	(aSubtrahend isKindOf: self class) ifTrue: [
		^self class with: value - aSubtrahend integerValue.	
	] ifFalse: [
		^self * aSubtrahend denominator - aSubtrahend numerator / aSubtrahend denominator
	]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:16:06' prior: 50660803 overrides: 50660595!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue: [
		| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator 
	] ifFalse: [
		^numerator - (aSubtrahend * denominator) / denominator
	]
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:28:19'!
m: aMultiplier
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:28:48' prior: 50661069!
m: aaaa
	^self class with: value * aaaa integerValue
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:19'!
m: aMultiplier 
	^self * aMultiplier numerator / aMultiplier denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:49' prior: 50661005 overrides: 50660586!
* aMultiplier 
	
	^aMultiplier m: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:30:54' prior: 50661086 overrides: 50660586!
* aMultiplier 
	^aMultiplier m: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:31:35' prior: 50661080!
m: aMultiplier 
	^aMultiplier * self numerator / self denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:32:15' prior: 50661075!
m: aaaa
	^aaaa class with: value * self integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:34'!
multiplyToEntero: anEntero
	^anEntero class with: value * self integerValue
	! !

!methodRemoval: Entero #m: stamp: 'LR 9/15/2023 13:07:21'!
m: aaaa
	^aaaa class with: value * self integerValue
	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:45' prior: 50661091 overrides: 50660586!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:38:54'!
multiplyToEntero: aMultiplier 
	^aMultiplier * self numerator / self denominator
	! !

!methodRemoval: Fraccion #m: stamp: 'LR 9/15/2023 13:07:21'!
m: aMultiplier 
	^aMultiplier * self numerator / self denominator
	!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:39:00' prior: 50661122!
multiplyToEntero: anEntero 
	^anEntero * self numerator / self denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:41:35' prior: 50661132!
multiplyToEntero: anEntero 
	^anEntero * numerator / denominator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:02:06' prior: 50661117 overrides: 50660586!
* aMultiplier 
	
	(aMultiplier isKindOf: self class) ifTrue: [
		^self class with: value * aMultiplier integerValue
	] ifFalse: [
		^self * aMultiplier numerator / aMultiplier denominator
	]
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:44:52' prior: 50661144 overrides: 50660586!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:49:08' prior: 50661107!
multiplyToEntero: anEntero
	^anEntero class with: anEntero integerValue * value
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:50:43'!
m: anAdder
	
	^anAdder class with: anAdder integerValue + self value! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:51:40'!
m: anAdder 
	
	^Fraccion with: anAdder numerator + anAdder denominator over: anAdder denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:53:34' prior: 50660964 overrides: 50660591!
+ anAdder 
	
	^(anAdder isKindOf: self class) 
		ifTrue: [self class with: value + anAdder integerValue]
		ifFalse: [Fraccion with: self * anAdder denominator + anAdder numerator over: anAdder denominator]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:55:31' prior: 50661170!
m: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:55:57' prior: 50661177 overrides: 50660591!
+ anAdder 
	
	^anAdder m: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:56:55' prior: 50661165!
m: anAdder
	^anAdder class with: anAdder integerValue + self value! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:57:11' prior: 50661198!
m: anAdder
	^anAdder class with: anAdder integerValue + value! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35'!
addToEntero: anAdder
	^anAdder class with: anAdder integerValue + value! !
!Entero methodsFor: 'as yet unclassified' stamp: 'LR 9/13/2023 00:58:35' prior: 50661194 overrides: 50660591!
+ anAdder 
	
	^anAdder addToEntero: self! !

!methodRemoval: Entero #m: stamp: 'LR 9/15/2023 13:07:21'!
m: anAdder
	^anAdder class with: anAdder integerValue + value!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:47'!
addToEntero: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator! !

!methodRemoval: Fraccion #m: stamp: 'LR 9/15/2023 13:07:21'!
m: anAdder 
	
	^Fraccion with: anAdder * denominator + numerator over: denominator!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:50' prior: 50661223!
addToEntero: anAdder 
	^Fraccion with: anAdder * denominator + numerator over: denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:00:45'!
m: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:00:58'!
substractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !

!methodRemoval: Entero #m: stamp: 'LR 9/15/2023 13:07:21'!
m: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:19'!
subtractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !

!methodRemoval: Entero #substractFromEntero: stamp: 'LR 9/15/2023 13:07:21'!
substractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:37'!
subtractToEntero: anEntero 
	^anEntero * numerator / denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:02:37'!
subtractFromEntero: aMinuend 
	^aMinuend * denominator - numerator / denominator
	! !

!methodRemoval: Fraccion #subtractToEntero: stamp: 'LR 9/15/2023 13:07:21'!
subtractToEntero: anEntero 
	^anEntero * numerator / denominator
	!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:03:06' prior: 50661044 overrides: 50660595!
- aSubtrahend 
	^aSubtrahend subtractFromEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:04:07'!
divideFromEntero: anAdder
	^Fraccion with: anAdder over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:07:49' prior: 50661287!
divideFromEntero: aDividend
	^Fraccion with: aDividend over: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:08:21'!
divideFromEntero: aDividend
	^aDividend * denominator / numerator
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:08:33' prior: 50661025 overrides: 50660600!
/ aDivisor 
	aDivisor divideFromEntero: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:09:38' prior: 50661297!
divideFromEntero: aDividend
	^aDividend * denominator / numerator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:14:22' prior: 50661303 overrides: 50660600!
/ aDivisor 
	^aDivisor divideFromEntero: self! !

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:21'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:21'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11' prior: 50660292!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50660297!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50660302!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50660307!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50660312!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18' prior: 50660317!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20' prior: 50660322!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38' prior: 50660327!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52' prior: 50660341!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56' prior: 50660350!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50660358!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50660365!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50' prior: 50660371!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52' prior: 50660377!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57' prior: 50660383!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59' prior: 50660389!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38' prior: 50660395!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39' prior: 50660400!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40' prior: 50660405!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50660411!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50660417!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43' prior: 50660423!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50660428!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50660437!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50660446!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50660451!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35' prior: 50660455!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41' prior: 50660460!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00' prior: 50660466!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05' prior: 50660471!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08' prior: 50660478!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48' prior: 50660486!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01' prior: 50660491!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14' prior: 50660496!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23' prior: 50660505!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32' prior: 50660510!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39' prior: 50660515!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47' prior: 50660525!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55' prior: 50660534!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03' prior: 50660539!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11' prior: 50660544!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17' prior: 50660550!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' prior: 50660557 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50660586!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50660591!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28' prior: 50660595!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50660600!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50660605!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13' prior: 50660610!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49' prior: 50660614!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50660618!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50660622!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02' prior: 50660635!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09' prior: 50660640!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:44:52' prior: 50661154 overrides: 50661657!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35' prior: 50661215 overrides: 50661662!
+ anAdder 
	
	^anAdder addToEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:03:06' prior: 50661282 overrides: 50661667!
- aSubtrahend 
	^aSubtrahend subtractFromEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:14:22' prior: 50661314 overrides: 50661672!
/ aDivisor 
	^aDivisor divideFromEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55' prior: 50660683!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35' prior: 50661209!
addToEntero: anAdder
	^anAdder class with: anAdder integerValue + value! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:07:49' prior: 50661292!
divideFromEntero: aDividend
	^Fraccion with: aDividend over: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:47:50' prior: 50660688!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00' prior: 50660699!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:49:08' prior: 50661159!
multiplyToEntero: anEntero
	^anEntero class with: anEntero integerValue * value
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:19' prior: 50661255!
subtractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' prior: 50660705 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' prior: 50660711 overrides: 16901788!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09' prior: 50660715!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02' prior: 50660719!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' prior: 50660727 overrides: 16902975!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' prior: 50660731 overrides: 50661687!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50660735 overrides: 50661692!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50660739 overrides: 50661696!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24' prior: 50660751!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2016 22:53' prior: 50660758!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:03:33' prior: 50661015 overrides: 50661657!
* aMultiplier 

	(aMultiplier isKindOf: self class) ifTrue: [
		^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	] ifFalse: [
		^numerator * aMultiplier / denominator
	]
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/12/2023 23:59:31' prior: 50660990 overrides: 50661662!
+ anAdder 
	
	(anAdder isKindOf: self class)
		ifTrue: [
			| newNumerator newDenominator |
	
			newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
			newDenominator := denominator * anAdder denominator.
	
			^newNumerator / newDenominator
		] ifFalse: [
			^anAdder * denominator + numerator / denominator
		]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:16:06' prior: 50661055 overrides: 50661667!
- aSubtrahend 
	
	(aSubtrahend isKindOf: self class) ifTrue: [
		| newNumerator newDenominator |
		
		newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
		newDenominator := denominator * aSubtrahend denominator.
		
		^newNumerator / newDenominator 
	] ifFalse: [
		^numerator - (aSubtrahend * denominator) / denominator
	]
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:06:30' prior: 50661034 overrides: 50661672!
/ aDivisor 

	(aDivisor isKindOf: self class) ifTrue: [
		^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)
	] ifFalse: [
		^numerator / (denominator * aDivisor)
	]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:50' prior: 50661234!
addToEntero: anAdder 
	^Fraccion with: anAdder * denominator + numerator over: denominator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:09:38' prior: 50661308!
divideFromEntero: aDividend
	^aDividend * denominator / numerator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:41:35' prior: 50661138!
multiplyToEntero: anEntero 
	^anEntero * numerator / denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:02:37' prior: 50661271!
subtractFromEntero: aMinuend 
	^aMinuend * denominator - numerator / denominator
	! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' prior: 50660820 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' prior: 50660828 overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50660832!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50660836!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54' prior: 50660840!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' prior: 50660855 overrides: 50661687!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' prior: 50660859 overrides: 50661692!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' prior: 50660863 overrides: 50661696!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' prior: 50660867 overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'NR 9/23/2018 23:45:19' prior: 50660881!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11' prior: 50661340!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50661345!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50661351!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13' prior: 50661356!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50661362!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18' prior: 50661368!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20' prior: 50661374!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38' prior: 50661380!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52' prior: 50661394!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56' prior: 50661403!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50661411!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07' prior: 50661419!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50' prior: 50661426!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52' prior: 50661432!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57' prior: 50661438!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59' prior: 50661444!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38' prior: 50661450!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39' prior: 50661456!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40' prior: 50661462!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50661468!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42' prior: 50661474!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43' prior: 50661480!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50661486!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46' prior: 50661496!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50661506!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50' prior: 50661511!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35' prior: 50661516!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41' prior: 50661522!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00' prior: 50661528!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05' prior: 50661534!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08' prior: 50661542!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48' prior: 50661550!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01' prior: 50661556!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14' prior: 50661562!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23' prior: 50661572!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32' prior: 50661577!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39' prior: 50661582!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47' prior: 50661592!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55' prior: 50661602!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03' prior: 50661608!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11' prior: 50661614!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17' prior: 50661621!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' prior: 50661628 overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50661657!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50661662!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28' prior: 50661667!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50661672!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48' prior: 50661677!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13' prior: 50661683!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49' prior: 50661687!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50661692!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49' prior: 50661696!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02' prior: 50661709!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09' prior: 50661715!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:22'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:44:52' prior: 50661735 overrides: 50662390!
* aMultiplier 
	^aMultiplier multiplyToEntero: self
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35' prior: 50661741 overrides: 50662395!
+ anAdder 
	
	^anAdder addToEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:03:06' prior: 50661746 overrides: 50662400!
- aSubtrahend 
	^aSubtrahend subtractFromEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:14:22' prior: 50661752 overrides: 50662405!
/ aDivisor 
	^aDivisor divideFromEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55' prior: 50661757!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:35' prior: 50661762!
addToEntero: anAdder
	^anAdder class with: anAdder integerValue + value! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 18:04:31'!
addToFraccion: anAdder
	^self * anAdder denominator + anAdder numerator / anAdder denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:07:49' prior: 50661768!
divideFromEntero: aDividend
	^Fraccion with: aDividend over: self
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:37:18'!
divideFromFraccion: aDividend
	^aDividend numerator / (self * aDividend denominator)
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:55:33' prior: 50661774!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00' prior: 50661786!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:54:30' prior: 50661792!
multiplyToEntero: anEntero
	^Entero with: anEntero integerValue * value
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:28:21'!
multiplyToFraccion: aMultiplier
	^aMultiplier numerator * self / aMultiplier denominator! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 21:12:27'!
over: aDivisor
	|greatestCommonDivisor numerator denominator|
	
	greatestCommonDivisor := self greatestCommonDivisorWith: aDivisor. 
	numerator := self // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	^denominator simplifiedFraccion: numerator.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 21:57:19'!
over: aDenominator assignTo: aFraccion

	aDenominator sub: self assignTo: aFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 21:12:27'!
simplifiedFraccion: numerator

	^Fraccion new initializeWith: numerator over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 20:58:03'!
sub: aDividend

	^aDividend over: self
	
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 22:00:45'!
sub: aNumerator assignTo: aFraccion
		
		aFraccion unsafeInitializeWith: aNumerator over: self 	
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:01:19' prior: 50661798!
subtractFromEntero: aMinuend
	^aMinuend class with: aMinuend integerValue - value.	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 18:10:28'!
subtractFromFraccion: aMinuend
	^aMinuend numerator - (self * aMinuend denominator) / aMinuend denominator! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' prior: 50661805 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' prior: 50661812 overrides: 16901788!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09' prior: 50661816!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02' prior: 50661821!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' prior: 50661829 overrides: 16902975!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' prior: 50661834 overrides: 50662420!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' prior: 50661839 overrides: 50662425!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' prior: 50661844 overrides: 50662429!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24' prior: 50661857!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'BR 9/13/2023 19:55:37' prior: 50661864!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero initialize].
	(aValue = 1) ifTrue: [^Uno initialize].
	(aValue < 0) ifTrue: [^Negativo with: aValue].
	 
	^self new initalizeWith: aValue! !

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:53:31' overrides: 50662517!
fibonacci
	^(Entero with: 1)! !
!Cero methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:50:22'!
initializeCero
	value := 0! !
!Cero methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:58:03' overrides: 50662542!
over: aDivisor
	^self! !
!Cero methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 21:50:59' overrides: 50662554!
over: aDividend assignTo: aFraccion

	self error: 'una fraccion no puede ser cero'! !
!Cero methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:43:51' overrides: 50662566!
sub: aDividend
	^self error: self class canNotDivideByZeroErrorDescription! !

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Cero class
	instanceVariableNames: ''!

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Cero class
	instanceVariableNames: ''!
!Cero class methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:50:35' overrides: 16904184!
initialize

	^self new initializeCero.! !

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Negativo methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 19:55:00' overrides: 50662517!
fibonacci
	^self error: Entero negativeFibonacciErrorDescription ! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 19:33:06'!
initializeWith: aValue
	value := aValue! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:43:51' overrides: 50662566!
sub: aDividend
	 ^aDividend negated / self negated! !

!classDefinition: 'Negativo class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Negativo class
	instanceVariableNames: ''!

!classDefinition: 'Negativo class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Negativo class
	instanceVariableNames: ''!
!Negativo class methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 21:05:10' overrides: 50662649!
with: aValue

	^self new initalizeWith: aValue! !

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:53:51' overrides: 50662517!
fibonacci
	^(Entero with: 1)! !
!Uno methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:52:23'!
initializeUno
	value := 1! !
!Uno methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 21:12:27' overrides: 50662560!
simplifiedFraccion: numerator
	^numerator! !
!Uno methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 21:55:19' overrides: 50662570!
sub: aNumerator assignTo: aFraccion
			 
		self error: 'una fraccion no puede tener denominador 1 porque sino es un entero'.! !

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Uno class
	instanceVariableNames: ''!

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Uno class
	instanceVariableNames: ''!
!Uno class methodsFor: 'as yet unclassified' stamp: 'BR 9/13/2023 20:51:41' overrides: 16904184!
initialize

	^self new initializeUno.! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:23:27' prior: 50661891 overrides: 50662390!
* aMultiplier 

	^aMultiplier multiplyToFraccion: self
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 18:00:06' prior: 50661901 overrides: 50662395!
+ anAdder 

	^anAdder addToFraccion: self! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 18:11:05' prior: 50661916 overrides: 50662400!
- aSubtrahend 
	
	^aSubtrahend subtractFromFraccion: self
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:32:57' prior: 50661932 overrides: 50662405!
/ aDivisor 

	^aDivisor divideFromFraccion: self
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:58:50' prior: 50661941!
addToEntero: anAdder 
	^Fraccion with: anAdder * denominator + numerator over: denominator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 17:47:23'!
addToFraccion: anAdder 
		| newNumerator newDenominator |
	
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	
		^newNumerator / newDenominator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:09:38' prior: 50661947!
divideFromEntero: aDividend
	^aDividend * denominator / numerator! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:31:07'!
divideFromFraccion: aDividend
	^(denominator * aDividend numerator) / (numerator * aDividend denominator) ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 00:41:35' prior: 50661953!
multiplyToEntero: anEntero 
	^anEntero * numerator / denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 19:19:13'!
multiplyToFraccion: aMultiplier 
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LR 9/13/2023 01:02:37' prior: 50661959!
subtractFromEntero: aMinuend 
	^aMinuend * denominator - numerator / denominator
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'BR 9/13/2023 18:14:28'!
subtractFromFraccion: aMinuend 
	| newNumerator newDenominator |
		
	newNumerator := (denominator * aMinuend numerator) - (numerator * aMinuend denominator).
	newDenominator := denominator * aMinuend denominator.
		
	^newNumerator / newDenominator

	! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' prior: 50661966 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' prior: 50661974 overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50661979!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56' prior: 50661983!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'BR 9/13/2023 21:51:31' prior: 50661987!
initializeWith: aNumerator over: aDenominator
	aNumerator over: aDenominator assignTo: self.

	
! !
!Fraccion methodsFor: 'initialization' stamp: 'BR 9/13/2023 21:36:08'!
unsafeInitializeWith: aNumerator over: aDenominator

	numerator := aNumerator.
	denominator := aDenominator 

	
! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' prior: 50662003 overrides: 50662420!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' prior: 50662008 overrides: 50662425!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' prior: 50662012 overrides: 50662429!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' prior: 50662016 overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'BR 9/13/2023 20:44:07' prior: 50662031!
with: aDividend over: aDivisor

	
	^aDivisor sub: aDividend.
	

	! !

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:29:55'!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:01'!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:09'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'test' stamp: 'NR 9/16/2021 17:40:17'!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:20'!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:24'!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:26'!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'NR 5/13/2020 13:30:31'!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'HAW 4/14/2017 22:48:44'!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
OOStack class
	instanceVariableNames: ''!

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
OOStack class
	instanceVariableNames: ''!
!OOStack class methodsFor: 'error descriptions' stamp: 'NR 9/14/2023 08:12:21'!
stackEmptyErrorDescription
	
	^ 'stack is empty!!!!!!'! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 20:54:59'!
isEmpty
	^True! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:55:12' prior: 50663132!
isEmpty
	^true! !

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:23'!
Object subclass: #OOStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:57:11'!
push: item
	items := items + item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:57:44'!
pop: item
	items := items remove: item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:58:31' prior: 50663157!
pop: item
	items := items removeLast! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:58:57' prior: 50663162!
pop: item
	^items removeLast! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:59:15' prior: 50663153!
push: item
	items add: item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 20:59:38' prior: 50663171!
push: item
	items add: item! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:00:24' prior: 50663136!
isEmpty
	^items isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:00:45' prior: 50663179!
isEmpty
	^items empty! !
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:04:38' overrides: 16785646!
new
	
	|stack|
	
	stack := super new
	stack initialize! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:05:01' overrides: 16920235!
initialize
	items := OrderedCollection new! !
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:06:23' prior: 50663187 overrides: 16785646!
new
	
	|stack|
	
	stack := self basicNew.
	^stack initialize! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:06:35' prior: 50663183!
isEmpty
	^items isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:07:21' prior: 50663167!
pop: item
	|last|
	last := items last.
	items removeLast.
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:07:36'!
pop
	|last|
	last := items last.
	items removeLast.
	^items last! !

!methodRemoval: OOStack #pop: stamp: 'LR 9/15/2023 13:07:24'!
pop: item
	|last|
	last := items last.
	items removeLast.
	^items last!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:08:25' prior: 50663212!
pop
	|last|
	last := items last.
	items removeLast.
	^last! !

!methodRemoval: OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 13:07:24'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject!
!OOStackTest methodsFor: 'test' stamp: 'LR 9/14/2023 21:13:18'!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:15:09'!
top
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:15:58' overrides: 16901663!
size
	^items size! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:17:25' prior: 50663222!
pop
	|last|
	self isEmpty ifTrue: [ self error: OOStack stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:18:31' prior: 50663244!
top
	self isEmpty ifTrue: [self error: self class stackEmptyErrorDescription ].
	^items last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:18:40' prior: 50663252!
pop
	|last|
	self isEmpty ifTrue: [ self error: self class stackEmptyErrorDescription ].
	last := items last.
	items removeLast.
	^last! !

!classDefinition: #EmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #EmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #EmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NonEmptyStack stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NonEmptyStack category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:07:24'!
OOStack subclass: #NonEmptyStack
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!NonEmptyStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:24:00'!
initializeWith: item
	items := OrderedCollection new
	items add item! !
!EmptyStack methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:24:26' overrides: 50663260!
top
	self error: self class stackEmptyErrorDescription! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:24:42' prior: 50663260!
top
	self subclassResponsibility ! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:24:57' overrides: 50663346!
top
	^items last! !
!NonEmptyStack class methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:25:42'!
initializeWith: item
	^self new initializeWith: item! !

!methodRemoval: OOStack #initialize stamp: 'LR 9/15/2023 13:07:24'!
initialize
	items := OrderedCollection new!
!OOStack class methodsFor: 'error descriptions' stamp: 'LR 9/14/2023 21:27:00' prior: 50663198 overrides: 16785646!
new
	
	^EmptyStack initialize! !
!EmptyStack class methodsFor: 'no messages' stamp: 'LR 9/14/2023 21:27:10' overrides: 16904184!
initialize! !
!EmptyStack class methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:27:16' prior: 50663369 overrides: 16904184!
initialize
	^self new! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:27:48' overrides: 50663203!
isEmpty
	^true! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:03' overrides: 50663203!
isEmpty
	^false! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:16' prior: 50663203!
isEmpty
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:28:42' overrides: 50663266!
pop
	self error: self class stackEmptyErrorDescription! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:29:04' prior: 50663266!
pop
	self subclassResponsibility ! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:29:29' overrides: 50663396!
pop
	|last|
	last := items last.
	items removeLast.
	^last! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:30:31' prior: 50663175!
push: anItem
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:30:52' overrides: 50663406!
push: anItem
	^NonEmptyStack initializeWith: anItem! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:06' prior: 50663248 overrides: 16901663!
size
	self subclassResponsibility ! !
!EmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:14' overrides: 50663417!
size
	^0! !
!NonEmptyStack methodsFor: 'as yet unclassified' stamp: 'LR 9/14/2023 21:31:25' overrides: 50663417!
size
	^items size! !

----STARTUP---- (15 September 2023 13:07:27) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/cuisUniversity/Stack-Exercise.st----!
!OOStackBase methodsFor: 'no messages' stamp: 'LR 9/15/2023 13:08:55'!
popFrom: aStack
	self error: OOStack stackEmptyErrorDescription ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 13:09:33' prior: 50663575!
isEmpty
	^items size = 1! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 13:10:45' prior: 50663579!
pop
	^items last popFrom: self! !

Object subclass: #OOStackItem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackItem category: 'Stack-Exercise' stamp: 'LR 9/15/2023 13:11:45'!
Object subclass: #OOStackItem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 13:12:13' prior: 50663586!
push: anItem
	items add: (OOStackItem of: anItem)! !
!OOStackItem class methodsFor: 'no messages' stamp: 'LR 9/15/2023 13:12:57'!
of: anItem
	^self new initializeWith: anItem! !

Object subclass: #OOStackItem
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackItem category: 'Stack-Exercise' stamp: 'LR 9/15/2023 14:42:18'!
Object subclass: #OOStackItem
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackItem methodsFor: 'nil' stamp: 'LR 9/15/2023 14:42:46'!
initializeWith: aValue
	value := aValue! !
!OOStackItem methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:42:55' prior: 50663682!
initializeWith: aValue
	value := aValue
	^self! !
!OOStackItem methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:43:49'!
popFrom: aStack
	^aStack popNonEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:44:45'!
popNonEmpty
	| item |
	item := items last.
	items removeLast.
	^item value! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:45:03' prior: 50663591 overrides: 16901663!
size
	^items size - 1! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:45:21' prior: 50663594!
top
	^items last top! !
!OOStackBase methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:45:59'!
top
	self error: OOStack stackEmptyErrorDescription ! !
!OOStackItem methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:46:13'!
top
	^value! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:49:21'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 14:49:28'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 14:49:28'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:49:43' prior: 50663569 overrides: 16920235!
initialize
	items := OrderedCollection new.
	items add: OOStackBase initialize.
	^self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 14:49:46'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:49:46'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 14:49:52'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 14:49:52'!
ERROR!
!OOStackItem methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:50:03' prior: 50663687!
initializeWith: aValue
	value := aValue.
	^self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 14:50:04'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 14:50:04'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 14:50:04'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:50:04'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 14:50:04'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:50:04'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 14:50:04'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:50:04'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 14:50:04'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 14:50:04'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:50:10'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:50:10'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:51:22'!
FAILURE!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 14:51:22'!
FAILURE!

item!

items!

items last!

item!

items last!

items!

item!

item value!

items last!

stack := OOStack new.!

stack items!

stack size!

stack class!

stack push: 1!

stack push: 1!

stack push: 1!

stack push: 1!

stack pop!

stack pop!

 an OOStackItem .!

stack pop!

stack pop!

stack pop!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 14:58:25' prior: 50663696!
popNonEmpty
	| lastItem |
	lastItem := items last.
	items removeLast.
	^lastItem value! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 19:16:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 19:16:13'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 19:16:13'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:16:13'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 19:16:14'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:16:14'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 19:16:14'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:16:14'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 19:16:14'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:16:14'!
ERROR!

pushedObject!

stack!

stack size!

items last!

items!

lastItem!

items!

lastItem!

lastItem value!

lastItem class!
!OOStackItem methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:18:47' overrides: 16902254!
value
	^value! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 19:18:49'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:18:49'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 19:18:49'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:18:49'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 19:18:54'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:18:54'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 19:18:54'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:18:54'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:19:44'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:19:44'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:20:01'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:20:01'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:21:03' prior: 50663758 overrides: 16920235!
initialize
	items := OrderedCollection new.
	items add: OOStackBase new.
	^self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'LR 9/15/2023 19:21:08'!
PASSED!

'aaa' class selectors!

Object class class!

Class selectors!

Class classPool!

'' class!
!SentenceFinderByPrefix methodsFor: 'nil' stamp: 'LR 9/15/2023 19:47:08'!
findByPrefix: aPrefix in: aCollection! !
!SentenceFinderByPrefixTest methodsFor: 'nil' stamp: 'LR 9/15/2023 19:49:11'!
testStackHasNoItems
	| stack |
	stack := OOStack new
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:49:16' prior: 50664033!
testStackHasNoItems
	| stack |
	stack := OOStack new.
	! !

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stacks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 19:49:43'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stacks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'aStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 19:49:53'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'aStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 19:50:20'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NameOfSubclass category: 'Stack-Exercise' stamp: 'LR 9/15/2023 19:51:00'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NameOfSubclass stamp: 'LR 9/15/2023 19:51:07'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'LR 9/15/2023 19:51:13'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'sentenceFinder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:51:32'!
setup
	sentenceFinder := SentenceFinderByPrefix new! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:51:55' prior: 50664039!
testStackHasNoItems
	| stack |
	stack := OOStack new.
	sentenceFinder class
	! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:52:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:52:07'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:53:08' prior: 50664131!
testStackHasNoItems
	| stack |
	stack := OOStack new.
	self assertTrue: (sentenceFinder findByPrefix: 'prefix' in: stack) isEmpty
	! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:39'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:39'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:53:48' overrides: 16961394!
setUp
	sentenceFinder := SentenceFinderByPrefix new! !

!methodRemoval: SentenceFinderByPrefixTest #setup stamp: 'LR 9/15/2023 19:53:49'!
setup
	sentenceFinder := SentenceFinderByPrefix new!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:51'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:53:51'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:54:14' prior: 50664144!
testStackHasNoItems
	| stack |
	stack := OOStack new.
	self assertTrue: true
	! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:54:20'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:54:20'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:55:15' prior: 50664181!
testStackHasNoItems
	| stack |
	stack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'prefix' in: stack) isEmpty
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:55:22' prior: 50664194!
testStackHasNoItems
	| aStack |
	aStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'prefix' in: aStack) isEmpty
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:55:32' prior: 50664202!
testStackHasNoItems
	| anEmptyStack |
	anEmptyStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'prefix' in: anEmptyStack) isEmpty
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:55:48' prior: 50664210!
testStackHasNoItems
	| anEmptyStack |
	anEmptyStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack) isEmpty
	! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:56:09'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:56:09'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:56:30' prior: 50664029!
findByPrefix: aPrefix in: aCollection
	^true! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:56:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:56:32'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:56:42' prior: 50664234!
findByPrefix: aPrefix in: aCollection
	^OrderedCollection new! !

!testRun: #SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:56:44'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:57:16'!
testEmptyResultWhenStackHasNoItems
	| anEmptyStack |
	anEmptyStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack) isEmpty
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 19:58:56'!
testFindSingleResultInStackWithOneItem
	| anEmptyStack |
	anEmptyStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack) isEmpty
	! !

!methodRemoval: SentenceFinderByPrefixTest #testStackHasNoItems stamp: 'LR 9/15/2023 19:59:03'!
testStackHasNoItems
	| anEmptyStack |
	anEmptyStack := OOStack new.
	self assert: (sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack) isEmpty
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:03:47' prior: 50664263!
testFindSingleResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := OOStack new.
	aStackWithOneSentence push: sentence.
	
	
	
	self assert: (sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence) size equals: 1! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:04:48' prior: 50664280!
testFindSingleResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := OOStack new.
	aStackWithOneSentence push: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences has: sentence)! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:05:39' prior: 50664293!
testFindSingleResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := OOStack new.
	aStackWithOneSentence push: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:05:49' prior: 50664254!
testEmptyResultWhenStackHasNoItems
	| anEmptyStack |
	anEmptyStack := OOStack new.
	
	
	
	self assert: (sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack) isEmpty
	! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:06:25' prior: 50664325!
testEmptyResultWhenStackHasNoItems
	| anEmptyStack foundSentences |
	anEmptyStack := OOStack new.
	
	foundSentences := sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack.
	
	self assert: foundSentences isEmpty
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:08:52' prior: 50664245!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence |
	
	complyingSentences := OrderedCollection new.
	poppedSentence := complyingSentences pop.
	^poppedSentence beginsWith: aPrefix! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:09:36' prior: 50664345!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence |
	
	complyingSentences := OrderedCollection new.
	poppedSentence := aStack pop.
	(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:09:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:09:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:09:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:09:57'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:09:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:09:57'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:11:05' prior: 50664355!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence |
	
	complyingSentences := OrderedCollection new.
	aStack isEmpty ifFalse: [
		poppedSentence := aStack pop.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
	].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:11:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:11:08'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:14:09'!
testStackRemainsUntouchedAfterLookingForPrefixes
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := OOStack new.
	aStackWithOneSentence push: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: aStackWithOneSentence size equals: 1.
	self assert: aStackWithOneSentence top equals: sentence! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:14:30' prior: 50664409!
testStackRemainsUntouchedAfterLookingForPrefixes
	| aStackWithOneSentence sentence |
	sentence := 'Winter is here'.
	aStackWithOneSentence := OOStack new.
	aStackWithOneSentence push: sentence.
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: aStackWithOneSentence size equals: 1.
	self assert: aStackWithOneSentence top equals: sentence! !
!SentenceFinderByPrefixTest methodsFor: 'nil' stamp: 'LR 9/15/2023 20:17:44'!
stackWithSentence: aSentence
	| aStack |
	aStack := OOStack new.
	aStack push: aSentence.
	^aStack! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:18:44' prior: 50664309!
testFindSingleResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:19:11' prior: 50664426!
testStackRemainsUntouchedAfterLookingForPrefixes
	| aStackWithOneSentence sentence |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: aStackWithOneSentence size equals: 1.
	self assert: aStackWithOneSentence top equals: sentence! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:20:19'!
testFindNoResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:20:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindNoResultInStackWithOneItem stamp: 'LR 9/15/2023 20:20:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:20:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/15/2023 20:20:26'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/15/2023 20:20:26'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:20:56' prior: 50664389!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence |
	
	complyingSentences := OrderedCollection new.
	aStack isEmpty ifFalse: [
		poppedSentence := aStack pop.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
		aStack push: poppedSentence.
	].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:20:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindNoResultInStackWithOneItem stamp: 'LR 9/15/2023 20:20:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:20:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/15/2023 20:20:59'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:23:40'!
testFindTwoResultsInStackWithThreeItems
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:23:58'!
testEmptyResultWhenStackHasNoSentences
	| anEmptyStack foundSentences |
	anEmptyStack := OOStack new.
	
	foundSentences := sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack.
	
	self assert: foundSentences isEmpty
	! !

!methodRemoval: SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoItems stamp: 'LR 9/15/2023 20:23:58'!
testEmptyResultWhenStackHasNoItems
	| anEmptyStack foundSentences |
	anEmptyStack := OOStack new.
	
	foundSentences := sentenceFinder findByPrefix: 'some prefix' in: anEmptyStack.
	
	self assert: foundSentences isEmpty
	!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:24:08'!
testFindNoResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty! !

!methodRemoval: SentenceFinderByPrefixTest #testFindNoResultInStackWithOneItem stamp: 'LR 9/15/2023 20:24:08'!
testFindNoResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:24:17'!
testFindSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !

!methodRemoval: SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneItem stamp: 'LR 9/15/2023 20:24:17'!
testFindSingleResultInStackWithOneItem
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:24:24'!
testFindTwoResultsInStackWithThreeSentences
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !

!methodRemoval: SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeItems stamp: 'LR 9/15/2023 20:24:24'!
testFindTwoResultsInStackWithThreeItems
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)!
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:29:50' prior: 50664631!
testFindTwoResultsInStackWithThreeSentences
	| aStackWithThreeSentences foundSentences |
	aStackWithThreeSentences := self stackWithSentence: 'Winter is here'.
	aStackWithThreeSentences push: 'here is Winter'.
	aStackWithThreeSentences push: 'Winter here is'.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithThreeSentences.
	
	self assert: foundSentences size equals: 2.
	self assert: foundSentences includes: 'Winter is here'.
	self assert: foundSentences includes: 'Winter is here'.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'LR 9/15/2023 20:31:36' prior: 50664661!
testFindTwoResultsInStackWithThreeSentences
	| aStackWithThreeSentences foundSentences |
	aStackWithThreeSentences := self stackWithSentence: 'Winter is here'.
	aStackWithThreeSentences push: 'here is Winter'.
	aStackWithThreeSentences push: 'Winter here is'.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithThreeSentences.
	
	self assert: foundSentences size equals: 2.
	self assert: foundSentences includes: 'Winter is here'.
	self assert: foundSentences includes: 'Winter here is'.! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/15/2023 20:41:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindNoResultInStackWithOneSentence stamp: 'LR 9/15/2023 20:41:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneSentence stamp: 'LR 9/15/2023 20:41:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/15/2023 20:41:18'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/15/2023 20:41:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/15/2023 20:41:18'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/16/2023 11:44:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindNoResultInStackWithOneSentence stamp: 'LR 9/16/2023 11:44:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 11:44:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 11:44:20'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/16/2023 11:44:20'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 11:44:20'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 11:47:58' prior: 50664510!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	aStack isEmpty ifFalse: [
		poppedSentence := aStack pop.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
		aStack push: poppedSentence.
	].
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 11:50:22' prior: 50664747!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[ aStack isEmpty ] whileFalse: [
		poppedSentence := aStack pop.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
		auxiliaryStack push: poppedSentence.
	].
	[ auxiliaryStack isEmpty ] whileFalse: [
		poppedSentence := auxiliaryStack pop.
		aStack push: poppedSentence.
	].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/16/2023 11:50:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindNoResultInStackWithOneSentence stamp: 'LR 9/16/2023 11:50:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 11:50:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 11:50:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/16/2023 11:50:26'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:00:58'!
testLookingForPrefixesDoesntModifyTheStack
	| aStackWithOneSentence sentence |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: aStackWithOneSentence size equals: 1.
	self assert: aStackWithOneSentence top equals: sentence! !

!methodRemoval: SentenceFinderByPrefixTest #testStackRemainsUntouchedAfterLookingForPrefixes stamp: 'LR 9/16/2023 12:00:58'!
testStackRemainsUntouchedAfterLookingForPrefixes
	| aStackWithOneSentence sentence |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: aStackWithOneSentence size equals: 1.
	self assert: aStackWithOneSentence top equals: sentence!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:01:35'!
testEmptyResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty! !

!methodRemoval: SentenceFinderByPrefixTest #testFindNoResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:01:35'!
testFindNoResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:01:43'!
testSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)! !

!methodRemoval: SentenceFinderByPrefixTest #testFindSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:01:43'!
testFindSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: (foundSentences includes: sentence)!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:01:52'!
testTwoResultsInStackWithThreeSentences
	| aStackWithThreeSentences foundSentences |
	aStackWithThreeSentences := self stackWithSentence: 'Winter is here'.
	aStackWithThreeSentences push: 'here is Winter'.
	aStackWithThreeSentences push: 'Winter here is'.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithThreeSentences.
	
	self assert: foundSentences size equals: 2.
	self assert: foundSentences includes: 'Winter is here'.
	self assert: foundSentences includes: 'Winter here is'.! !

!methodRemoval: SentenceFinderByPrefixTest #testFindTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 12:01:52'!
testFindTwoResultsInStackWithThreeSentences
	| aStackWithThreeSentences foundSentences |
	aStackWithThreeSentences := self stackWithSentence: 'Winter is here'.
	aStackWithThreeSentences push: 'here is Winter'.
	aStackWithThreeSentences push: 'Winter here is'.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithThreeSentences.
	
	self assert: foundSentences size equals: 2.
	self assert: foundSentences includes: 'Winter is here'.
	self assert: foundSentences includes: 'Winter here is'.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:14:25' prior: 50664763!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[ aStack isEmpty ] whileFalse: [
		poppedSentence := aStack pop.
		auxiliaryStack push: poppedSentence.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
	].
	[ auxiliaryStack isEmpty ] whileFalse: [
		poppedSentence := auxiliaryStack pop.
		aStack push: poppedSentence.
	].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:14:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/16/2023 12:14:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/16/2023 12:14:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:14:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 12:14:27'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:16:44'!
popFrom: stackToPopFrom into: stackToPushTo

	| poppedSentence |
	poppedSentence := stackToPopFrom pop.
	stackToPushTo push: poppedSentence.
	^poppedSentence! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:17:44' prior: 50664925!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[ aStack isEmpty ] whileFalse: [
		poppedSentence := self popFrom: aStack into: auxiliaryStack.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
	].
	[ auxiliaryStack isEmpty ] whileFalse: [
		self popFrom: auxiliaryStack into: aStack
	].
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:17:45' prior: 50664972!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[ aStack isEmpty ] whileFalse: [
		poppedSentence := self popFrom: aStack into: auxiliaryStack.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ].
	].
	[ auxiliaryStack isEmpty ] whileFalse: [
		self popFrom: auxiliaryStack into: aStack
	].
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:17:48' prior: 50664991!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[ aStack isEmpty ] whileFalse: [
		poppedSentence := self popFrom: aStack into: auxiliaryStack.
		(poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ]
	].
	[ auxiliaryStack isEmpty ] whileFalse: [
		self popFrom: auxiliaryStack into: aStack
	].
	^complyingSentences! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:17:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/16/2023 12:17:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/16/2023 12:17:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:17:51'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 12:17:51'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:25:04'!
popAllFrom: aStackToPopFrom into: aStackToPushTo andForEach: aClosureForASentence
	| poppedSentence |
	[ aStackToPopFrom isEmpty ] whileFalse: [
		poppedSentence := self popFrom: aStackToPopFrom into: aStackToPushTo.
		[] 
	]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:26:51' prior: 50665047!
popAllFrom: aStackToPopFrom into: aStackToPushTo andForEach: aClosureForASentence
	| poppedSentence |
	[ aStackToPopFrom isEmpty ] whileFalse: [
		poppedSentence := self popFrom: aStackToPopFrom into: aStackToPushTo.
		aClosureForASentence value: poppedSentence
	]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:29:22' prior: 50665010!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
"	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence (poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ]]."
"	self popAllFrom: auxiliaryStack into: aStack"
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:34:47' prior: 50665070!
findByPrefix: aPrefix in: aStack
	| complyingSentences poppedSentence auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :oppedSentence | (oppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: oppedSentence ]].
"	self popAllFrom: auxiliaryStack into: aStack"
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:34:56' prior: 50665087!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | (poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ]].
"	self popAllFrom: auxiliaryStack into: aStack"
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:35:00' prior: 50665103!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | (poppedSentence beginsWith: aPrefix) ifTrue: [ complyingSentences add: poppedSentence ]].
	self popAllFrom: auxiliaryStack into: aStack
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:35:17'!
popAllFrom: stackToPopFrom into: stackToPushTo

	| poppedSentence |
	poppedSentence := stackToPopFrom pop.
	stackToPushTo push: poppedSentence.
	^poppedSentence! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:36:46' prior: 50665134!
popAllFrom: stackToPopFrom into: stackToPushTo
	^true! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:36:57' prior: 50665143!
popAllFrom: stackToPopFrom into: stackToPushTo
	self popAllFrom: stackToPopFrom into: stackToPushTo andForEach: []! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:38:37'!
addSentence: aSentence to: aCollection ifItStartsWithPrefix: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:39:16' prior: 50665119!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | self addSentence: poppedSentence to: complyingSentences ifItStartsWithPrefix: aPrefix].
	self popAllFrom: auxiliaryStack into: aStack
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:39:31'!
addSentence: aSentence to: aCollection ifItStartsWith: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:39:31' prior: 50665164!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | self addSentence: poppedSentence to: complyingSentences ifItStartsWith: aPrefix].
	self popAllFrom: auxiliaryStack into: aStack
	^complyingSentences! !

!methodRemoval: SentenceFinderByPrefix #addSentence:to:ifItStartsWithPrefix: stamp: 'LR 9/16/2023 12:39:31'!
addSentence: aSentence to: aCollection ifItStartsWithPrefix: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:39:48'!
addSentence: aSentence to: aCollection ifItBeginsWith: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:39:48' prior: 50665187!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | self addSentence: poppedSentence to: complyingSentences ifItBeginsWith: aPrefix].
	self popAllFrom: auxiliaryStack into: aStack
	^complyingSentences! !

!methodRemoval: SentenceFinderByPrefix #addSentence:to:ifItStartsWith: stamp: 'LR 9/16/2023 12:39:48'!
addSentence: aSentence to: aCollection ifItStartsWith: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]!
!SentenceFinderByPrefix methodsFor: 'nil' stamp: 'LR 9/16/2023 12:39:48'!
addSentence: aSentence to: aCollection ifItStartsWith: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]! !

!methodRemoval: SentenceFinderByPrefix #addSentence:to:ifItStartsWith: stamp: 'LR 9/16/2023 12:39:58'!
addSentence: aSentence to: aCollection ifItStartsWith: aPrefix
	(aSentence beginsWith: aPrefix) ifTrue: [ aCollection add: aSentence ]!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:40:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/16/2023 12:40:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/16/2023 12:40:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:40:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/16/2023 12:40:32'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:40:42'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:40:42'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:41:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/16/2023 12:41:06'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'LR 9/16/2023 12:41:35' prior: 50665218!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | self addSentence: poppedSentence to: complyingSentences ifItBeginsWith: aPrefix].
	self popAllFrom: auxiliaryStack into: aStack.
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'main' stamp: 'LR 9/16/2023 12:46:34' prior: 50665289!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | 
		self addSentence: poppedSentence to: complyingSentences ifItBeginsWith: aPrefix
	].
	self popAllFrom: auxiliaryStack into: aStack.
	^complyingSentences! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:53:02'!
assertThat: aStack onlyHas: aSentence
	! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:53:33' prior: 50664801!
testLookingForPrefixesDoesntModifyTheStack
	| aStackWithOneSentence sentence |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assertThat: aStackWithOneSentence onlyHas: sentence.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:53:46' prior: 50665319!
assertThat: aStack onlyHas: aSentence
	
	self assert: aStack size equals: 1.
	self assert: aStack top equals: aSentence! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/16/2023 12:54:03' prior: 50664856!
testSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assertThat: foundSentences onlyHas: sentence! !

----STARTUP---- (18 September 2023 09:37:23) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/03-Stack/Stack-Exercise.st----!
!SentenceFinderByPrefix methodsFor: 'main' stamp: 'LR 9/18/2023 09:49:02' prior: 50665689!
findByPrefix: aPrefix in: aStack
	| complyingSentences auxiliaryStack |
	self validatePrefix: aPrefix.
	complyingSentences := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self popAllFrom: aStack into: auxiliaryStack andForEach: [ :poppedSentence | 
		self addSentence: poppedSentence to: complyingSentences ifItBeginsWith: aPrefix
	].
	self popAllFrom: auxiliaryStack into: aStack.
	^complyingSentences! !
!SentenceFinderByPrefix methodsFor: 'auxiliary' stamp: 'LR 9/18/2023 09:53:11'!
validatePrefix: aPrefix
	((aPrefix = '') or: (aPrefix includesSubString: '')) ifTrue: [
		self error: self class InvalidPrefixErrorDescription
	]! !
!SentenceFinderByPrefix class methodsFor: 'no messages' stamp: 'LR 9/18/2023 09:54:04'!
invalidPrefixErrorDescription
	self error: 'A prefix cannot be blank or contain spaces'! !
!SentenceFinderByPrefix methodsFor: 'auxiliary' stamp: 'LR 9/18/2023 09:54:17' prior: 50665756!
validatePrefix: aPrefix
	((aPrefix = '') or: (aPrefix includesSubString: '')) ifTrue: [
		self error: self class invalidPrefixErrorDescription
	]! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'LR 9/18/2023 09:54:30' prior: 50665764!
invalidPrefixErrorDescription
	'A prefix cannot be blank or contain spaces'! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 09:56:25'!
testCannotUseInvalidPrefixes
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'here' in: aStackWithOneSentence.
	
	self assert: foundSentences isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 09:57:55' prior: 50665784!
testCannotUseInvalidPrefixes
	self should: sentenceFinder ! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 09:58:49' prior: 50665797!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self should: sentenceFinder ! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 09:59:34' prior: 50665802!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self 
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'LR 9/18/2023 10:00:35' prior: 50665779!
invalidPrefixErrorDescription
	^'A prefix cannot be blank or contain spaces'! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:01:37' prior: 50665809!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self 
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | error message = SentenceFinderByPrefix class ]! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:02:03' prior: 50665824!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self 
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | error message = SentenceFinderByPrefix class invalidPrefixErrorDescription ]! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:02:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:02:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:02:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:02:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:02:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:02:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:02:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:02:24'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:05:48' prior: 50665834!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | error message = SentenceFinderByPrefix class invalidPrefixErrorDescription ]! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:05:50'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:05:50'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:06:04'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:06:12'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:06:21'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:06:21'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'auxiliary' stamp: 'LR 9/18/2023 10:07:21' prior: 50665711!
popAllFrom: stackToPopFrom into: stackToPushTo
	self popAllFrom: stackToPopFrom into: stackToPushTo andForEach: [:x | ]! !

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:07:25'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:07:30'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:07:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:07:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:07:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:07:30'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:07:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:07:48'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:07:48'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:12:30' prior: 50665522!
testSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	OrderedCollection new 
	self assert: foundSentences size equals: 1.
	self assert: foundSentences last equals: sentence! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:12:34'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:12:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:12:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:12:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:12:34'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:12:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:12:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:12:41'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:12:53' prior: 50665946!
testSingleResultInStackWithOneSentence
	| aStackWithOneSentence sentence foundSentences |
	sentence := 'Winter is here'.
	aStackWithOneSentence := self stackWithSentence: sentence.
	
	foundSentences := sentenceFinder findByPrefix: 'Win' in: aStackWithOneSentence.
	
	self assert: foundSentences size equals: 1.
	self assert: foundSentences last equals: sentence! !

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:12:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:12:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:13:00'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:13:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:13:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:13:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:13:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:13:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:13:00'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:13:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:13:06'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:20:52' prior: 50665874!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | 
			error messageText = SentenceFinderByPrefix class invalidPrefixErrorDescription
		]! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:20:56'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:20:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:20:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:20:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:20:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:20:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:20:56'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:21:25' prior: 50666046!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | 
			error messageText = (SentenceFinderByPrefix class invalidPrefixErrorDescription)
		]! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:21:29'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:21:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:21:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:21:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:21:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:21:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:21:29'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:21:40' prior: 50666083!
testCannotUseInvalidPrefixes
	| aStack |
	aStack := OOStack new.
	self
		should: [ sentenceFinder findByPrefix: '' in: aStack ]
		raise: Error
		withExceptionDo: [:error | 
			error messageText = (SentenceFinderByPrefix invalidPrefixErrorDescription)
		]! !

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:21:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:21:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:21:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:21:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:21:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:21:42'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:22:37' prior: 50665510!
testLookingForPrefixesDoesntModifyTheStack
	| aStackWithTwoSentences firstSentence |
	firstSentence := 'Winter is here'.
	aStackWithTwoSentences := self stackWithSentence: firstSentence.
	
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithTwoSentences.
	
	self assertThat: aStackWithTwoSentences onlyHas: firstSentence.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'LR 9/18/2023 10:24:11' prior: 50666154!
testLookingForPrefixesDoesntModifyTheStack
	| aStackWithTwoSentences firstSentence secondSentence |
	firstSentence := 'Winter is here'.
	secondSentence := 'winter is here'.
	aStackWithTwoSentences := self stackWithSentence: firstSentence.
	aStackWithTwoSentences push: secondSentence.	
	
	sentenceFinder findByPrefix: 'Win' in: aStackWithTwoSentences.
	
	self assert: aStackWithTwoSentences pop equals: secondSentence.
	self assert: aStackWithTwoSentences pop equals: firstSentence.! !

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:24:21'!
PASSED!

!methodRemoval: SentenceFinderByPrefixTest #assertThat:onlyHas: stamp: 'LR 9/18/2023 10:24:24'!
assertThat: aStack onlyHas: aSentence
	
	self assert: aStack size equals: 1.
	self assert: aStack top equals: aSentence!

!testRun: #SentenceFinderByPrefixTest #testCannotUseInvalidPrefixes stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testEmptyResultWhenStackHasNoSentences stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testLookingForPrefixesDoesntModifyTheStack stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testSingleResultInStackWithOneSentence stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #testTwoResultsInStackWithThreeSentences stamp: 'LR 9/18/2023 10:24:28'!
PASSED!

----STARTUP---- (20 September 2023 23:17:32) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/00-Naturales/Naturales.st----!

----STARTUP---- (25 September 2023 12:45:23) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/Downloads/Solucion 2/Stack-Solution-3 caja gris.st----!

!classRemoval: #SentenceFinderByPrefix stamp: 'LR 9/25/2023 12:46:33'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'prefix stack auxiliaryReversedStack foundSentences'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #OOStack stamp: 'LR 9/25/2023 12:46:33'!
Object subclass: #OOStack
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'LR 9/25/2023 12:46:34'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

!classRemoval: #OOStackTest stamp: 'LR 9/25/2023 12:46:34'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Solution-3'!

----End fileIn of /Users/lucas.rango/Downloads/Solucion 2/Stack-Solution-2.st----!

----End fileIn of /Users/lucas.rango/Downloads/Naturales.st----!

----STARTUP---- (2 October 2023 09:57:38) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/2023-2c/02-Numeros/Solucion/Numero-Solution-4.st----!

----STARTUP---- (2 October 2023 13:47:22) as /Users/lucas.rango/workspace/cuisUniversity/CuisUniversity-5981.image!


----End fileIn of /Users/lucas.rango/workspace/fceyn/isw1/04-BabySteps/TDDBabyStepsGame.st----!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'LR 10/2/2023 15:42:06'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:42:12'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:14'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:43:21'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:43:39' prior: 50671063!
asRot13
	^$n! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:51'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:43:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:51'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:43:51'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:43:51'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:45:21' prior: 50671067!
asRot13
	self = $m ifTrue: [ ^$z ].
	^$n! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:45:24'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:46:22' prior: 50671113!
asRot13
	^Character asciiValue: self asciiValue + 13! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:32'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:46:32'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:32'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:32'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:46:32'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:46:32'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:47:06' prior: 50671122!
asRot13
	self = $n ifTrue: [ ^ $a ].
	^Character asciiValue: self asciiValue + 13! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:47:17'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:47:17'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:17'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:47:47' prior: 50671173!
asRot13
	self = $n ifTrue: [ ^ $a ].
	self = $z ifTrue: [ ^ $m ].
	^Character asciiValue: self asciiValue + 13! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:47:52'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:50:07' prior: 50671238!
asRot13
	self = $n ifTrue: [ ^ $a ].
	self = $z ifTrue: [ ^ $m ].
	^Character asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [self asciiValue - 13] ifFalse: [ self asciiValue + 13 ])! !
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:50:11' prior: 50671267!
asRot13
	^Character asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [self asciiValue - 13] ifFalse: [ self asciiValue + 13 ])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:15'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:50:42' prior: 50671277!
asRot13
	^Character asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		self asciiValue - 13
	] ifFalse: [ 
		self asciiValue + 13 
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:46'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:50:49'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:50:49'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:50:49'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:50:49'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:50:49'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:50:49'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:51:26' prior: 50671303!
asRot13
	self = $` ifTrue: [^self].
	^Character asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		self asciiValue - 13
	] ifFalse: [ 
		self asciiValue + 13 
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:51:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:51:31'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:51:31'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:51:31'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:51:31'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 15:51:31'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:51:31'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:51:48' prior: 50671371!
asRot13
	self = $` ifTrue: [^self].
	self = ${ ifTrue: [^self].
	^Character asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		self asciiValue - 13
	] ifFalse: [ 
		self asciiValue + 13 
	])! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:51:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:51:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:51:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:51:55'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:52:39' prior: 50671447!
asRot13
	^self class asciiValue: ((self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		self asciiValue - 13
	] ifFalse: [ 
		self asciiValue + 13 
	])
	
	^self! !
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:56:12' prior: 50671485!
asRot13
	^self class asciiValue: ((self asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
		(self asciiValue between: $n and: $z) ifTrue: [
			^self asciiValue - 13
		] ifFalse: [ 
			^self asciiValue + 13 
		]
	] ifFalse: [
		self asciiValue
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:16'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:16'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:16'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:16'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:56:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:56:16'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:56:24' prior: 50671494!
asRot13
	^self class asciiValue: ((self asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
		(self asciiValue between: $n and: $z) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	] ifFalse: [
		self asciiValue
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:56:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:56:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:56:28'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:56:57' prior: 50671530!
asRot13
	^Character asciiValue: ((self asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
		(self asciiValue between: $n and: $z) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	] ifFalse: [
		self asciiValue
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:57:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:57:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:57:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:57:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:57:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:57:00'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:58:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:58:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:58:32'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 15:58:58' prior: 50671566!
asRot13
	^Character asciiValue: ((self asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
		(self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	] ifFalse: [
		self asciiValue
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:59:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 15:59:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:59:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 15:59:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 15:59:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 15:59:01'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:00:23' prior: 50671615!
asRot13
	(self asciiValue between: $a asciiValue and: $z asciiValue) ifFalse: [
		^self
	].
	^Character asciiValue: ((self asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
		(self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	])! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:00:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:00:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:00:33'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:00:33'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:00:33'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:00:33'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:03:15' prior: 50671652!
asRot13
	(self asciiValue between: $a asciiValue and: $z asciiValue) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:03:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:03:20'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:04:46' prior: 50671748!
asRot13
	((self asciiValue between: $a asciiValue and: $z asciiValue) or: (self asciiValue between: $A asciiValue and: $M asciiValue)) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(self asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:04:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:04:48'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:06:03' prior: 50671793!
asRot13
	| asciiValue |
	asciiValue := self asciiValue.
	
	(
		(asciiValue between: $a asciiValue and: $z asciiValue) or: 
		(asciiValue between: $A asciiValue and: $M asciiValue)
	) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:06:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:07:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:07:01'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:07:01'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:07:01'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:08:18' prior: 50671835!
asRot13
	| asciiValue |
	asciiValue := self asciiValue.
	
	(
		(asciiValue between: $a asciiValue and: $z asciiValue) or: 
		(asciiValue between: $A asciiValue and: $Z asciiValue)
	) ifFalse: [
		^self
	].
	^Character asciiValue: (
		((asciiValue between: $n asciiValue and: $z asciiValue) or: (asciiValue between: $A asciiValue and: $Z asciiValue)) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:20'!
FAILURE!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:08:36' prior: 50671970!
asRot13
	| asciiValue |
	asciiValue := self asciiValue.
	
	(
		(asciiValue between: $a asciiValue and: $z asciiValue) or: 
		(asciiValue between: $A asciiValue and: $Z asciiValue)
	) ifFalse: [
		^self
	].
	^Character asciiValue: (
		((asciiValue between: $n asciiValue and: $z asciiValue) or: (asciiValue between: $N asciiValue and: $Z asciiValue)) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:08:39'!
PASSED!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 16:09:49' prior: 50672025!
asRot13
	| asciiValue |
	asciiValue := self asciiValue.
	
	(
		(asciiValue between: $a asciiValue and: $z asciiValue) or: 
		(asciiValue between: $A asciiValue and: $Z asciiValue)
	) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(
			(asciiValue between: $n asciiValue and: $z asciiValue) or:
			(asciiValue between: $N asciiValue and: $Z asciiValue)
		) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 16:09:55'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:09:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 16:09:55'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 16:09:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 16:09:55'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 16:09:55'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:32:56' prior: 50672075!
asRot13
	| asciiValue |
	asciiValue := self asciiValue.
	
	(self asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(
			(asciiValue between: $n asciiValue and: $z asciiValue) or:
			(asciiValue between: $N asciiValue and: $Z asciiValue)
		) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:33:18' prior: 50672182!
asRot13
	
	(self asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(
			(self asciiValue between: $n asciiValue and: $z asciiValue) or:
			(self asciiValue between: $N asciiValue and: $Z asciiValue)
		) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:33:20'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:33:20'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:33:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:33:28'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:33:28'!
ERROR!
!Character methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:34:10' prior: 50672197!
asRot13
	
	(self asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifFalse: [
		^self
	].
	^Character asciiValue: (
		(
			(self asLowercase asciiValue between: $n asciiValue and: $z asciiValue)
		) ifTrue: [
			self asciiValue - 13
		] ifFalse: [ 
			self asciiValue + 13 
		]
	)! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:34:13'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:34:13'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:37:00'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:37:00'!
ERROR!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:37:10'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:37:33' prior: 50672351!
asRot13
	^ ''! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:37:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:37:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:39:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:39:29'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:39:29'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:39:29'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:39:29'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:39:29'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:39:29'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:41:49' prior: 50672355!
asRot13
	(self = 'a') ifTrue: [ ^'n' ].
	(self = 'Z') ifTrue: [ ^'M' ].
	(self = 'n') ifTrue: [ ^'a' ].	
	(self = '{') ifTrue: [ ^'{' ].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:41:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:41:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:41:52'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:42:03' prior: 50672471!
asRot13
	(self = 'a') ifTrue: [ ^'n' ].
	(self = 'M') ifTrue: [ ^'Z' ].
	(self = 'n') ifTrue: [ ^'a' ].	
	(self = '{') ifTrue: [ ^'{' ].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:42:06'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:42:06'!
PASSED!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:42:23' prior: 50672522!
asRot13
	^self first asRot13 asString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:42:26'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:42:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:42:26'!
ERROR!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:42:51' prior: 50672570!
asRot13
	(self isEmpty) ifTrue: [^''].
	^self first asRot13 asString ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:42:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:42:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:42:56'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:42:56'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:42:56'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:42:56'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:42:56'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:42:56'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:44:02' prior: 50672618!
asRot13
	(self isEmpty) ifTrue: [
		^''
	].
	(self size = 1) ifTrue: [
		^self first asRot13 asString
	].
	^self first asRot13 asString, (self at: 1) asRot13 asString! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:44:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:44:04'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:44:04'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:44:11' prior: 50672728!
asRot13
	(self isEmpty) ifTrue: [
		^''
	].
	(self size = 1) ifTrue: [
		^self first asRot13 asString
	].
	^self first asRot13 asString, (self at: 2) asRot13 asString! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:44:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:44:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:44:29'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:44:29'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:44:29'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:44:29'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:44:29'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:44:29'!
FAILURE!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:45:58' prior: 50672784!
asRot13
	(self isEmpty) ifTrue: [
		^''
	].
	(self size = 1) ifTrue: [
		^self first asRot13 asString
	].
	(self size = 2) ifTrue: [
		^self first asRot13 asString, (self at: 2) asRot13 asString
	].
	^self collect: [:aChar | aChar asRot13]! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'LR 10/2/2023 17:46:01'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'LR 10/2/2023 17:46:01'!
PASSED!
!String methodsFor: 'rot13' stamp: 'LR 10/2/2023 17:46:08' prior: 50672906!
asRot13
	^self collect: [:aChar | aChar asRot13]! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:46:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:46:13'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'LR 10/2/2023 17:46:13'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'LR 10/2/2023 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'LR 10/2/2023 17:46:21'!
PASSED!

----SNAPSHOT----(2 October 2023 17:57:37) CuisUniversity-5981.image priorSource: 10197292!