

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (17 October 2023 20:01:46) as /home/bruno/Downloads/linux64(3)/linux64/CuisUniversity-5981.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BR 10/17/2023 20:03:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BR 10/17/2023 20:03:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:14:37' prior: 50650980!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register : 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 100.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:14:41' prior: 50651144!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register : 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:14:44'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:14:44'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:14:56' prior: 50651160!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:14:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:17:00'!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:19:53' prior: 50651202!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio|
	
	portfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	Deposit register: 100 on: childAccount.
	
	portfolio registerAccount: childAccount.
	portfolio registerAccount: childPortfolio. 
	self assert: portfolio balance equals: 100.
	! !

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:19:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:21:04' prior: 50651218!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio|
	
	portfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	Deposit register: 100 on: childAccount.
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 100.
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 20:21:44'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 20:21:40'!
registerPortfolio: aPortfolio 
	portfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:21:57'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:21:57'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'BR 10/17/2023 20:22:25' prior: 50651099 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 20:22:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:22:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:22:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:24:35' prior: 50651237!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	portfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	grandchildAccount := ReceptiveAccount new.
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	childPortfolio registerAccount: grandchildAccount .
	
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:24:38'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:24:38'!
FAILURE!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 20:26:38' prior: 50651057!
balance
	^self accountsBalance + self portfoliosBalance.
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 20:27:18'!
accountsBalance
	^accounts sum: [:account | account balance] ifEmpty: [0].
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 20:27:30'!
portfoliosBalance
	^accounts sum: [:account | account balance] ifEmpty: [0].
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 20:28:03' prior: 50651326!
portfoliosBalance
	^portfolios sum: [:portfolio | portfolios balance] ifEmpty: [0].
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 20:28:08' prior: 50651332!
portfoliosBalance
	^portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 20:28:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:28:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:28:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:28:55'!
anAccount
	|portfolio childAccount childPortfolio grandchildAccount|
	
	portfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	grandchildAccount := ReceptiveAccount new.
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	childPortfolio registerAccount: grandchildAccount .
	
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!methodRemoval: PortfolioTest #anAccount stamp: 'BR 10/17/2023 20:29:16'!
anAccount
	|portfolio childAccount childPortfolio grandchildAccount|
	
	portfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	grandchildAccount := ReceptiveAccount new.
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	childPortfolio registerAccount: grandchildAccount .
	
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	!
!PortfolioTest class methodsFor: 'no messages' stamp: 'BR 10/17/2023 20:42:04'!
createPortfolioWithAccount: anAccount
	||! !
!PortfolioTest class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:42:15' prior: 50651390!
createPortfolioWithAccount: anAccount
	|aPortfolio|! !
!PortfolioTest class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:42:47' prior: 50651395!
createPortfolioWithAccount: anAccount
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	aPortfolio registerAccount: anAccount.
	
	^aPortfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:46:13' prior: 50651289!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	childPortfolio := Portfolio new.
	portfolio := PortfolioTest createPortfolioWithAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	childPortfolio registerAccount: grandchildAccount .
	
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:47:02' prior: 50651408!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithAccount: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	childPortfolio registerAccount: grandchildAccount .
	
	
	portfolio registerAccount: childAccount.
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:48:07' prior: 50651430!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithAccount: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:48:08'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 20:48:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:48:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:48:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:49:18' prior: 50651183!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithAccount: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio registerAccount: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:49:26' prior: 50651487!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithAccount: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio registerAccount: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	
	portfolio registerAccount: anAccount.
	portfolio registerAccount: anotherAccount. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 20:49:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:33'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:33'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 20:49:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:38'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:49:38'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:50:06'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:50:06'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:51:40'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:51:40'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:52:03'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:52:03'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:52:13'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:52:13'!
FAILURE!

PortfolioTest createPortfolioWithAccount: anAccount!

portfolio registerAccount: anotherAccount.!

	portfolio registerAccount: anotherAccount.
!

PortfolioTest createPortfolioWithAccount: anAccount!

anAccount := ReceptiveAccount new!

portfolio := PortfolioTest createPortfolioWithAccount: anAccount!

anotherAccount := ReceptiveAccount new!

portfolio registerAccount: anotherAccount.!

portfolio!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 20:57:44' prior: 50651507!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithAccount: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio registerAccount: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 20:57:46'!
PASSED!

Object subclass: #FinancialEntity
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:04:26'!
Object subclass: #FinancialEntity
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:05:04'!
Object subclass: #FinancialEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:05:17'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:05:46'!
FinancialEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialEntity methodsFor: 'nil' stamp: 'BR 10/17/2023 21:06:41'!
balance
	self subclassResponsibility ! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:07:01'!
register: aFinancialEntity
	self subclassResponsibility ! !

!methodRemoval: FinancialEntity #register: stamp: 'BR 10/17/2023 21:09:20'!
register: aFinancialEntity
	self subclassResponsibility !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 21:12:51' prior: 50651316 overrides: 50651671!
balance
	^accounts sum: [:financialEntity | financialEntity balance] ifEmpty: [0].
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:13:43'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/17/2023 21:13:38' prior: 50651685 overrides: 50651671!
balance
	^financialEntities sum: [:financialEntity | financialEntity balance] ifEmpty: [0].
	! !

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/17/2023 21:13:55'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #accountsBalance stamp: 'BR 10/17/2023 21:14:15'!
accountsBalance
	^accounts sum: [:account | account balance] ifEmpty: [0].
	!

!methodRemoval: Portfolio #portfoliosBalance stamp: 'BR 10/17/2023 21:14:17'!
portfoliosBalance
	^portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0].
	!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 21:14:43'!
register: aFinancialEntity 
	financialEntities add: aFinancialEntity.! !

!methodRemoval: Portfolio #registerAccount: stamp: 'BR 10/17/2023 21:14:47'!
registerAccount: anAccount 
	accounts add: anAccount.!

!methodRemoval: Portfolio #registerPortfolio: stamp: 'BR 10/17/2023 21:14:49'!
registerPortfolio: aPortfolio 
	portfolios add: aPortfolio.!
!Portfolio methodsFor: 'initialization' stamp: 'BR 10/17/2023 21:15:01' prior: 50651272 overrides: 16920235!
initialize
	financialEntities := OrderedCollection new.! !
!PortfolioTest class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:15:33' prior: 50651400!
createPortfolioWithAccount: anAccount
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	aPortfolio register: anAccount.
	
	^aPortfolio.! !
!PortfolioTest class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:15:59'!
createPortfolioWithFinancialEntity: aFinancialEntity
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	aPortfolio register: aFinancialEntity.
	
	^aPortfolio.! !

!methodRemoval: PortfolioTest class #createPortfolioWithAccount: stamp: 'BR 10/17/2023 21:16:04'!
createPortfolioWithAccount: anAccount
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	aPortfolio register: anAccount.
	
	^aPortfolio.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:16:33' prior: 50651595!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio register: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:16:58' prior: 50651453!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithFinancialEntity: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio register: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 21:17:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 21:17:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 21:17:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:21:58'!
test03BalanceOfPortfolioWithChildPortfolio
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithFinancialEntity: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio register: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!methodRemoval: PortfolioTest #test03PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 21:22:04'!
test03PortfolioWithOnlyAccountsHasSameBalance
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithFinancialEntity: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio register: childPortfolio. 
	self assert: portfolio balance equals: 150.
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:22:43'!
test02BalanceOfPortfolioWithChildAccounts
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio register: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	! !

!methodRemoval: PortfolioTest #test02PortfolioWithOnlyAccountsHasSameBalance stamp: 'BR 10/17/2023 21:22:55'!
test02PortfolioWithOnlyAccountsHasSameBalance
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio register: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:25:18'!
test04CannotAddSameAccountTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	portfolio register: childAccount.
	
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:25:28' prior: 50651892!
test04CannotAddSameAccountTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	portfolio register: childAccount.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:28:03' prior: 50651904!
test04CannotAddSameAccountTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	
	
	self should: [portfolio register: childAccount] raise: Error description: 'Cannot'
	
	! !
!Portfolio class methodsFor: 'no messages' stamp: 'BR 10/17/2023 21:28:40'!
portfolioCannotHaveSameAccountTwiceError
	^self! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:28:47'!
portfolioCannotHaveSameAccountTwiceErrorDescription
	^self! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:29:02' prior: 50651930!
portfolioCannotHaveSameAccountTwiceErrorDescription
	^'Portfolio cannot have repeated account'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:29:10'!
portfolioCannotHaveRepeatedAccountErrorDescription
	^'Portfolio cannot have repeated account'! !

!methodRemoval: Portfolio class #portfolioCannotHaveSameAccountTwiceError stamp: 'BR 10/17/2023 21:29:16'!
portfolioCannotHaveSameAccountTwiceError
	^self!

!methodRemoval: Portfolio class #portfolioCannotHaveSameAccountTwiceErrorDescription stamp: 'BR 10/17/2023 21:29:21'!
portfolioCannotHaveSameAccountTwiceErrorDescription
	^'Portfolio cannot have repeated account'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:30:06' prior: 50651914!
test04CannotAddSameAccountTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	
	
	self should: [portfolio register: childAccount] raise: Error description: Portfolio portfolioCannotHaveRepeatedAccountErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test04CannotAddSameAccountTwice stamp: 'BR 10/17/2023 21:30:10'!
FAILURE!

!testRun: #PortfolioTest #test04CannotAddSameAccountTwice stamp: 'BR 10/17/2023 21:30:10'!
FAILURE!

----End fileIn of /home/bruno/Downloads/linux64(3)/linux64/Packages/TerseGuide.pck.st----!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 21:37:30' prior: 50651729!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedAccountErrorDescription ].
	financialEntities add: aFinancialEntity.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 21:37:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/17/2023 21:37:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/17/2023 21:37:46'!
PASSED!

!testRun: #PortfolioTest #test04CannotAddSameAccountTwice stamp: 'BR 10/17/2023 21:37:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:48:27'!
test04CannotAddSameFinancialEntityTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	
	
	self should: [portfolio register: childAccount] raise: Error description: Portfolio portfolioCannotHaveRepeatedAccountErrorDescription. 
	
	! !

!methodRemoval: PortfolioTest #test04CannotAddSameAccountTwice stamp: 'BR 10/17/2023 21:48:29'!
test04CannotAddSameAccountTwice
	|portfolio childAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childAccount.
	
	
	self should: [portfolio register: childAccount] raise: Error description: Portfolio portfolioCannotHaveRepeatedAccountErrorDescription. 
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:49:06' prior: 50654922!
test04CannotAddSameFinancialEntityTwice
	|portfolio childFinancialEntity|
	
	childFinancialEntity := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childFinancialEntity.
	
	
	self should: [portfolio register: childFinancialEntity] raise: Error description: Portfolio portfolioCannotHaveRepeatedAccountErrorDescription. 
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:49:24'!
portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription
	^'Portfolio cannot have repeated account'! !

!methodRemoval: Portfolio class #portfolioCannotHaveRepeatedAccountErrorDescription stamp: 'BR 10/17/2023 21:49:28'!
portfolioCannotHaveRepeatedAccountErrorDescription
	^'Portfolio cannot have repeated account'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:49:37' prior: 50654964!
portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription
	^'Portfolio cannot have repeated financial entities'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:49:54' prior: 50654949!
test04CannotAddSameFinancialEntityTwice
	|portfolio childFinancialEntity|
	
	childFinancialEntity := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childFinancialEntity.
	
	
	self should: [portfolio register: childFinancialEntity] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:54:25'!
test05CannotAddSameFinancialEntityTwice
	|portfolio childFinancialEntity|
	
	childFinancialEntity := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: childFinancialEntity.
	
	
	self should: [portfolio register: childFinancialEntity] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:56:31' prior: 50655000!
test05CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:56:57'!
portfolioHierarchyCannotContainCycles
	^'Portfolio hierarchy cannot contain cycles'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 21:57:17' prior: 50655015!
test05CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test05CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 21:57:19'!
FAILURE!

!testRun: #PortfolioTest #test05CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 21:57:19'!
FAILURE!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:03:39' prior: 50654899!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:39:52' prior: 50655062!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:40:01'!
test06CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:41:04'!
test05CannotAddPortfolioToItself
	|portfolio|
	
	portfolio := Portfolio new.
	
	
	self should: [portfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:41:08' prior: 50655102!
test05CannotAddPortfolioToItself
	|portfolio|
	
	portfolio := Portfolio new.

	self should: [portfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:41:10'!
FAILURE!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:41:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:41:29' prior: 50655113!
test05CannotAddPortfolioToItself
	|portfolio|
	
	portfolio := Portfolio new.

	self should: [portfolio register: portfolio.] raise: Error description: Portfolio portfolioHierarchyCannotContainCycles . 
	
	! !

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:41:31'!
FAILURE!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:41:31'!
FAILURE!

!methodRemoval: PortfolioTest #test05CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 22:41:46'!
test05CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:42:24'!
FAILURE!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:42:24'!
FAILURE!

Portfolio portfolioHierarchyCannotContainCycles!

self = aFinancialEntity!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:45:23' prior: 50655072!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/17/2023 22:45:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/17/2023 22:45:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/17/2023 22:45:26'!
PASSED!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 22:45:26'!
PASSED!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:45:26'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 22:45:26'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 22:45:26'!
FAILURE!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/17/2023 22:45:31'!
PASSED!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:47:36' prior: 50655172!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(self financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:54:02' prior: 50655212!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity includesEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/17/2023 22:54:14' prior: 50655229!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'initialization' stamp: 'BR 10/17/2023 22:55:01'!
hasRegisteredEntity: aFinancialEntity
	^financialEntities includes: aFinancialEntity.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:57:47'!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:58:11' prior: 50655268!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	self should: [childPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 22:58:17'!
test07CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!methodRemoval: PortfolioTest #test06CannotAddSameFinancialEntityTwice stamp: 'BR 10/17/2023 22:58:31'!
test06CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/17/2023 22:58:35'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/17/2023 22:58:35'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/17/2023 22:59:28'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/17/2023 22:59:28'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/17/2023 23:02:34' prior: 50655285!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio register: childPortfolio.
	
	self should: [childPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/17/2023 23:02:36'!
PASSED!

----QUIT----(17 October 2023 23:38:17) CuisUniversity-5981.image priorSource: 10222696!

----STARTUP---- (18 October 2023 22:57:32) as /home/bruno/Downloads/linux64(3)/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/18/2023 22:59:36'!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!methodRemoval: PortfolioTest #test07CannotAddSameFinancialEntityTwice stamp: 'BR 10/18/2023 22:59:39'!
test07CannotAddSameFinancialEntityTwice
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio register: childPortfolio.
	childPortfolio register: grandchildPortfolio.
	
	self should: [grandchildPortfolio register: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 22:59:43'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 22:59:43'!
FAILURE!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:01:06' prior: 50655246!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:02:27' prior: 50655408!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity isDescendentOf: self) ifFalse: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:03:46'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:03:46'!
ERROR!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:03:57' prior: 50655428!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	
	financialEntities add: aFinancialEntity.! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:04:02'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:04:02'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:04:37'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:04:37'!
FAILURE!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:05:51' prior: 50655455!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity isDescendentOf: self) ifFalse: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:06:06' prior: 50655485!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:07:14'!
isDescendentOf: aFinancialEntity
	
	! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:09:44' prior: 50655505!
register: aFinancialEntity 
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:10:01' prior: 50655525!
isDescendentOf: aFinancialEntity
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:12:16' prior: 50655538!
isDescendentOf: aFinancialEntity
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:13:04' prior: 50655529!
register: aFinancialEntity 
	(financialEntities includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:18:57' prior: 50655554!
isDescendentOf: aFinancialEntity
	(self = aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasChildWithRegisteredEntity: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:20:20'!
hasChildWithRegisteredEntity: aFinancialEntity
	financialEntities anySatisfy: [:financialEntity | financialEntity hasRegisteredEntity: self].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/18/2023 23:20:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:20:48'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/18/2023 23:20:48'!
ERROR!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/18/2023 23:20:48'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/18/2023 23:20:48'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/18/2023 23:20:48'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:20:48'!
ERROR!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:21:08' prior: 50655594!
hasChildWithRegisteredEntity: aFinancialEntity
	^financialEntities anySatisfy: [:financialEntity | financialEntity hasRegisteredEntity: self].! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/18/2023 23:21:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:21:12'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/18/2023 23:21:12'!
ERROR!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/18/2023 23:21:12'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/18/2023 23:21:12'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/18/2023 23:21:12'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:21:12'!
ERROR!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:23:04' prior: 50655579!
isDescendentOf: aFinancialEntity
	^(self = aFinancialEntity) or: [(aFinancialEntity hasRegisteredEntity: self) or: [(aFinancialEntity hasChildWithRegisteredEntity: self)]]  
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/18/2023 23:23:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:23:07'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/18/2023 23:23:07'!
ERROR!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/18/2023 23:23:07'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/18/2023 23:23:07'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/18/2023 23:23:07'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:23:07'!
FAILURE!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:24:12' prior: 50655656!
isDescendentOf: aFinancialEntity
	^(self = aFinancialEntity) or: [
		(aFinancialEntity hasRegisteredEntity: self) or: [
			(aFinancialEntity hasChildWithRegisteredEntity: self)
		]
	]  
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/18/2023 23:24:30'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:24:30'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/18/2023 23:24:30'!
ERROR!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/18/2023 23:24:30'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/18/2023 23:24:30'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/18/2023 23:24:30'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/18/2023 23:24:30'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:24:45'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/18/2023 23:24:55'!
ERROR!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:28:15' prior: 50655688!
isDescendentOf: aPortfolio
	^(self = aPortfolio) or: [
		(aPortfolio hasRegisteredEntity: self) or: [
			(aPortfolio hasChildWithRegisteredEntity: self)
		]
	]  
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'BR 10/18/2023 23:31:49'!
hasRegisteredEntity: aFinancialEntity
	^False.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'BR 10/18/2023 23:31:54' prior: 50655735!
hasRegisteredEntity: aFinancialEntity
	^false.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/18/2023 23:37:55'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/18/2023 23:37:58'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'financialEntities portfolios receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:37:45' prior: 50651700 overrides: 50651671!
balance
	^(portfolios sum: [:portfolio | portfolio balance] ifEmpty: [0])+ (receptiveAccounts sum: [:receptiveAccount | receptiveAccount balance] ifEmpty: [0])
 	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:38:21' prior: 50655625!
hasChildWithRegisteredEntity: aFinancialEntity
	^portfolios anySatisfy: [:financialEntity | financialEntity hasRegisteredEntity: self].! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:38:31' prior: 50655771!
hasChildWithRegisteredEntity: aFinancialEntity
	^portfolios anySatisfy: [:portfolio | portfolio hasRegisteredEntity: self].! !
!Portfolio methodsFor: 'initialization' stamp: 'BR 10/18/2023 23:39:06' prior: 50651744 overrides: 16920235!
initialize
	portfolios := OrderedCollection new.
	receptiveAccounts := OrderedCollection new.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:39:42' prior: 50655565!
register: aFinancialEntity 
	(portfolios includes: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:41:10' prior: 50655792!
register: aFinancialEntity 
	((portfolios includes: aFinancialEntity) or: [receptiveAccounts includes: aFinancialEntity]) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'initialization' stamp: 'BR 10/18/2023 23:42:03' prior: 50655262!
hasRegisteredEntity: aFinancialEntity
	^(portfolios includes: aFinancialEntity) or: [receptiveAccounts includes: aFinancialEntity].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:42:31' prior: 50655805!
register: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:46:59'!
registerPortfolio: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/18/2023 23:51:07' prior: 50655840!
registerPortfolio: aPortfolio 
	(self hasRegisteredEntity: aPortfolio) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription ].
	(aPortfolio isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	financialEntities add: aPortfolio.! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/18/2023 23:58:42' prior: 50655778!
hasChildWithRegisteredEntity: aFinancialEntity
	^portfolios anySatisfy: [:portfolio | portfolio hasRegisteredEntity: self].
	! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:00:19' prior: 50655827!
register: aFinancialEntity 
	^(self hasRegisteredEntity: aFinancialEntity) or: [(aFinancialEntity isDescendentOf: self)]! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:01:43' prior: 50655874!
register: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [].
	(aFinancialEntity isDescendentOf: self) ifTrue: []! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:01:57' prior: 50655881!
register: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: []! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:02:15' prior: 50655888!
register: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:02:44'!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !

!methodRemoval: Portfolio #validateRegistration: stamp: 'BR 10/19/2023 00:03:25'!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:03:48'!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !

!methodRemoval: Portfolio #register: stamp: 'BR 10/19/2023 00:03:48'!
register: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:04:13' prior: 50655854!
registerPortfolio: aPortfolio 
	self validateRegistration: aPortfolio.
	financialEntities add: aPortfolio.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:04:20' prior: 50655958!
registerPortfolio: aPortfolio 
	self validateRegistration: aPortfolio.
	portfolios add: aPortfolio.! !

FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'portfolios receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'BR 10/19/2023 00:04:32'!
FinancialEntity subclass: #Portfolio
	instanceVariableNames: 'portfolios receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:04:54'!
registerReceptiveAccount: aPortfolio 
	self validateRegistration: aPortfolio.
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:05:58' prior: 50655985!
registerReceptiveAccount: aReceptiveAccount 
	(aReceptiveAccount isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	portfolios add: aReceptiveAccount.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:06:04' prior: 50655992!
registerReceptiveAccount: aReceptiveAccount 
	(aReceptiveAccount isDescendentOf: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	receptiveAccounts add: aReceptiveAccount.! !

!methodRemoval: ReceptiveAccount #hasRegisteredEntity: stamp: 'BR 10/19/2023 00:06:56'!
hasRegisteredEntity: aFinancialEntity
	^false.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/19/2023 00:07:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:07:05'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/19/2023 00:07:05'!
ERROR!

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/19/2023 00:07:05'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/19/2023 00:07:05'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:07:05'!
ERROR!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:07:05'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasZeroBalance stamp: 'BR 10/19/2023 00:07:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:07:18'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:07:18'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:07:37' prior: 50651860!
test02BalanceOfPortfolioWithChildAccounts
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithFinancialEntity: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio registerReceptiveAccount: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest class methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:08:47'!
createPortfolioWithReceptiveAccount: aReceptiveAccount
	|aPortfolio|
	
	aPortfolio := Portfolio new.
	
	aPortfolio registerReceptiveAccount: aReceptiveAccount.
	
	^aPortfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:09:08' prior: 50656048!
test02BalanceOfPortfolioWithChildAccounts
	|portfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: anAccount.
	anotherAccount := ReceptiveAccount new.
	portfolio registerReceptiveAccount: anotherAccount.
	
	Deposit register: 100 on: anAccount.
	Deposit register: 50 on: anotherAccount.
	
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:09:10'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:09:10'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'BR 10/19/2023 00:11:26'!
isDescendentOf: aFinancialEntity
	^(self = aFinancialEntity) or: [
		(aFinancialEntity hasRegisteredEntity: self) or: [
			(aFinancialEntity hasChildWithRegisteredEntity: self)
		]
	]  ! !
!FinancialEntity methodsFor: 'testing' stamp: 'BR 10/19/2023 00:11:39'!
isDescendentOf: aFinancialEntity
	^(self = aFinancialEntity) or: [
		(aFinancialEntity hasRegisteredEntity: self) or: [
			(aFinancialEntity hasChildWithRegisteredEntity: self)
		]
	]  ! !

!methodRemoval: ReceptiveAccount #isDescendentOf: stamp: 'BR 10/19/2023 00:11:40'!
isDescendentOf: aFinancialEntity
	^(self = aFinancialEntity) or: [
		(aFinancialEntity hasRegisteredEntity: self) or: [
			(aFinancialEntity hasChildWithRegisteredEntity: self)
		]
	]  !

!methodRemoval: Portfolio #isDescendentOf: stamp: 'BR 10/19/2023 00:11:40'!
isDescendentOf: aPortfolio
	^(self = aPortfolio) or: [
		(aPortfolio hasRegisteredEntity: self) or: [
			(aPortfolio hasChildWithRegisteredEntity: self)
		]
	]  
	!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithChildAccounts stamp: 'BR 10/19/2023 00:11:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:12:13' prior: 50651820!
test03BalanceOfPortfolioWithChildPortfolio
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithFinancialEntity: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio register: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:12:19' prior: 50656134!
test03BalanceOfPortfolioWithChildPortfolio
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithReceptiveAccount: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio register: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:12:28' prior: 50656154!
test03BalanceOfPortfolioWithChildPortfolio
	|portfolio childAccount childPortfolio grandchildAccount|
	
	childAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childAccount.
	grandchildAccount := ReceptiveAccount new.
	childPortfolio := PortfolioTest createPortfolioWithReceptiveAccount: grandchildAccount.
	
	Deposit register: 100 on: childAccount.
	Deposit register: 50 on: grandchildAccount.
	
	portfolio registerPortfolio: childPortfolio. 
	self assert: portfolio balance equals: 150.
	! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithChildPortfolio stamp: 'BR 10/19/2023 00:12:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:12:53' prior: 50654985!
test04CannotAddSameFinancialEntityTwice
	|portfolio childFinancialEntity|
	
	childFinancialEntity := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childFinancialEntity.
	
	
	self should: [portfolio register: childFinancialEntity] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:13:25' prior: 50656198!
test04CannotAddSameFinancialEntityTwice
	|portfolio childReceptiveAccount|
	
	childReceptiveAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childReceptiveAccount.
	
	
	self should: [portfolio register: childReceptiveAccount] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/19/2023 00:13:27'!
PASSED!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/19/2023 00:13:37'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:13:43'!
ERROR!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:13:43'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:13:50' prior: 50655344!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio register: childPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:13:52'!
ERROR!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:13:52'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:14:00' prior: 50656241!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio registerPortfolio: childPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:14:02'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:14:02'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:14:12'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:14:12'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:15:35'!
FAILURE!

self!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:17:59' prior: 50656261!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio registerPortfolio: childPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio.] raise: Error description: Portfolio portfolioHierarchyCannotContainCycles. 
	
	! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:18:00'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:18:00'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:18:55'!
FAILURE!

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:18:55'!
FAILURE!

childPortfolio registerPortfolio: portfolio!

portfolio!

childPortfolio!

aFinancialEntity!

aFinancialEntity hasRegisteredEntity: self!

portfolios includes: aFinancialEntity!

portfolios!

self!

portfolio := Portfolio new.
childPortfolio := Portfolio new.
portfolio registerPortfolio: childPortfolio.!

portfolio!

childPortfolio registerPortfolio: portfolio!

childPortfolio!

childPortfolio isDescendentOf: portfolio!

portfolio := Portfolio new.
childPortfolio := Portfolio new.
portfolio registerPortfolio: childPortfolio.!

portfolio := Portfolio new.
childPortfolio := Portfolio new.
portfolio registerPortfolio: childPortfolio.!

portfolio!

childPortfolio!

childPortfolio isDescendentOf: portfolio!

childPortfolio validateRegistration: portfolio!

----SNAPSHOT----(19 October 2023 00:36:22) CuisUniversity-5981.image priorSource: 10358695!

----SNAPSHOT----(19 October 2023 00:36:35) CuisUniversity-5981.image priorSource: 10390063!
!FinancialEntity methodsFor: 'testing' stamp: 'BR 10/19/2023 00:44:48' prior: 50656105!
isDescendentOf: aPortfolio
	^(self = aPortfolio) or: [
		(aPortfolio hasRegisteredEntity: self) or: [
			(aPortfolio hasChildWithRegisteredEntity: self)
		]
	]  ! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 00:47:01' prior: 50655934!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self isDescendentOf: aFinancialEntity) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 00:47:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:47:44' prior: 50655367!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [grandchildPortfolio registerPortfolio: portfolio.] raise: Error description: Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription. 
	
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:47:45'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:47:45'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 00:47:58' prior: 50656371!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [grandchildPortfolio registerPortfolio: portfolio.] raise: Error description: Portfolio portfolioHierarchyCannotContainCycles. 
	
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:48:01'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:48:01'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:50:39'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:50:39'!
FAILURE!

portfolio := Portfolio new.
childPortfolio := Portfolio new.
grandchildPortfolio := Portfolio new.

portfolio registerPortfolio: childPortfolio.
childPortfolio registerPortfolio: grandchildPortfolio.!

portfolio!

childPortfolio!

grandchildPortfolio!

grandchildPortfolio registerPortfolio: portfolio!

grandchildPortfolio!

grandchildPortfolio isDescendentOf: portfolio!

portfolio hasChildWithRegisteredEntity: grandchildPortfolio!

childPortfolio hasChildWithRegisteredEntity: grandchildPortfolio !

childPortfolio hasRegisteredEntity: grandchildPortfolio!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 00:57:15'!
FAILURE!

portfolios anySatisfy: [:portfolio | portfolio hasRegisteredEntity: self]!

portfolios!

self!

aPortfolio!

self!

self isDescendentOf: aFinancialEntity!

self!

aPortfolio hasRegisteredEntity: self!

aPortfolio hasChildWithRegisteredEntity: self!

aPortfolio!

aFinancialEntity!

self!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/19/2023 01:05:46' prior: 50655867!
hasChildWithRegisteredEntity: aFinancialEntity
	^portfolios anySatisfy: [:portfolio | portfolio hasRegisteredEntity: aFinancialEntity].
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 01:05:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:07:28' prior: 50656396!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [] raise: Error description: Portfolio portfolioHierarchyCannotContainCycles. 
	
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 01:07:30'!
FAILURE!

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 01:07:30'!
FAILURE!

----End fileIn of /home/bruno/Documents/isw1/03-Stack/Stack-Exercise.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:10:40' prior: 50656213!
test04CannotAddSameFinancialEntityTwice
	|portfolio childReceptiveAccount|
	
	childReceptiveAccount := ReceptiveAccount new.
	portfolio := PortfolioTest createPortfolioWithReceptiveAccount: childReceptiveAccount.
	
	
	self should: [portfolio register: childReceptiveAccount] raise: Error withExceptionDo: [:error | 
			error messageText = (Portfolio portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription).]! !

!testRun: #PortfolioTest #test04CannotAddSameFinancialEntityTwice stamp: 'BR 10/19/2023 01:10:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:11:25' prior: 50655130!
test05CannotAddPortfolioToItself
	|portfolio|
	
	portfolio := Portfolio new.

	self should: [portfolio register: portfolio.] raise: Error withExceptionDo: Portfolio portfolioHierarchyCannotContainCycles . 
	
	! !

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/19/2023 01:11:27'!
ERROR!

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/19/2023 01:11:27'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:12:00' prior: 50656924!
test05CannotAddPortfolioToItself
	|portfolio|
	
	portfolio := Portfolio new.

	self should: [portfolio register: portfolio.] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test05CannotAddPortfolioToItself stamp: 'BR 10/19/2023 01:12:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:12:13' prior: 50656291!
test06CannotAddFatherToPortfolio
	|portfolio childPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio registerPortfolio: childPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio.] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test06CannotAddFatherToPortfolio stamp: 'BR 10/19/2023 01:12:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:12:26' prior: 50656467!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:12:39' prior: 50656972!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 01:12:41'!
PASSED!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:17:26'!
hasChild: aFinancialEntity
	^(self hasRegisteredEntity: aFinancialEntity) or: [
		portfolios anySatisfy: [:portfolio | portfolio hasChild: aFinancialEntity].
	]! !

portfolio := Portfolio new.
childPortfolio := Portfolio new.
grandchildPortfolio := Portfolio new.!

portfolio := Portfolio new.
childPortfolio := Portfolio new.
grandchildPortfolio := Portfolio new.!

portfolio hasChild: grandchildPortfolio!

portfolio registerPortfolio: childPortfolio.
childPortfolio registerPortfolio: grandchildPortfolio.!

portfolio registerPortfolio: childPortfolio.
childPortfolio registerPortfolio: grandchildPortfolio.!

portfolio := Portfolio new.!

childPortfolio := Portfolio new!

grandchildPortfolio := Portfolio new!

portfolio registerPortfolio: childPortfolio!

childPortfolio registerPortfolio: grandchildPortfolio!

portfolio hasChild: grandchildPortfolio!

portfolio hasChild: grandchildPortfolio!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:19:39' prior: 50656355!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:20:58' prior: 50656001!
registerReceptiveAccount: aReceptiveAccount 
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	receptiveAccounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:22:04' prior: 50657053!
registerReceptiveAccount: aReceptiveAccount 
	self validateRegistration: aReceptiveAccount.
	receptiveAccounts add: aReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'BR 10/19/2023 01:22:16'!
PASSED!

!methodRemoval: FinancialEntity #isDescendentOf: stamp: 'BR 10/19/2023 01:22:36'!
isDescendentOf: aPortfolio
	^(self = aPortfolio) or: [
		(aPortfolio hasRegisteredEntity: self) or: [
			(aPortfolio hasChildWithRegisteredEntity: self)
		]
	]  !

portfolio := Portfolio new!

childPortfolio := Portfolio new!

grandchildPortfolio := Portfolio new!

anotherChild := Portfolio new!

portfolio registerPortfolio: childPortfolio!

portfolio registerPortfolio: anotherChild!

childPortfolio registerPortfolio: grandchildPortfolio!

anotherChild registerPortfolio: grandchildPortfolio!

anotherChild registerPortfolio: grandchildPortfolio!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:40:10'!
test08CannotAddFatherToAnotherFather
	|portfolio childPortfolio anotherchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	anotherchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	portfolio registerPortfolio: anotherchildPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:42:10' prior: 50657116!
test08CannotAddFatherToAnotherFather
	|parentPortfolio childPortfolio portfolio|
	
	parentPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	parentPortfolio registerPortfolio: childPortfolio.
	
	self should: [childPortfolio registerPortfolio: portfolio] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 01:42:27' prior: 50657134!
test08CannotAddFatherToAnotherFather
	|parentPortfolio childPortfolio portfolio|
	
	parentPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	portfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	parentPortfolio registerPortfolio: childPortfolio.
	
	self should: [parentPortfolio registerPortfolio: portfolio] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test08CannotAddFatherToAnotherFather stamp: 'BR 10/19/2023 01:44:04'!
FAILURE!

!testRun: #PortfolioTest #test08CannotAddFatherToAnotherFather stamp: 'BR 10/19/2023 01:44:04'!
FAILURE!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:47:32' prior: 50657041!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity hasDisjointChildren: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 01:50:28'!
hasDisjointChildren: aFinancialEntity
	! !
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/19/2023 01:58:25'!
children
	|children|
	
	children := OrderedCollection new.
	
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio children].
	^children.
 	! !

portfolio children!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:04:58' prior: 50657176!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:14:30'!
descendantsContainsAnyOf: aListOfPortfolios! !

!methodRemoval: Portfolio #hasDisjointChildren: stamp: 'BR 10/19/2023 02:14:34'!
hasDisjointChildren: aFinancialEntity
	!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:19:04' prior: 50657221!
descendantsContainsAnyOf: aListOfFinancialEntities
	aListOfFinancialEntities anySatisfy: [:financialEntity | self hasChild: financialEntity]! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:19:09' prior: 50657229!
descendantsContainsAnyOf: aListOfFinancialEntities
	^aListOfFinancialEntities anySatisfy: [:financialEntity | self hasChild: financialEntity]! !

!testRun: #PortfolioTest #test08CannotAddFatherToAnotherFather stamp: 'BR 10/19/2023 02:19:46'!
PASSED!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:21:00'!
validatePortfolioRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:21:00' prior: 50657062!
registerReceptiveAccount: aReceptiveAccount 
	self validatePortfolioRegistration: aReceptiveAccount.
	receptiveAccounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:21:00' prior: 50655965!
registerPortfolio: aPortfolio 
	self validatePortfolioRegistration: aPortfolio.
	portfolios add: aPortfolio.! !

!methodRemoval: Portfolio #validateRegistration: stamp: 'BR 10/19/2023 02:21:00'!
validateRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'BR 10/19/2023 02:21:34'!
validateReceptiveAccountRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:22:05' prior: 50657247!
validatePortfolioRegistration: aPortfolio 
	(self hasRegisteredEntity: aPortfolio) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aPortfolio hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aPortfolio descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !

!methodRemoval: ReceptiveAccount #validateReceptiveAccountRegistration: stamp: 'BR 10/19/2023 02:22:26'!
validateReceptiveAccountRegistration: aFinancialEntity 
	(self hasRegisteredEntity: aFinancialEntity) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aFinancialEntity hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aFinancialEntity descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:22:35'!
validateReceptiveAccountRegistration: aPortfolio 
	(self hasRegisteredEntity: aPortfolio) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aPortfolio hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aPortfolio descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:23:05' prior: 50657343!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aReceptiveAccount hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aReceptiveAccount descendantsContainsAnyOf: self children) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:27:13'!
test09CannotAddAnotherFatherToFatherOfAccount
	|parentPortfolio childPortfolio portfolio childAccount|
	
	parentPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	
	parentPortfolio registerPortfolio: childPortfolio.
	parentPortfolio registerReceptiveAccount: childAccount.
	
	self should: [childPortfolio registerReceptiveAccount: childAccount] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:27:18' prior: 50657376!
test09CannotAddAnotherFatherToFatherOfAccount
	|parentPortfolio childPortfolio childAccount|
	
	parentPortfolio := Portfolio new.
	childPortfolio := Portfolio new.
	childAccount := ReceptiveAccount new.
	
	parentPortfolio registerPortfolio: childPortfolio.
	parentPortfolio registerReceptiveAccount: childAccount.
	
	self should: [childPortfolio registerReceptiveAccount: childAccount] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test09CannotAddAnotherFatherToFatherOfAccount stamp: 'BR 10/19/2023 02:27:19'!
ERROR!

!testRun: #PortfolioTest #test09CannotAddAnotherFatherToFatherOfAccount stamp: 'BR 10/19/2023 02:27:19'!
ERROR!
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:27:52' prior: 50657264!
registerReceptiveAccount: aReceptiveAccount 
	self validateReceptiveAccountRegistration: aReceptiveAccount.
	receptiveAccounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:33:03' prior: 50657359!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:34:10' prior: 50656989!
test07CannotAddGrandchildToPortfolio
	|portfolio childPortfolio grandchildPortfolio|
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	grandchildPortfolio := Portfolio new.
	
	portfolio registerPortfolio: childPortfolio.
	childPortfolio registerPortfolio: grandchildPortfolio.
	
	self should: [grandchildPortfolio registerPortfolio: portfolio] raise: Error withExceptionDo: [:error | error messageText = (Portfolio portfolioHierarchyCannotContainCycles).]
	
	! !

!testRun: #PortfolioTest #test07CannotAddGrandchildToPortfolio stamp: 'BR 10/19/2023 02:34:14'!
PASSED!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/19/2023 02:42:54'!
hierarchy
	|children|
	
	children := OrderedCollection new.
	
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio children].
	^children.
 	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:42:54' prior: 50657195!
children
	|children|
	
	children := OrderedCollection new.
	
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio hierarchy].
	^children.
 	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:42:54' prior: 50657311!
validatePortfolioRegistration: aPortfolio 
	(self hasRegisteredEntity: aPortfolio) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(aPortfolio hasChild: self) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aPortfolio descendantsContainsAnyOf: self hierarchy) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:42:54' prior: 50657464!
hierarchy
	|children|
	
	children := OrderedCollection new.
	
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio hierarchy].
	^children.
 	! !

!methodRemoval: Portfolio #children stamp: 'BR 10/19/2023 02:42:54'!
children
	|children|
	
	children := OrderedCollection new.
	
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio hierarchy].
	^children.
 	!
!Portfolio methodsFor: 'evaluating' stamp: 'BR 10/19/2023 02:43:17' prior: 50657500!
hierarchy
	|children|
	
	children := OrderedCollection new.
	
	children add: self.
	children addAll: portfolios.
	children addAll: receptiveAccounts.
	
	portfolios do: [:portfolio | children addAll: portfolio hierarchy].
	^children.
 	! !

!testRun: #PortfolioTest #test08CannotAddFatherToAnotherFather stamp: 'BR 10/19/2023 02:51:46'!
PASSED!

Object subclass: #FinancialEntity
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialEntity category: 'Portfolio-Ejercicio' stamp: 'BR 10/19/2023 02:54:53'!
Object subclass: #FinancialEntity
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:55:51'!
registerParent: aFinancialEntity
	parents add: aFinancialEntity.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:56:15' prior: 50657272!
registerPortfolio: aPortfolio 
	self validatePortfolioRegistration: aPortfolio.
	aPortfolio registerParent: self.
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:56:35' prior: 50657422!
registerReceptiveAccount: aReceptiveAccount 
	self validateReceptiveAccountRegistration: aReceptiveAccount.
	aReceptiveAccount registerParent: self.
	receptiveAccounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 02:58:06' prior: 50657430!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aReceptiveAccount descendantsContainsAnyOf: self hierarchy)
	! !
!FinancialEntity methodsFor: 'as yet unclassified' stamp: 'BR 10/19/2023 02:58:27'!
parents
	^parents! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 03:01:37' prior: 50657567!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aReceptiveAccount descendantsContainsAnyOf: self hierarchy)
	! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 03:02:10' prior: 50657586!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	(aReceptiveAccount descendantsContainsAnyOf: self hierarchy)
	! !
!Portfolio methodsFor: 'updating' stamp: 'BR 10/19/2023 03:03:03' prior: 50657601!
validateReceptiveAccountRegistration: aReceptiveAccount 
	(self hasRegisteredEntity: aReceptiveAccount) ifTrue: [^self error: self class portfolioCannotHaveRepeatedFinancialEntitiesErrorDescription].
	(self hasChild: aReceptiveAccount) ifTrue: [^self error: self class portfolioHierarchyCannotContainCycles].
	
	! !

----QUIT----(19 October 2023 03:03:24) CuisUniversity-5981.image priorSource: 10390156!